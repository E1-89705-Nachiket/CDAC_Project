
HAL_CAN_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b58  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004ce0  08004ce0  00005ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf8  08004cf8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004cf8  08004cf8  00005cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d00  08004d00  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d00  08004d00  00005d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d04  08004d04  00005d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004d08  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000154  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1d2  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eba  00000000  00000000  0001520e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  000170c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aeb  00000000  00000000  00017eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226ad  00000000  00000000  0001899b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebf5  00000000  00000000  0003b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da008  00000000  00000000  00049c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123c45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c90  00000000  00000000  00123c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00127918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cc8 	.word	0x08004cc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004cc8 	.word	0x08004cc8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80007e8:	f000 b988 	b.w	8000afc <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	468e      	mov	lr, r1
 800080c:	4604      	mov	r4, r0
 800080e:	4688      	mov	r8, r1
 8000810:	2b00      	cmp	r3, #0
 8000812:	d14a      	bne.n	80008aa <__udivmoddi4+0xa6>
 8000814:	428a      	cmp	r2, r1
 8000816:	4617      	mov	r7, r2
 8000818:	d962      	bls.n	80008e0 <__udivmoddi4+0xdc>
 800081a:	fab2 f682 	clz	r6, r2
 800081e:	b14e      	cbz	r6, 8000834 <__udivmoddi4+0x30>
 8000820:	f1c6 0320 	rsb	r3, r6, #32
 8000824:	fa01 f806 	lsl.w	r8, r1, r6
 8000828:	fa20 f303 	lsr.w	r3, r0, r3
 800082c:	40b7      	lsls	r7, r6
 800082e:	ea43 0808 	orr.w	r8, r3, r8
 8000832:	40b4      	lsls	r4, r6
 8000834:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000838:	fa1f fc87 	uxth.w	ip, r7
 800083c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000840:	0c23      	lsrs	r3, r4, #16
 8000842:	fb0e 8811 	mls	r8, lr, r1, r8
 8000846:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084a:	fb01 f20c 	mul.w	r2, r1, ip
 800084e:	429a      	cmp	r2, r3
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x62>
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000858:	f080 80ea 	bcs.w	8000a30 <__udivmoddi4+0x22c>
 800085c:	429a      	cmp	r2, r3
 800085e:	f240 80e7 	bls.w	8000a30 <__udivmoddi4+0x22c>
 8000862:	3902      	subs	r1, #2
 8000864:	443b      	add	r3, r7
 8000866:	1a9a      	subs	r2, r3, r2
 8000868:	b2a3      	uxth	r3, r4
 800086a:	fbb2 f0fe 	udiv	r0, r2, lr
 800086e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000876:	fb00 fc0c 	mul.w	ip, r0, ip
 800087a:	459c      	cmp	ip, r3
 800087c:	d909      	bls.n	8000892 <__udivmoddi4+0x8e>
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000884:	f080 80d6 	bcs.w	8000a34 <__udivmoddi4+0x230>
 8000888:	459c      	cmp	ip, r3
 800088a:	f240 80d3 	bls.w	8000a34 <__udivmoddi4+0x230>
 800088e:	443b      	add	r3, r7
 8000890:	3802      	subs	r0, #2
 8000892:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000896:	eba3 030c 	sub.w	r3, r3, ip
 800089a:	2100      	movs	r1, #0
 800089c:	b11d      	cbz	r5, 80008a6 <__udivmoddi4+0xa2>
 800089e:	40f3      	lsrs	r3, r6
 80008a0:	2200      	movs	r2, #0
 80008a2:	e9c5 3200 	strd	r3, r2, [r5]
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d905      	bls.n	80008ba <__udivmoddi4+0xb6>
 80008ae:	b10d      	cbz	r5, 80008b4 <__udivmoddi4+0xb0>
 80008b0:	e9c5 0100 	strd	r0, r1, [r5]
 80008b4:	2100      	movs	r1, #0
 80008b6:	4608      	mov	r0, r1
 80008b8:	e7f5      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008ba:	fab3 f183 	clz	r1, r3
 80008be:	2900      	cmp	r1, #0
 80008c0:	d146      	bne.n	8000950 <__udivmoddi4+0x14c>
 80008c2:	4573      	cmp	r3, lr
 80008c4:	d302      	bcc.n	80008cc <__udivmoddi4+0xc8>
 80008c6:	4282      	cmp	r2, r0
 80008c8:	f200 8105 	bhi.w	8000ad6 <__udivmoddi4+0x2d2>
 80008cc:	1a84      	subs	r4, r0, r2
 80008ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80008d2:	2001      	movs	r0, #1
 80008d4:	4690      	mov	r8, r2
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d0e5      	beq.n	80008a6 <__udivmoddi4+0xa2>
 80008da:	e9c5 4800 	strd	r4, r8, [r5]
 80008de:	e7e2      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	f000 8090 	beq.w	8000a06 <__udivmoddi4+0x202>
 80008e6:	fab2 f682 	clz	r6, r2
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	f040 80a4 	bne.w	8000a38 <__udivmoddi4+0x234>
 80008f0:	1a8a      	subs	r2, r1, r2
 80008f2:	0c03      	lsrs	r3, r0, #16
 80008f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f8:	b280      	uxth	r0, r0
 80008fa:	b2bc      	uxth	r4, r7
 80008fc:	2101      	movs	r1, #1
 80008fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000902:	fb0e 221c 	mls	r2, lr, ip, r2
 8000906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800090a:	fb04 f20c 	mul.w	r2, r4, ip
 800090e:	429a      	cmp	r2, r3
 8000910:	d907      	bls.n	8000922 <__udivmoddi4+0x11e>
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000918:	d202      	bcs.n	8000920 <__udivmoddi4+0x11c>
 800091a:	429a      	cmp	r2, r3
 800091c:	f200 80e0 	bhi.w	8000ae0 <__udivmoddi4+0x2dc>
 8000920:	46c4      	mov	ip, r8
 8000922:	1a9b      	subs	r3, r3, r2
 8000924:	fbb3 f2fe 	udiv	r2, r3, lr
 8000928:	fb0e 3312 	mls	r3, lr, r2, r3
 800092c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000930:	fb02 f404 	mul.w	r4, r2, r4
 8000934:	429c      	cmp	r4, r3
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0x144>
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x142>
 8000940:	429c      	cmp	r4, r3
 8000942:	f200 80ca 	bhi.w	8000ada <__udivmoddi4+0x2d6>
 8000946:	4602      	mov	r2, r0
 8000948:	1b1b      	subs	r3, r3, r4
 800094a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800094e:	e7a5      	b.n	800089c <__udivmoddi4+0x98>
 8000950:	f1c1 0620 	rsb	r6, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 f706 	lsr.w	r7, r2, r6
 800095a:	431f      	orrs	r7, r3
 800095c:	fa0e f401 	lsl.w	r4, lr, r1
 8000960:	fa20 f306 	lsr.w	r3, r0, r6
 8000964:	fa2e fe06 	lsr.w	lr, lr, r6
 8000968:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fa00 f801 	lsl.w	r8, r0, r1
 8000972:	fa1f fc87 	uxth.w	ip, r7
 8000976:	fbbe f0f9 	udiv	r0, lr, r9
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000980:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000984:	fb00 fe0c 	mul.w	lr, r0, ip
 8000988:	45a6      	cmp	lr, r4
 800098a:	fa02 f201 	lsl.w	r2, r2, r1
 800098e:	d909      	bls.n	80009a4 <__udivmoddi4+0x1a0>
 8000990:	193c      	adds	r4, r7, r4
 8000992:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000996:	f080 809c 	bcs.w	8000ad2 <__udivmoddi4+0x2ce>
 800099a:	45a6      	cmp	lr, r4
 800099c:	f240 8099 	bls.w	8000ad2 <__udivmoddi4+0x2ce>
 80009a0:	3802      	subs	r0, #2
 80009a2:	443c      	add	r4, r7
 80009a4:	eba4 040e 	sub.w	r4, r4, lr
 80009a8:	fa1f fe83 	uxth.w	lr, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80009bc:	45a4      	cmp	ip, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1ce>
 80009c0:	193c      	adds	r4, r7, r4
 80009c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80009c6:	f080 8082 	bcs.w	8000ace <__udivmoddi4+0x2ca>
 80009ca:	45a4      	cmp	ip, r4
 80009cc:	d97f      	bls.n	8000ace <__udivmoddi4+0x2ca>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009d6:	eba4 040c 	sub.w	r4, r4, ip
 80009da:	fba0 ec02 	umull	lr, ip, r0, r2
 80009de:	4564      	cmp	r4, ip
 80009e0:	4673      	mov	r3, lr
 80009e2:	46e1      	mov	r9, ip
 80009e4:	d362      	bcc.n	8000aac <__udivmoddi4+0x2a8>
 80009e6:	d05f      	beq.n	8000aa8 <__udivmoddi4+0x2a4>
 80009e8:	b15d      	cbz	r5, 8000a02 <__udivmoddi4+0x1fe>
 80009ea:	ebb8 0203 	subs.w	r2, r8, r3
 80009ee:	eb64 0409 	sbc.w	r4, r4, r9
 80009f2:	fa04 f606 	lsl.w	r6, r4, r6
 80009f6:	fa22 f301 	lsr.w	r3, r2, r1
 80009fa:	431e      	orrs	r6, r3
 80009fc:	40cc      	lsrs	r4, r1
 80009fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000a02:	2100      	movs	r1, #0
 8000a04:	e74f      	b.n	80008a6 <__udivmoddi4+0xa2>
 8000a06:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a0a:	0c01      	lsrs	r1, r0, #16
 8000a0c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a10:	b280      	uxth	r0, r0
 8000a12:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a16:	463b      	mov	r3, r7
 8000a18:	4638      	mov	r0, r7
 8000a1a:	463c      	mov	r4, r7
 8000a1c:	46b8      	mov	r8, r7
 8000a1e:	46be      	mov	lr, r7
 8000a20:	2620      	movs	r6, #32
 8000a22:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a26:	eba2 0208 	sub.w	r2, r2, r8
 8000a2a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a2e:	e766      	b.n	80008fe <__udivmoddi4+0xfa>
 8000a30:	4601      	mov	r1, r0
 8000a32:	e718      	b.n	8000866 <__udivmoddi4+0x62>
 8000a34:	4610      	mov	r0, r2
 8000a36:	e72c      	b.n	8000892 <__udivmoddi4+0x8e>
 8000a38:	f1c6 0220 	rsb	r2, r6, #32
 8000a3c:	fa2e f302 	lsr.w	r3, lr, r2
 8000a40:	40b7      	lsls	r7, r6
 8000a42:	40b1      	lsls	r1, r6
 8000a44:	fa20 f202 	lsr.w	r2, r0, r2
 8000a48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a52:	b2bc      	uxth	r4, r7
 8000a54:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a58:	0c11      	lsrs	r1, r2, #16
 8000a5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a5e:	fb08 f904 	mul.w	r9, r8, r4
 8000a62:	40b0      	lsls	r0, r6
 8000a64:	4589      	cmp	r9, r1
 8000a66:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a6a:	b280      	uxth	r0, r0
 8000a6c:	d93e      	bls.n	8000aec <__udivmoddi4+0x2e8>
 8000a6e:	1879      	adds	r1, r7, r1
 8000a70:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000a74:	d201      	bcs.n	8000a7a <__udivmoddi4+0x276>
 8000a76:	4589      	cmp	r9, r1
 8000a78:	d81f      	bhi.n	8000aba <__udivmoddi4+0x2b6>
 8000a7a:	eba1 0109 	sub.w	r1, r1, r9
 8000a7e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a82:	fb09 f804 	mul.w	r8, r9, r4
 8000a86:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a8a:	b292      	uxth	r2, r2
 8000a8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a90:	4542      	cmp	r2, r8
 8000a92:	d229      	bcs.n	8000ae8 <__udivmoddi4+0x2e4>
 8000a94:	18ba      	adds	r2, r7, r2
 8000a96:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000a9a:	d2c4      	bcs.n	8000a26 <__udivmoddi4+0x222>
 8000a9c:	4542      	cmp	r2, r8
 8000a9e:	d2c2      	bcs.n	8000a26 <__udivmoddi4+0x222>
 8000aa0:	f1a9 0102 	sub.w	r1, r9, #2
 8000aa4:	443a      	add	r2, r7
 8000aa6:	e7be      	b.n	8000a26 <__udivmoddi4+0x222>
 8000aa8:	45f0      	cmp	r8, lr
 8000aaa:	d29d      	bcs.n	80009e8 <__udivmoddi4+0x1e4>
 8000aac:	ebbe 0302 	subs.w	r3, lr, r2
 8000ab0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ab4:	3801      	subs	r0, #1
 8000ab6:	46e1      	mov	r9, ip
 8000ab8:	e796      	b.n	80009e8 <__udivmoddi4+0x1e4>
 8000aba:	eba7 0909 	sub.w	r9, r7, r9
 8000abe:	4449      	add	r1, r9
 8000ac0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ac4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ac8:	fb09 f804 	mul.w	r8, r9, r4
 8000acc:	e7db      	b.n	8000a86 <__udivmoddi4+0x282>
 8000ace:	4673      	mov	r3, lr
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1ce>
 8000ad2:	4650      	mov	r0, sl
 8000ad4:	e766      	b.n	80009a4 <__udivmoddi4+0x1a0>
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e6fd      	b.n	80008d6 <__udivmoddi4+0xd2>
 8000ada:	443b      	add	r3, r7
 8000adc:	3a02      	subs	r2, #2
 8000ade:	e733      	b.n	8000948 <__udivmoddi4+0x144>
 8000ae0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	e71c      	b.n	8000922 <__udivmoddi4+0x11e>
 8000ae8:	4649      	mov	r1, r9
 8000aea:	e79c      	b.n	8000a26 <__udivmoddi4+0x222>
 8000aec:	eba1 0109 	sub.w	r1, r1, r9
 8000af0:	46c4      	mov	ip, r8
 8000af2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af6:	fb09 f804 	mul.w	r8, r9, r4
 8000afa:	e7c4      	b.n	8000a86 <__udivmoddi4+0x282>

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <Ultrasonic_distance>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Ultrasonic_distance(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	//Send Trigger Signal to ultrasonic trigger pin
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b0a:	480b      	ldr	r0, [pc, #44]	@ (8000b38 <Ultrasonic_distance+0x38>)
 8000b0c:	f002 f984 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b10:	200a      	movs	r0, #10
 8000b12:	f000 fda1 	bl	8001658 <HAL_Delay>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b1c:	4806      	ldr	r0, [pc, #24]	@ (8000b38 <Ultrasonic_distance+0x38>)
 8000b1e:	f002 f97b 	bl	8002e18 <HAL_GPIO_WritePin>
	//Enable Timer counter
	__HAL_TIM_ENABLE_IT(ULTRASONIC_ECHO_PIN_IC, TIM_IT_CC1);
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <Ultrasonic_distance+0x3c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	68da      	ldr	r2, [r3, #12]
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <Ultrasonic_distance+0x3c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f042 0202 	orr.w	r2, r2, #2
 8000b30:	60da      	str	r2, [r3, #12]
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	20000098 	.word	0x20000098

08000b40 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	//Capture Rising Edge
	if(isRisingCaptured == 0)
 8000b48:	4b41      	ldr	r3, [pc, #260]	@ (8000c50 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d11a      	bne.n	8000b86 <HAL_TIM_IC_CaptureCallback+0x46>
	{
		InputCaptureValue_1 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000b50:	2100      	movs	r1, #0
 8000b52:	4840      	ldr	r0, [pc, #256]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000b54:	f003 fa36 	bl	8003fc4 <HAL_TIM_ReadCapturedValue>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000b5c:	6013      	str	r3, [r2, #0]
		isRisingCaptured = 1;
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c50 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b64:	4b3b      	ldr	r3, [pc, #236]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6a1a      	ldr	r2, [r3, #32]
 8000b6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 020a 	bic.w	r2, r2, #10
 8000b72:	621a      	str	r2, [r3, #32]
 8000b74:	4b37      	ldr	r3, [pc, #220]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6a1a      	ldr	r2, [r3, #32]
 8000b7a:	4b36      	ldr	r3, [pc, #216]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f042 0202 	orr.w	r2, r2, #2
 8000b82:	621a      	str	r2, [r3, #32]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);

	}

}
 8000b84:	e05c      	b.n	8000c40 <HAL_TIM_IC_CaptureCallback+0x100>
	else if(isRisingCaptured == 1)
 8000b86:	4b32      	ldr	r3, [pc, #200]	@ (8000c50 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d158      	bne.n	8000c40 <HAL_TIM_IC_CaptureCallback+0x100>
		InputCaptureValue_2 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4830      	ldr	r0, [pc, #192]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000b92:	f003 fa17 	bl	8003fc4 <HAL_TIM_ReadCapturedValue>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4a30      	ldr	r2, [pc, #192]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000b9a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	@ 0x24
		if(InputCaptureValue_2 > InputCaptureValue_1)
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d907      	bls.n	8000bc0 <HAL_TIM_IC_CaptureCallback+0x80>
			InputCaptureDifference = InputCaptureValue_2 - InputCaptureValue_1;
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	4a29      	ldr	r2, [pc, #164]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e00f      	b.n	8000be0 <HAL_TIM_IC_CaptureCallback+0xa0>
		else if(InputCaptureValue_1 > InputCaptureValue_2)
 8000bc0:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b25      	ldr	r3, [pc, #148]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d909      	bls.n	8000be0 <HAL_TIM_IC_CaptureCallback+0xa0>
			InputCaptureDifference = (0xFFFF - InputCaptureValue_1) + InputCaptureValue_2;
 8000bcc:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000bda:	33ff      	adds	r3, #255	@ 0xff
 8000bdc:	4a20      	ldr	r2, [pc, #128]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000bde:	6013      	str	r3, [r2, #0]
		distance = InputCaptureDifference * 0.0173;
 8000be0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fd5b 	bl	80006a0 <__aeabi_ui2d>
 8000bea:	a317      	add	r3, pc, #92	@ (adr r3, 8000c48 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	f7ff faea 	bl	80001c8 <__aeabi_dmul>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff fdca 	bl	8000794 <__aeabi_d2uiz>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c06:	801a      	strh	r2, [r3, #0]
		isReadingFinished = 1;
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
		isRisingCaptured = 0;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6a1a      	ldr	r2, [r3, #32]
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 020a 	bic.w	r2, r2, #10
 8000c22:	621a      	str	r2, [r3, #32]
 8000c24:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6a12      	ldr	r2, [r2, #32]
 8000c2e:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f022 0202 	bic.w	r2, r2, #2
 8000c3e:	60da      	str	r2, [r3, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58e21965 	.word	0x58e21965
 8000c4c:	3f91b717 	.word	0x3f91b717
 8000c50:	2000014f 	.word	0x2000014f
 8000c54:	20000098 	.word	0x20000098
 8000c58:	20000150 	.word	0x20000150
 8000c5c:	20000154 	.word	0x20000154
 8000c60:	20000158 	.word	0x20000158
 8000c64:	2000014c 	.word	0x2000014c
 8000c68:	2000014e 	.word	0x2000014e

08000c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c72:	f000 fc7f 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c76:	f000 f889 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7a:	f000 fa33 	bl	80010e4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000c7e:	f000 f941 	bl	8000f04 <MX_CAN1_Init>
  MX_TIM4_Init();
 8000c82:	f000 f995 	bl	8000fb0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000c86:	f000 fa03 	bl	8001090 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c8a:	f000 f8e9 	bl	8000e60 <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000c8e:	4836      	ldr	r0, [pc, #216]	@ (8000d68 <main+0xfc>)
 8000c90:	f001 faae 	bl	80021f0 <HAL_CAN_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000c94:	2100      	movs	r1, #0
 8000c96:	4835      	ldr	r0, [pc, #212]	@ (8000d6c <main+0x100>)
 8000c98:	f002 fe18 	bl	80038cc <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	TxHeader.DLC = 5;
 8000c9c:	4b34      	ldr	r3, [pc, #208]	@ (8000d70 <main+0x104>)
 8000c9e:	2205      	movs	r2, #5
 8000ca0:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8000ca2:	4b33      	ldr	r3, [pc, #204]	@ (8000d70 <main+0x104>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000ca8:	4b31      	ldr	r3, [pc, #196]	@ (8000d70 <main+0x104>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = 0x0A9;
 8000cae:	4b30      	ldr	r3, [pc, #192]	@ (8000d70 <main+0x104>)
 8000cb0:	22a9      	movs	r2, #169	@ 0xa9
 8000cb2:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x0000;
 8000cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000d70 <main+0x104>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000cba:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <main+0x104>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	751a      	strb	r2, [r3, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Ultrasonic_distance();
 8000cc0:	f7ff ff1e 	bl	8000b00 <Ultrasonic_distance>
//	uint16_t distance = Get_Distance_Cm();
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cca:	482a      	ldr	r0, [pc, #168]	@ (8000d74 <main+0x108>)
 8000ccc:	f002 f8a4 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 8000cd0:	4829      	ldr	r0, [pc, #164]	@ (8000d78 <main+0x10c>)
 8000cd2:	f000 fd29 	bl	8001728 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8000cd6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cda:	4827      	ldr	r0, [pc, #156]	@ (8000d78 <main+0x10c>)
 8000cdc:	f000 fdf6 	bl	80018cc <HAL_ADC_PollForConversion>
	uint16_t tempreture =HAL_ADC_GetValue(&hadc1);
 8000ce0:	4825      	ldr	r0, [pc, #148]	@ (8000d78 <main+0x10c>)
 8000ce2:	f000 fe7e 	bl	80019e2 <HAL_ADC_GetValue>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
	uint8_t rain =HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000cea:	2110      	movs	r1, #16
 8000cec:	4823      	ldr	r0, [pc, #140]	@ (8000d7c <main+0x110>)
 8000cee:	f002 f87b 	bl	8002de8 <HAL_GPIO_ReadPin>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	717b      	strb	r3, [r7, #5]
	uint16_t switch_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4820      	ldr	r0, [pc, #128]	@ (8000d7c <main+0x110>)
 8000cfa:	f002 f875 	bl	8002de8 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	807b      	strh	r3, [r7, #2]
	if(switch_read == GPIO_PIN_SET)
 8000d02:	887b      	ldrh	r3, [r7, #2]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d105      	bne.n	8000d14 <main+0xa8>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d0e:	4819      	ldr	r0, [pc, #100]	@ (8000d74 <main+0x108>)
 8000d10:	f002 f882 	bl	8002e18 <HAL_GPIO_WritePin>
	}
	TxData[0] = (uint8_t)distance >> 8;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <main+0x114>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	121b      	asrs	r3, r3, #8
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <main+0x118>)
 8000d20:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t)distance & 0xFF;
 8000d22:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <main+0x114>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <main+0x118>)
 8000d2a:	705a      	strb	r2, [r3, #1]

	TxData[2] = (uint8_t)tempreture >> 8;
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	121b      	asrs	r3, r3, #8
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <main+0x118>)
 8000d36:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t)tempreture & 0xFF;
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <main+0x118>)
 8000d3e:	70da      	strb	r2, [r3, #3]
	TxData[4] = rain;
 8000d40:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <main+0x118>)
 8000d42:	797b      	ldrb	r3, [r7, #5]
 8000d44:	7113      	strb	r3, [r2, #4]
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <main+0x11c>)
 8000d48:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <main+0x118>)
 8000d4a:	4909      	ldr	r1, [pc, #36]	@ (8000d70 <main+0x104>)
 8000d4c:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <main+0xfc>)
 8000d4e:	f001 fa93 	bl	8002278 <HAL_CAN_AddTxMessage>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <main+0xf0>
				Error_Handler();
 8000d58:	f000 fa32 	bl	80011c0 <Error_Handler>
	HAL_Delay(1000);
 8000d5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d60:	f000 fc7a 	bl	8001658 <HAL_Delay>
  {
 8000d64:	e7ac      	b.n	8000cc0 <main+0x54>
 8000d66:	bf00      	nop
 8000d68:	20000070 	.word	0x20000070
 8000d6c:	20000098 	.word	0x20000098
 8000d70:	20000128 	.word	0x20000128
 8000d74:	40020c00 	.word	0x40020c00
 8000d78:	20000028 	.word	0x20000028
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	2000014c 	.word	0x2000014c
 8000d84:	20000140 	.word	0x20000140
 8000d88:	20000148 	.word	0x20000148

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b094      	sub	sp, #80	@ 0x50
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	2230      	movs	r2, #48	@ 0x30
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 ff68 	bl	8004c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	4a27      	ldr	r2, [pc, #156]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc0:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <SystemClock_Config+0xd0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a21      	ldr	r2, [pc, #132]	@ (8000e5c <SystemClock_Config+0xd0>)
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <SystemClock_Config+0xd0>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de8:	2301      	movs	r3, #1
 8000dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000e00:	2348      	movs	r3, #72	@ 0x48
 8000e02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 f81b 	bl	8002e4c <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e1c:	f000 f9d0 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e20:	230f      	movs	r3, #15
 8000e22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e24:	2302      	movs	r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fa7c 	bl	800333c <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e4a:	f000 f9b9 	bl	80011c0 <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3750      	adds	r7, #80	@ 0x50
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40007000 	.word	0x40007000

08000e60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e66:	463b      	mov	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000e74:	4a21      	ldr	r2, [pc, #132]	@ (8000efc <MX_ADC1_Init+0x9c>)
 8000e76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e98:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000ea0:	4a17      	ldr	r2, [pc, #92]	@ (8000f00 <MX_ADC1_Init+0xa0>)
 8000ea2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	480e      	ldr	r0, [pc, #56]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000ec0:	f000 fbee 	bl	80016a0 <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000eca:	f000 f979 	bl	80011c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <MX_ADC1_Init+0x98>)
 8000ee0:	f000 fd8c 	bl	80019fc <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eea:	f000 f969 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000028 	.word	0x20000028
 8000efc:	40012000 	.word	0x40012000
 8000f00:	0f000001 	.word	0x0f000001

08000f04 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f0a:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f0c:	4a27      	ldr	r2, [pc, #156]	@ (8000fac <MX_CAN1_Init+0xa8>)
 8000f0e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000f10:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f12:	2212      	movs	r2, #18
 8000f14:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f16:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f24:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f28:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f42:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f48:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f54:	4814      	ldr	r0, [pc, #80]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f56:	f000 ff6f 	bl	8001e38 <HAL_CAN_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f60:	f000 f92e 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef FilterConfig;
  //FilterConfig.SlaveStartFilterBank = 9;
  FilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f64:	2301      	movs	r3, #1
 8000f66:	623b      	str	r3, [r7, #32]
  FilterConfig.FilterBank = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
  FilterConfig.FilterMaskIdHigh = 0xFF00;
 8000f74:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000f78:	60bb      	str	r3, [r7, #8]
  FilterConfig.FilterMaskIdLow = 0x0000;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  FilterConfig.FilterIdHigh = 0x1500;
 8000f7e:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8000f82:	603b      	str	r3, [r7, #0]
  FilterConfig.FilterIdLow = 0x0000;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]

  if(HAL_CAN_ConfigFilter(&hcan1, &FilterConfig) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_CAN1_Init+0xa4>)
 8000f92:	f001 f84d 	bl	8002030 <HAL_CAN_ConfigFilter>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_CAN1_Init+0x9c>
	   Error_Handler();
 8000f9c:	f000 f910 	bl	80011c0 <Error_Handler>
  /* USER CODE END CAN1_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	@ 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000070 	.word	0x20000070
 8000fac:	40006400 	.word	0x40006400

08000fb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	f107 0318 	add.w	r3, r7, #24
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	@ (8001088 <MX_TIM4_Init+0xd8>)
 8000fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800108c <MX_TIM4_Init+0xdc>)
 8000fde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8000fe0:	4b29      	ldr	r3, [pc, #164]	@ (8001088 <MX_TIM4_Init+0xd8>)
 8000fe2:	2253      	movs	r2, #83	@ 0x53
 8000fe4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b28      	ldr	r3, [pc, #160]	@ (8001088 <MX_TIM4_Init+0xd8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fec:	4b26      	ldr	r3, [pc, #152]	@ (8001088 <MX_TIM4_Init+0xd8>)
 8000fee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ff2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b24      	ldr	r3, [pc, #144]	@ (8001088 <MX_TIM4_Init+0xd8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffa:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <MX_TIM4_Init+0xd8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001000:	4821      	ldr	r0, [pc, #132]	@ (8001088 <MX_TIM4_Init+0xd8>)
 8001002:	f002 fbbb 	bl	800377c <HAL_TIM_Base_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800100c:	f000 f8d8 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001014:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001016:	f107 0318 	add.w	r3, r7, #24
 800101a:	4619      	mov	r1, r3
 800101c:	481a      	ldr	r0, [pc, #104]	@ (8001088 <MX_TIM4_Init+0xd8>)
 800101e:	f002 ff09 	bl	8003e34 <HAL_TIM_ConfigClockSource>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001028:	f000 f8ca 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800102c:	4816      	ldr	r0, [pc, #88]	@ (8001088 <MX_TIM4_Init+0xd8>)
 800102e:	f002 fbf4 	bl	800381a <HAL_TIM_IC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001038:	f000 f8c2 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	480f      	ldr	r0, [pc, #60]	@ (8001088 <MX_TIM4_Init+0xd8>)
 800104c:	f003 fabc 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001056:	f000 f8b3 	bl	80011c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800105e:	2301      	movs	r3, #1
 8001060:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_TIM4_Init+0xd8>)
 8001072:	f002 fe43 	bl	8003cfc <HAL_TIM_IC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800107c:	f000 f8a0 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	@ 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000098 	.word	0x20000098
 800108c:	40000800 	.word	0x40000800

08001090 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 8001096:	4a12      	ldr	r2, [pc, #72]	@ (80010e0 <MX_USART2_UART_Init+0x50>)
 8001098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 800109c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010c8:	f003 fb0e 	bl	80046e8 <HAL_UART_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010d2:	f000 f875 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000e0 	.word	0x200000e0
 80010e0:	40004400 	.word	0x40004400

080010e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b2d      	ldr	r3, [pc, #180]	@ (80011b4 <MX_GPIO_Init+0xd0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a2c      	ldr	r2, [pc, #176]	@ (80011b4 <MX_GPIO_Init+0xd0>)
 8001104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b2a      	ldr	r3, [pc, #168]	@ (80011b4 <MX_GPIO_Init+0xd0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <MX_GPIO_Init+0xd0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a25      	ldr	r2, [pc, #148]	@ (80011b4 <MX_GPIO_Init+0xd0>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b23      	ldr	r3, [pc, #140]	@ (80011b4 <MX_GPIO_Init+0xd0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <MX_GPIO_Init+0xd0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a1e      	ldr	r2, [pc, #120]	@ (80011b4 <MX_GPIO_Init+0xd0>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <MX_GPIO_Init+0xd0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <MX_GPIO_Init+0xd0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a17      	ldr	r2, [pc, #92]	@ (80011b4 <MX_GPIO_Init+0xd0>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <MX_GPIO_Init+0xd0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8001170:	4811      	ldr	r0, [pc, #68]	@ (80011b8 <MX_GPIO_Init+0xd4>)
 8001172:	f001 fe51 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8001176:	2311      	movs	r3, #17
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <MX_GPIO_Init+0xd8>)
 800118a:	f001 fc91 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 800118e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <MX_GPIO_Init+0xd4>)
 80011a8:	f001 fc82 	bl	8002ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	@ 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40020000 	.word	0x40020000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <Error_Handler+0x8>

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	4a0f      	ldr	r2, [pc, #60]	@ (8001218 <HAL_MspInit+0x4c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <HAL_MspInit+0x4c>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800120a:	2007      	movs	r0, #7
 800120c:	f001 fc0e 	bl	8002a2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a17      	ldr	r2, [pc, #92]	@ (8001298 <HAL_ADC_MspInit+0x7c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d127      	bne.n	800128e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b16      	ldr	r3, [pc, #88]	@ (800129c <HAL_ADC_MspInit+0x80>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	4a15      	ldr	r2, [pc, #84]	@ (800129c <HAL_ADC_MspInit+0x80>)
 8001248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124c:	6453      	str	r3, [r2, #68]	@ 0x44
 800124e:	4b13      	ldr	r3, [pc, #76]	@ (800129c <HAL_ADC_MspInit+0x80>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <HAL_ADC_MspInit+0x80>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a0e      	ldr	r2, [pc, #56]	@ (800129c <HAL_ADC_MspInit+0x80>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <HAL_ADC_MspInit+0x80>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001276:	2302      	movs	r3, #2
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	2303      	movs	r3, #3
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <HAL_ADC_MspInit+0x84>)
 800128a:	f001 fc11 	bl	8002ab0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	@ 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40012000 	.word	0x40012000
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020000 	.word	0x40020000

080012a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001338 <HAL_CAN_MspInit+0x94>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d134      	bne.n	8001330 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <HAL_CAN_MspInit+0x98>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	4a1b      	ldr	r2, [pc, #108]	@ (800133c <HAL_CAN_MspInit+0x98>)
 80012d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <HAL_CAN_MspInit+0x98>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_CAN_MspInit+0x98>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a14      	ldr	r2, [pc, #80]	@ (800133c <HAL_CAN_MspInit+0x98>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_CAN_MspInit+0x98>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001310:	2309      	movs	r3, #9
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4809      	ldr	r0, [pc, #36]	@ (8001340 <HAL_CAN_MspInit+0x9c>)
 800131c:	f001 fbc8 	bl	8002ab0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2014      	movs	r0, #20
 8001326:	f001 fb8c 	bl	8002a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800132a:	2014      	movs	r0, #20
 800132c:	f001 fba5 	bl	8002a7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	@ 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40006400 	.word	0x40006400
 800133c:	40023800 	.word	0x40023800
 8001340:	40020400 	.word	0x40020400

08001344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1d      	ldr	r2, [pc, #116]	@ (80013d8 <HAL_TIM_Base_MspInit+0x94>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d134      	bne.n	80013d0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <HAL_TIM_Base_MspInit+0x98>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a1b      	ldr	r2, [pc, #108]	@ (80013dc <HAL_TIM_Base_MspInit+0x98>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_TIM_Base_MspInit+0x98>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_TIM_Base_MspInit+0x98>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a14      	ldr	r2, [pc, #80]	@ (80013dc <HAL_TIM_Base_MspInit+0x98>)
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <HAL_TIM_Base_MspInit+0x98>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800139e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013b0:	2302      	movs	r3, #2
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4809      	ldr	r0, [pc, #36]	@ (80013e0 <HAL_TIM_Base_MspInit+0x9c>)
 80013bc:	f001 fb78 	bl	8002ab0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	201e      	movs	r0, #30
 80013c6:	f001 fb3c 	bl	8002a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013ca:	201e      	movs	r0, #30
 80013cc:	f001 fb55 	bl	8002a7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	@ 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40000800 	.word	0x40000800
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020c00 	.word	0x40020c00

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a19      	ldr	r2, [pc, #100]	@ (8001468 <HAL_UART_MspInit+0x84>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d12b      	bne.n	800145e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <HAL_UART_MspInit+0x88>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	4a17      	ldr	r2, [pc, #92]	@ (800146c <HAL_UART_MspInit+0x88>)
 8001410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001414:	6413      	str	r3, [r2, #64]	@ 0x40
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <HAL_UART_MspInit+0x88>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_UART_MspInit+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a10      	ldr	r2, [pc, #64]	@ (800146c <HAL_UART_MspInit+0x88>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <HAL_UART_MspInit+0x88>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800143e:	230c      	movs	r3, #12
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144e:	2307      	movs	r3, #7
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	@ (8001470 <HAL_UART_MspInit+0x8c>)
 800145a:	f001 fb29 	bl	8002ab0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	@ 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40004400 	.word	0x40004400
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <NMI_Handler+0x4>

0800147c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <MemManage_Handler+0x4>

0800148c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <UsageFault_Handler+0x4>

0800149c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ca:	f000 f8a5 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80014d8:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <CAN1_RX0_IRQHandler+0x10>)
 80014da:	f000 ff9d 	bl	8002418 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000070 	.word	0x20000070

080014e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014ec:	4802      	ldr	r0, [pc, #8]	@ (80014f8 <TIM4_IRQHandler+0x10>)
 80014ee:	f002 fb15 	bl	8003b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000098 	.word	0x20000098

080014fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <SystemInit+0x20>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001506:	4a05      	ldr	r2, [pc, #20]	@ (800151c <SystemInit+0x20>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001558 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001524:	f7ff ffea 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001528:	480c      	ldr	r0, [pc, #48]	@ (800155c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152a:	490d      	ldr	r1, [pc, #52]	@ (8001560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001540:	4c0a      	ldr	r4, [pc, #40]	@ (800156c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154e:	f003 fb97 	bl	8004c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001552:	f7ff fb8b 	bl	8000c6c <main>
  bx  lr    
 8001556:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001558:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001564:	08004d08 	.word	0x08004d08
  ldr r2, =_sbss
 8001568:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800156c:	20000160 	.word	0x20000160

08001570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC_IRQHandler>
	...

08001574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001578:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <HAL_Init+0x40>)
 800157e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001584:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <HAL_Init+0x40>)
 800158a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800158e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <HAL_Init+0x40>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f001 fa45 	bl	8002a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f808 	bl	80015b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a8:	f7ff fe10 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_InitTick+0x54>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <HAL_InitTick+0x58>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 fa5d 	bl	8002a96 <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00e      	b.n	8001604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d80a      	bhi.n	8001602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015f4:	f001 fa25 	bl	8002a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4a06      	ldr	r2, [pc, #24]	@ (8001614 <HAL_InitTick+0x5c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000000 	.word	0x20000000
 8001610:	20000008 	.word	0x20000008
 8001614:	20000004 	.word	0x20000004

08001618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	@ (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000008 	.word	0x20000008
 800163c:	2000015c 	.word	0x2000015c

08001640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	2000015c 	.word	0x2000015c

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffde 	bl	8001640 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008

080016a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e033      	b.n	800171e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fdac 	bl	800121c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d118      	bne.n	8001710 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016e6:	f023 0302 	bic.w	r3, r3, #2
 80016ea:	f043 0202 	orr.w	r2, r3, #2
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 faa4 	bl	8001c40 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f023 0303 	bic.w	r3, r3, #3
 8001706:	f043 0201 	orr.w	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	641a      	str	r2, [r3, #64]	@ 0x40
 800170e:	e001      	b.n	8001714 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_ADC_Start+0x1a>
 800173e:	2302      	movs	r3, #2
 8001740:	e0b2      	b.n	80018a8 <HAL_ADC_Start+0x180>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b01      	cmp	r3, #1
 8001756:	d018      	beq.n	800178a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001768:	4b52      	ldr	r3, [pc, #328]	@ (80018b4 <HAL_ADC_Start+0x18c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a52      	ldr	r2, [pc, #328]	@ (80018b8 <HAL_ADC_Start+0x190>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9a      	lsrs	r2, r3, #18
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800177c:	e002      	b.n	8001784 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3b01      	subs	r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f9      	bne.n	800177e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b01      	cmp	r3, #1
 8001796:	d17a      	bne.n	800188e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017d6:	d106      	bne.n	80017e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017dc:	f023 0206 	bic.w	r2, r3, #6
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80017e4:	e002      	b.n	80017ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f4:	4b31      	ldr	r3, [pc, #196]	@ (80018bc <HAL_ADC_Start+0x194>)
 80017f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001800:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	2b00      	cmp	r3, #0
 800180c:	d12a      	bne.n	8001864 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a2b      	ldr	r2, [pc, #172]	@ (80018c0 <HAL_ADC_Start+0x198>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d015      	beq.n	8001844 <HAL_ADC_Start+0x11c>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a29      	ldr	r2, [pc, #164]	@ (80018c4 <HAL_ADC_Start+0x19c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d105      	bne.n	800182e <HAL_ADC_Start+0x106>
 8001822:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <HAL_ADC_Start+0x194>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00a      	beq.n	8001844 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a25      	ldr	r2, [pc, #148]	@ (80018c8 <HAL_ADC_Start+0x1a0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d136      	bne.n	80018a6 <HAL_ADC_Start+0x17e>
 8001838:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <HAL_ADC_Start+0x194>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b00      	cmp	r3, #0
 8001842:	d130      	bne.n	80018a6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d129      	bne.n	80018a6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	e020      	b.n	80018a6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a15      	ldr	r2, [pc, #84]	@ (80018c0 <HAL_ADC_Start+0x198>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d11b      	bne.n	80018a6 <HAL_ADC_Start+0x17e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d114      	bne.n	80018a6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	e00b      	b.n	80018a6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f043 0210 	orr.w	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	20000000 	.word	0x20000000
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	40012300 	.word	0x40012300
 80018c0:	40012000 	.word	0x40012000
 80018c4:	40012100 	.word	0x40012100
 80018c8:	40012200 	.word	0x40012200

080018cc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018e8:	d113      	bne.n	8001912 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018f8:	d10b      	bne.n	8001912 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f043 0220 	orr.w	r2, r3, #32
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e063      	b.n	80019da <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001912:	f7ff fe95 	bl	8001640 <HAL_GetTick>
 8001916:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001918:	e021      	b.n	800195e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001920:	d01d      	beq.n	800195e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <HAL_ADC_PollForConversion+0x6c>
 8001928:	f7ff fe8a 	bl	8001640 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d212      	bcs.n	800195e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b02      	cmp	r3, #2
 8001944:	d00b      	beq.n	800195e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	f043 0204 	orr.w	r2, r3, #4
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e03d      	b.n	80019da <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b02      	cmp	r3, #2
 800196a:	d1d6      	bne.n	800191a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f06f 0212 	mvn.w	r2, #18
 8001974:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d123      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001994:	2b00      	cmp	r3, #0
 8001996:	d11f      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d111      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1c>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e105      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x228>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b09      	cmp	r3, #9
 8001a26:	d925      	bls.n	8001a74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68d9      	ldr	r1, [r3, #12]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b1e      	subs	r3, #30
 8001a3e:	2207      	movs	r2, #7
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43da      	mvns	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68d9      	ldr	r1, [r3, #12]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	4603      	mov	r3, r0
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4403      	add	r3, r0
 8001a66:	3b1e      	subs	r3, #30
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	e022      	b.n	8001aba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6919      	ldr	r1, [r3, #16]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	2207      	movs	r2, #7
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	400a      	ands	r2, r1
 8001a96:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6919      	ldr	r1, [r3, #16]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4403      	add	r3, r0
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d824      	bhi.n	8001b0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3b05      	subs	r3, #5
 8001ad4:	221f      	movs	r2, #31
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	3b05      	subs	r3, #5
 8001afe:	fa00 f203 	lsl.w	r2, r0, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b0a:	e04c      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b0c      	cmp	r3, #12
 8001b12:	d824      	bhi.n	8001b5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b23      	subs	r3, #35	@ 0x23
 8001b26:	221f      	movs	r2, #31
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43da      	mvns	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	400a      	ands	r2, r1
 8001b34:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3b23      	subs	r3, #35	@ 0x23
 8001b50:	fa00 f203 	lsl.w	r2, r0, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b5c:	e023      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3b41      	subs	r3, #65	@ 0x41
 8001b70:	221f      	movs	r2, #31
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3b41      	subs	r3, #65	@ 0x41
 8001b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ba6:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <HAL_ADC_ConfigChannel+0x234>)
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a21      	ldr	r2, [pc, #132]	@ (8001c34 <HAL_ADC_ConfigChannel+0x238>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d109      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1cc>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d105      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	@ (8001c34 <HAL_ADC_ConfigChannel+0x238>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d123      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x21e>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d003      	beq.n	8001be2 <HAL_ADC_ConfigChannel+0x1e6>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b11      	cmp	r3, #17
 8001be0:	d11b      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b10      	cmp	r3, #16
 8001bf4:	d111      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_ADC_ConfigChannel+0x23c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a10      	ldr	r2, [pc, #64]	@ (8001c3c <HAL_ADC_ConfigChannel+0x240>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	0c9a      	lsrs	r2, r3, #18
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c0c:	e002      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f9      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40012300 	.word	0x40012300
 8001c34:	40012000 	.word	0x40012000
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	431bde83 	.word	0x431bde83

08001c40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c48:	4b79      	ldr	r3, [pc, #484]	@ (8001e30 <ADC_Init+0x1f0>)
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	021a      	lsls	r2, r3, #8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6899      	ldr	r1, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	4a58      	ldr	r2, [pc, #352]	@ (8001e34 <ADC_Init+0x1f4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d022      	beq.n	8001d1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ce6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6899      	ldr	r1, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6899      	ldr	r1, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	e00f      	b.n	8001d3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d3c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0202 	bic.w	r2, r2, #2
 8001d4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6899      	ldr	r1, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7e1b      	ldrb	r3, [r3, #24]
 8001d58:	005a      	lsls	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d01b      	beq.n	8001da4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d7a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	3b01      	subs	r3, #1
 8001d98:	035a      	lsls	r2, r3, #13
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	e007      	b.n	8001db4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001db2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	051a      	lsls	r2, r3, #20
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001de8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6899      	ldr	r1, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001df6:	025a      	lsls	r2, r3, #9
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6899      	ldr	r1, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	029a      	lsls	r2, r3, #10
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	609a      	str	r2, [r3, #8]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40012300 	.word	0x40012300
 8001e34:	0f000001 	.word	0x0f000001

08001e38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0ed      	b.n	8002026 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fa24 	bl	80012a4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e6c:	f7ff fbe8 	bl	8001640 <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e72:	e012      	b.n	8001e9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e74:	f7ff fbe4 	bl	8001640 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b0a      	cmp	r3, #10
 8001e80:	d90b      	bls.n	8001e9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2205      	movs	r2, #5
 8001e92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0c5      	b.n	8002026 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0e5      	beq.n	8001e74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0202 	bic.w	r2, r2, #2
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb8:	f7ff fbc2 	bl	8001640 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ebe:	e012      	b.n	8001ee6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ec0:	f7ff fbbe 	bl	8001640 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b0a      	cmp	r3, #10
 8001ecc:	d90b      	bls.n	8001ee6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2205      	movs	r2, #5
 8001ede:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e09f      	b.n	8002026 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e5      	bne.n	8001ec0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7e1b      	ldrb	r3, [r3, #24]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d108      	bne.n	8001f0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	e007      	b.n	8001f1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7e5b      	ldrb	r3, [r3, #25]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d108      	bne.n	8001f38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e007      	b.n	8001f48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7e9b      	ldrb	r3, [r3, #26]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d108      	bne.n	8001f62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0220 	orr.w	r2, r2, #32
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e007      	b.n	8001f72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0220 	bic.w	r2, r2, #32
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7edb      	ldrb	r3, [r3, #27]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d108      	bne.n	8001f8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0210 	bic.w	r2, r2, #16
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e007      	b.n	8001f9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0210 	orr.w	r2, r2, #16
 8001f9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7f1b      	ldrb	r3, [r3, #28]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d108      	bne.n	8001fb6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e007      	b.n	8001fc6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0208 	bic.w	r2, r2, #8
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7f5b      	ldrb	r3, [r3, #29]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d108      	bne.n	8001fe0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0204 	orr.w	r2, r2, #4
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e007      	b.n	8001ff0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0204 	bic.w	r2, r2, #4
 8001fee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	ea42 0103 	orr.w	r1, r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	1e5a      	subs	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002046:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d003      	beq.n	8002056 <HAL_CAN_ConfigFilter+0x26>
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	2b02      	cmp	r3, #2
 8002052:	f040 80be 	bne.w	80021d2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002056:	4b65      	ldr	r3, [pc, #404]	@ (80021ec <HAL_CAN_ConfigFilter+0x1bc>)
 8002058:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002070:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	431a      	orrs	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2201      	movs	r2, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	401a      	ands	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d123      	bne.n	8002100 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3248      	adds	r2, #72	@ 0x48
 80020e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020f6:	6979      	ldr	r1, [r7, #20]
 80020f8:	3348      	adds	r3, #72	@ 0x48
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d122      	bne.n	800214e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	431a      	orrs	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002128:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3248      	adds	r2, #72	@ 0x48
 800212e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002142:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002144:	6979      	ldr	r1, [r7, #20]
 8002146:	3348      	adds	r3, #72	@ 0x48
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	43db      	mvns	r3, r3
 8002160:	401a      	ands	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002168:	e007      	b.n	800217a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	431a      	orrs	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	43db      	mvns	r3, r3
 800218c:	401a      	ands	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002194:	e007      	b.n	80021a6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	431a      	orrs	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021c4:	f023 0201 	bic.w	r2, r3, #1
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e006      	b.n	80021e0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
  }
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40006400 	.word	0x40006400

080021f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d12e      	bne.n	8002262 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800221c:	f7ff fa10 	bl	8001640 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002222:	e012      	b.n	800224a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002224:	f7ff fa0c 	bl	8001640 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b0a      	cmp	r3, #10
 8002230:	d90b      	bls.n	800224a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2205      	movs	r2, #5
 8002242:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e012      	b.n	8002270 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e5      	bne.n	8002224 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e006      	b.n	8002270 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
  }
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	@ 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3020 	ldrb.w	r3, [r3, #32]
 800228c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002296:	7ffb      	ldrb	r3, [r7, #31]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d003      	beq.n	80022a4 <HAL_CAN_AddTxMessage+0x2c>
 800229c:	7ffb      	ldrb	r3, [r7, #31]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	f040 80ad 	bne.w	80023fe <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10a      	bne.n	80022c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8095 	beq.w	80023ee <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	0e1b      	lsrs	r3, r3, #24
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022ce:	2201      	movs	r2, #1
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	409a      	lsls	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10d      	bne.n	80022fc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022ea:	68f9      	ldr	r1, [r7, #12]
 80022ec:	6809      	ldr	r1, [r1, #0]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3318      	adds	r3, #24
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	440b      	add	r3, r1
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e00f      	b.n	800231c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002306:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800230c:	68f9      	ldr	r1, [r7, #12]
 800230e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002310:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3318      	adds	r3, #24
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	440b      	add	r3, r1
 800231a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3318      	adds	r3, #24
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	440b      	add	r3, r1
 800232c:	3304      	adds	r3, #4
 800232e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	7d1b      	ldrb	r3, [r3, #20]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d111      	bne.n	800235c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3318      	adds	r3, #24
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	6811      	ldr	r1, [r2, #0]
 800234c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3318      	adds	r3, #24
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	440b      	add	r3, r1
 8002358:	3304      	adds	r3, #4
 800235a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3307      	adds	r3, #7
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	061a      	lsls	r2, r3, #24
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3306      	adds	r3, #6
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	041b      	lsls	r3, r3, #16
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3305      	adds	r3, #5
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	4313      	orrs	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	3204      	adds	r2, #4
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	4610      	mov	r0, r2
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	6811      	ldr	r1, [r2, #0]
 8002384:	ea43 0200 	orr.w	r2, r3, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	440b      	add	r3, r1
 800238e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002392:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3303      	adds	r3, #3
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	061a      	lsls	r2, r3, #24
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3302      	adds	r3, #2
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3301      	adds	r3, #1
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	4313      	orrs	r3, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	4610      	mov	r0, r2
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	6811      	ldr	r1, [r2, #0]
 80023ba:	ea43 0200 	orr.w	r2, r3, r0
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80023c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3318      	adds	r3, #24
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4413      	add	r3, r2
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	6811      	ldr	r1, [r2, #0]
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3318      	adds	r3, #24
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	440b      	add	r3, r1
 80023e8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e00e      	b.n	800240c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e006      	b.n	800240c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
  }
}
 800240c:	4618      	mov	r0, r3
 800240e:	3724      	adds	r7, #36	@ 0x24
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002420:	2300      	movs	r3, #0
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d07c      	beq.n	8002558 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d023      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2201      	movs	r2, #1
 800246e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f983 	bl	8002786 <HAL_CAN_TxMailbox0CompleteCallback>
 8002480:	e016      	b.n	80024b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
 8002494:	e00c      	b.n	80024b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a8:	e002      	b.n	80024b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f989 	bl	80027c2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d024      	beq.n	8002504 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f963 	bl	800279a <HAL_CAN_TxMailbox1CompleteCallback>
 80024d4:	e016      	b.n	8002504 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d004      	beq.n	80024ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e8:	e00c      	b.n	8002504 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80024fc:	e002      	b.n	8002504 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f969 	bl	80027d6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d024      	beq.n	8002558 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002516:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f943 	bl	80027ae <HAL_CAN_TxMailbox2CompleteCallback>
 8002528:	e016      	b.n	8002558 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
 800253c:	e00c      	b.n	8002558 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002550:	e002      	b.n	8002558 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f949 	bl	80027ea <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00c      	beq.n	800257c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2210      	movs	r2, #16
 800257a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2208      	movs	r2, #8
 8002596:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f93a 	bl	8002812 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d009      	beq.n	80025bc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f921 	bl	80027fe <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00c      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2210      	movs	r2, #16
 80025de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d006      	beq.n	8002602 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2208      	movs	r2, #8
 80025fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f91c 	bl	800283a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	d009      	beq.n	8002620 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f903 	bl	8002826 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	d006      	beq.n	8002642 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2210      	movs	r2, #16
 800263a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f906 	bl	800284e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2208      	movs	r2, #8
 800265c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8ff 	bl	8002862 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d07b      	beq.n	8002766 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d072      	beq.n	800275e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	f043 0302 	orr.w	r3, r3, #2
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d043      	beq.n	800275e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d03e      	beq.n	800275e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026e6:	2b60      	cmp	r3, #96	@ 0x60
 80026e8:	d02b      	beq.n	8002742 <HAL_CAN_IRQHandler+0x32a>
 80026ea:	2b60      	cmp	r3, #96	@ 0x60
 80026ec:	d82e      	bhi.n	800274c <HAL_CAN_IRQHandler+0x334>
 80026ee:	2b50      	cmp	r3, #80	@ 0x50
 80026f0:	d022      	beq.n	8002738 <HAL_CAN_IRQHandler+0x320>
 80026f2:	2b50      	cmp	r3, #80	@ 0x50
 80026f4:	d82a      	bhi.n	800274c <HAL_CAN_IRQHandler+0x334>
 80026f6:	2b40      	cmp	r3, #64	@ 0x40
 80026f8:	d019      	beq.n	800272e <HAL_CAN_IRQHandler+0x316>
 80026fa:	2b40      	cmp	r3, #64	@ 0x40
 80026fc:	d826      	bhi.n	800274c <HAL_CAN_IRQHandler+0x334>
 80026fe:	2b30      	cmp	r3, #48	@ 0x30
 8002700:	d010      	beq.n	8002724 <HAL_CAN_IRQHandler+0x30c>
 8002702:	2b30      	cmp	r3, #48	@ 0x30
 8002704:	d822      	bhi.n	800274c <HAL_CAN_IRQHandler+0x334>
 8002706:	2b10      	cmp	r3, #16
 8002708:	d002      	beq.n	8002710 <HAL_CAN_IRQHandler+0x2f8>
 800270a:	2b20      	cmp	r3, #32
 800270c:	d005      	beq.n	800271a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800270e:	e01d      	b.n	800274c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	f043 0308 	orr.w	r3, r3, #8
 8002716:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002718:	e019      	b.n	800274e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	f043 0310 	orr.w	r3, r3, #16
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002722:	e014      	b.n	800274e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	f043 0320 	orr.w	r3, r3, #32
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800272c:	e00f      	b.n	800274e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002736:	e00a      	b.n	800274e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002740:	e005      	b.n	800274e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800274a:	e000      	b.n	800274e <HAL_CAN_IRQHandler+0x336>
            break;
 800274c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699a      	ldr	r2, [r3, #24]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800275c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2204      	movs	r2, #4
 8002764:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f87c 	bl	8002876 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800277e:	bf00      	nop
 8002780:	3728      	adds	r7, #40	@ 0x28
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800289c:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028be:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	60d3      	str	r3, [r2, #12]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d8:	4b04      	ldr	r3, [pc, #16]	@ (80028ec <__NVIC_GetPriorityGrouping+0x18>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	f003 0307 	and.w	r3, r3, #7
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db0b      	blt.n	800291a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4907      	ldr	r1, [pc, #28]	@ (8002928 <__NVIC_EnableIRQ+0x38>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	2001      	movs	r0, #1
 8002912:	fa00 f202 	lsl.w	r2, r0, r2
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000e100 	.word	0xe000e100

0800292c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	490c      	ldr	r1, [pc, #48]	@ (8002978 <__NVIC_SetPriority+0x4c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4908      	ldr	r1, [pc, #32]	@ (800297c <__NVIC_SetPriority+0x50>)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3b04      	subs	r3, #4
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	@ 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	4313      	orrs	r3, r2
         );
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	@ 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029f8:	d301      	bcc.n	80029fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00f      	b.n	8002a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <SysTick_Config+0x40>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a06:	210f      	movs	r1, #15
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a0c:	f7ff ff8e 	bl	800292c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <SysTick_Config+0x40>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a16:	4b04      	ldr	r3, [pc, #16]	@ (8002a28 <SysTick_Config+0x40>)
 8002a18:	2207      	movs	r2, #7
 8002a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	e000e010 	.word	0xe000e010

08002a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff29 	bl	800288c <__NVIC_SetPriorityGrouping>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a54:	f7ff ff3e 	bl	80028d4 <__NVIC_GetPriorityGrouping>
 8002a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	6978      	ldr	r0, [r7, #20]
 8002a60:	f7ff ff8e 	bl	8002980 <NVIC_EncodePriority>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff5d 	bl	800292c <__NVIC_SetPriority>
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff31 	bl	80028f0 <__NVIC_EnableIRQ>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ffa2 	bl	80029e8 <SysTick_Config>
 8002aa4:	4603      	mov	r3, r0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	@ 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e16b      	b.n	8002da4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002acc:	2201      	movs	r2, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	f040 815a 	bne.w	8002d9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d005      	beq.n	8002b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d130      	bne.n	8002b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b38:	2201      	movs	r2, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 0201 	and.w	r2, r3, #1
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d017      	beq.n	8002ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d123      	bne.n	8002bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	08da      	lsrs	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3208      	adds	r2, #8
 8002bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	08da      	lsrs	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3208      	adds	r2, #8
 8002bee:	69b9      	ldr	r1, [r7, #24]
 8002bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0203 	and.w	r2, r3, #3
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80b4 	beq.w	8002d9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	4b60      	ldr	r3, [pc, #384]	@ (8002dbc <HAL_GPIO_Init+0x30c>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	4a5f      	ldr	r2, [pc, #380]	@ (8002dbc <HAL_GPIO_Init+0x30c>)
 8002c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c46:	4b5d      	ldr	r3, [pc, #372]	@ (8002dbc <HAL_GPIO_Init+0x30c>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c52:	4a5b      	ldr	r2, [pc, #364]	@ (8002dc0 <HAL_GPIO_Init+0x310>)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	3302      	adds	r3, #2
 8002c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	220f      	movs	r2, #15
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a52      	ldr	r2, [pc, #328]	@ (8002dc4 <HAL_GPIO_Init+0x314>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d02b      	beq.n	8002cd6 <HAL_GPIO_Init+0x226>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a51      	ldr	r2, [pc, #324]	@ (8002dc8 <HAL_GPIO_Init+0x318>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d025      	beq.n	8002cd2 <HAL_GPIO_Init+0x222>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a50      	ldr	r2, [pc, #320]	@ (8002dcc <HAL_GPIO_Init+0x31c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01f      	beq.n	8002cce <HAL_GPIO_Init+0x21e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4f      	ldr	r2, [pc, #316]	@ (8002dd0 <HAL_GPIO_Init+0x320>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d019      	beq.n	8002cca <HAL_GPIO_Init+0x21a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4e      	ldr	r2, [pc, #312]	@ (8002dd4 <HAL_GPIO_Init+0x324>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_GPIO_Init+0x216>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4d      	ldr	r2, [pc, #308]	@ (8002dd8 <HAL_GPIO_Init+0x328>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_GPIO_Init+0x212>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8002ddc <HAL_GPIO_Init+0x32c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_GPIO_Init+0x20e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8002de0 <HAL_GPIO_Init+0x330>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_GPIO_Init+0x20a>
 8002cb6:	2307      	movs	r3, #7
 8002cb8:	e00e      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cba:	2308      	movs	r3, #8
 8002cbc:	e00c      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	e00a      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cc2:	2305      	movs	r3, #5
 8002cc4:	e008      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	e006      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e004      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e002      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_GPIO_Init+0x228>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	f002 0203 	and.w	r2, r2, #3
 8002cde:	0092      	lsls	r2, r2, #2
 8002ce0:	4093      	lsls	r3, r2
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce8:	4935      	ldr	r1, [pc, #212]	@ (8002dc0 <HAL_GPIO_Init+0x310>)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	089b      	lsrs	r3, r3, #2
 8002cee:	3302      	adds	r3, #2
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <HAL_GPIO_Init+0x334>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d1a:	4a32      	ldr	r2, [pc, #200]	@ (8002de4 <HAL_GPIO_Init+0x334>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d20:	4b30      	ldr	r3, [pc, #192]	@ (8002de4 <HAL_GPIO_Init+0x334>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d44:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <HAL_GPIO_Init+0x334>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d4a:	4b26      	ldr	r3, [pc, #152]	@ (8002de4 <HAL_GPIO_Init+0x334>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002de4 <HAL_GPIO_Init+0x334>)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d74:	4b1b      	ldr	r3, [pc, #108]	@ (8002de4 <HAL_GPIO_Init+0x334>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d98:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <HAL_GPIO_Init+0x334>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3301      	adds	r3, #1
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b0f      	cmp	r3, #15
 8002da8:	f67f ae90 	bls.w	8002acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	3724      	adds	r7, #36	@ 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40013800 	.word	0x40013800
 8002dc4:	40020000 	.word	0x40020000
 8002dc8:	40020400 	.word	0x40020400
 8002dcc:	40020800 	.word	0x40020800
 8002dd0:	40020c00 	.word	0x40020c00
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40021400 	.word	0x40021400
 8002ddc:	40021800 	.word	0x40021800
 8002de0:	40021c00 	.word	0x40021c00
 8002de4:	40013c00 	.word	0x40013c00

08002de8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	887b      	ldrh	r3, [r7, #2]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	e001      	b.n	8002e0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
 8002e24:	4613      	mov	r3, r2
 8002e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e28:	787b      	ldrb	r3, [r7, #1]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e34:	e003      	b.n	8002e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e36:	887b      	ldrh	r3, [r7, #2]
 8002e38:	041a      	lsls	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	619a      	str	r2, [r3, #24]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e267      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d075      	beq.n	8002f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e6a:	4b88      	ldr	r3, [pc, #544]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d00c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e76:	4b85      	ldr	r3, [pc, #532]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d112      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e82:	4b82      	ldr	r3, [pc, #520]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	4b7e      	ldr	r3, [pc, #504]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d05b      	beq.n	8002f54 <HAL_RCC_OscConfig+0x108>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d157      	bne.n	8002f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e242      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x74>
 8002eb2:	4b76      	ldr	r3, [pc, #472]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a75      	ldr	r2, [pc, #468]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e01d      	b.n	8002efc <HAL_RCC_OscConfig+0xb0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x98>
 8002eca:	4b70      	ldr	r3, [pc, #448]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6f      	ldr	r2, [pc, #444]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6c      	ldr	r2, [pc, #432]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0xb0>
 8002ee4:	4b69      	ldr	r3, [pc, #420]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a68      	ldr	r2, [pc, #416]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b66      	ldr	r3, [pc, #408]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a65      	ldr	r2, [pc, #404]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fb9c 	bl	8001640 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fb98 	bl	8001640 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	@ 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e207      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0xc0>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fb88 	bl	8001640 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fe fb84 	bl	8001640 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	@ 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e1f3      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f46:	4b51      	ldr	r3, [pc, #324]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0xe8>
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d063      	beq.n	800302a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f62:	4b4a      	ldr	r3, [pc, #296]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6e:	4b47      	ldr	r3, [pc, #284]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d11c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7a:	4b44      	ldr	r3, [pc, #272]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d116      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	4b41      	ldr	r3, [pc, #260]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x152>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d001      	beq.n	8002f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e1c7      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4937      	ldr	r1, [pc, #220]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb2:	e03a      	b.n	800302a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fbc:	4b34      	ldr	r3, [pc, #208]	@ (8003090 <HAL_RCC_OscConfig+0x244>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fb3d 	bl	8001640 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fe fb39 	bl	8001640 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e1a8      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b28      	ldr	r3, [pc, #160]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4925      	ldr	r1, [pc, #148]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]
 8002ffc:	e015      	b.n	800302a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffe:	4b24      	ldr	r3, [pc, #144]	@ (8003090 <HAL_RCC_OscConfig+0x244>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe fb1c 	bl	8001640 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300c:	f7fe fb18 	bl	8001640 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e187      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d036      	beq.n	80030a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d016      	beq.n	800306c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303e:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <HAL_RCC_OscConfig+0x248>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fe fafc 	bl	8001640 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304c:	f7fe faf8 	bl	8001640 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e167      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_RCC_OscConfig+0x240>)
 8003060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x200>
 800306a:	e01b      	b.n	80030a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800306c:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <HAL_RCC_OscConfig+0x248>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003072:	f7fe fae5 	bl	8001640 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	e00e      	b.n	8003098 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307a:	f7fe fae1 	bl	8001640 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d907      	bls.n	8003098 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e150      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
 800308c:	40023800 	.word	0x40023800
 8003090:	42470000 	.word	0x42470000
 8003094:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003098:	4b88      	ldr	r3, [pc, #544]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 800309a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1ea      	bne.n	800307a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8097 	beq.w	80031e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b6:	4b81      	ldr	r3, [pc, #516]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10f      	bne.n	80030e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	4b7d      	ldr	r3, [pc, #500]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	4a7c      	ldr	r2, [pc, #496]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030d2:	4b7a      	ldr	r3, [pc, #488]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030de:	2301      	movs	r3, #1
 80030e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e2:	4b77      	ldr	r3, [pc, #476]	@ (80032c0 <HAL_RCC_OscConfig+0x474>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d118      	bne.n	8003120 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ee:	4b74      	ldr	r3, [pc, #464]	@ (80032c0 <HAL_RCC_OscConfig+0x474>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a73      	ldr	r2, [pc, #460]	@ (80032c0 <HAL_RCC_OscConfig+0x474>)
 80030f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fa:	f7fe faa1 	bl	8001640 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003102:	f7fe fa9d 	bl	8001640 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e10c      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	4b6a      	ldr	r3, [pc, #424]	@ (80032c0 <HAL_RCC_OscConfig+0x474>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x2ea>
 8003128:	4b64      	ldr	r3, [pc, #400]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	4a63      	ldr	r2, [pc, #396]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	@ 0x70
 8003134:	e01c      	b.n	8003170 <HAL_RCC_OscConfig+0x324>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b05      	cmp	r3, #5
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x30c>
 800313e:	4b5f      	ldr	r3, [pc, #380]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003142:	4a5e      	ldr	r2, [pc, #376]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	6713      	str	r3, [r2, #112]	@ 0x70
 800314a:	4b5c      	ldr	r3, [pc, #368]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314e:	4a5b      	ldr	r2, [pc, #364]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6713      	str	r3, [r2, #112]	@ 0x70
 8003156:	e00b      	b.n	8003170 <HAL_RCC_OscConfig+0x324>
 8003158:	4b58      	ldr	r3, [pc, #352]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315c:	4a57      	ldr	r2, [pc, #348]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	@ 0x70
 8003164:	4b55      	ldr	r3, [pc, #340]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003168:	4a54      	ldr	r2, [pc, #336]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 800316a:	f023 0304 	bic.w	r3, r3, #4
 800316e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d015      	beq.n	80031a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fe fa62 	bl	8001640 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	e00a      	b.n	8003196 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7fe fa5e 	bl	8001640 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0cb      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003196:	4b49      	ldr	r3, [pc, #292]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0ee      	beq.n	8003180 <HAL_RCC_OscConfig+0x334>
 80031a2:	e014      	b.n	80031ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a4:	f7fe fa4c 	bl	8001640 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ac:	f7fe fa48 	bl	8001640 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0b5      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c2:	4b3e      	ldr	r3, [pc, #248]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ee      	bne.n	80031ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d105      	bne.n	80031e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d4:	4b39      	ldr	r3, [pc, #228]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	4a38      	ldr	r2, [pc, #224]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 80031da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80a1 	beq.w	800332c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ea:	4b34      	ldr	r3, [pc, #208]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d05c      	beq.n	80032b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d141      	bne.n	8003282 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b31      	ldr	r3, [pc, #196]	@ (80032c4 <HAL_RCC_OscConfig+0x478>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7fe fa1c 	bl	8001640 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe fa18 	bl	8001640 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e087      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	4b27      	ldr	r3, [pc, #156]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	019b      	lsls	r3, r3, #6
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	3b01      	subs	r3, #1
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	491b      	ldr	r1, [pc, #108]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003254:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <HAL_RCC_OscConfig+0x478>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fe f9f1 	bl	8001640 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003262:	f7fe f9ed 	bl	8001640 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e05c      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003274:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x416>
 8003280:	e054      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b10      	ldr	r3, [pc, #64]	@ (80032c4 <HAL_RCC_OscConfig+0x478>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe f9da 	bl	8001640 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe f9d6 	bl	8001640 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e045      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <HAL_RCC_OscConfig+0x470>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x444>
 80032ae:	e03d      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e038      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40007000 	.word	0x40007000
 80032c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <HAL_RCC_OscConfig+0x4ec>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d028      	beq.n	8003328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d121      	bne.n	8003328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d11a      	bne.n	8003328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032f8:	4013      	ands	r3, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003300:	4293      	cmp	r3, r2
 8003302:	d111      	bne.n	8003328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330e:	085b      	lsrs	r3, r3, #1
 8003310:	3b01      	subs	r3, #1
 8003312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d107      	bne.n	8003328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800

0800333c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0cc      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003350:	4b68      	ldr	r3, [pc, #416]	@ (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d90c      	bls.n	8003378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b65      	ldr	r3, [pc, #404]	@ (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b63      	ldr	r3, [pc, #396]	@ (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0b8      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003390:	4b59      	ldr	r3, [pc, #356]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a58      	ldr	r2, [pc, #352]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800339a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a8:	4b53      	ldr	r3, [pc, #332]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4a52      	ldr	r2, [pc, #328]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b4:	4b50      	ldr	r3, [pc, #320]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	494d      	ldr	r1, [pc, #308]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d044      	beq.n	800345c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d107      	bne.n	80033ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b47      	ldr	r3, [pc, #284]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d119      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e07f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	4b3f      	ldr	r3, [pc, #252]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e06f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	4b3b      	ldr	r3, [pc, #236]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e067      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341a:	4b37      	ldr	r3, [pc, #220]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4934      	ldr	r1, [pc, #208]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800342c:	f7fe f908 	bl	8001640 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	e00a      	b.n	800344a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fe f904 	bl	8001640 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e04f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	4b2b      	ldr	r3, [pc, #172]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 020c 	and.w	r2, r3, #12
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	429a      	cmp	r2, r3
 800345a:	d1eb      	bne.n	8003434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800345c:	4b25      	ldr	r3, [pc, #148]	@ (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d20c      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b22      	ldr	r3, [pc, #136]	@ (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b20      	ldr	r3, [pc, #128]	@ (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e032      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4916      	ldr	r1, [pc, #88]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ae:	4b12      	ldr	r3, [pc, #72]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	490e      	ldr	r1, [pc, #56]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034c2:	f000 f821 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	490a      	ldr	r1, [pc, #40]	@ (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	5ccb      	ldrb	r3, [r1, r3]
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	4a09      	ldr	r2, [pc, #36]	@ (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034de:	4b09      	ldr	r3, [pc, #36]	@ (8003504 <HAL_RCC_ClockConfig+0x1c8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe f868 	bl	80015b8 <HAL_InitTick>

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023c00 	.word	0x40023c00
 80034f8:	40023800 	.word	0x40023800
 80034fc:	08004ce0 	.word	0x08004ce0
 8003500:	20000000 	.word	0x20000000
 8003504:	20000004 	.word	0x20000004

08003508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800350c:	b094      	sub	sp, #80	@ 0x50
 800350e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003520:	4b79      	ldr	r3, [pc, #484]	@ (8003708 <HAL_RCC_GetSysClockFreq+0x200>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 030c 	and.w	r3, r3, #12
 8003528:	2b08      	cmp	r3, #8
 800352a:	d00d      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x40>
 800352c:	2b08      	cmp	r3, #8
 800352e:	f200 80e1 	bhi.w	80036f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x34>
 8003536:	2b04      	cmp	r3, #4
 8003538:	d003      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0x3a>
 800353a:	e0db      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800353c:	4b73      	ldr	r3, [pc, #460]	@ (800370c <HAL_RCC_GetSysClockFreq+0x204>)
 800353e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003540:	e0db      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003542:	4b73      	ldr	r3, [pc, #460]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x208>)
 8003544:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003546:	e0d8      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003548:	4b6f      	ldr	r3, [pc, #444]	@ (8003708 <HAL_RCC_GetSysClockFreq+0x200>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003550:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003552:	4b6d      	ldr	r3, [pc, #436]	@ (8003708 <HAL_RCC_GetSysClockFreq+0x200>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d063      	beq.n	8003626 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355e:	4b6a      	ldr	r3, [pc, #424]	@ (8003708 <HAL_RCC_GetSysClockFreq+0x200>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	099b      	lsrs	r3, r3, #6
 8003564:	2200      	movs	r2, #0
 8003566:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003568:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800356a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800356c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003570:	633b      	str	r3, [r7, #48]	@ 0x30
 8003572:	2300      	movs	r3, #0
 8003574:	637b      	str	r3, [r7, #52]	@ 0x34
 8003576:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800357a:	4622      	mov	r2, r4
 800357c:	462b      	mov	r3, r5
 800357e:	f04f 0000 	mov.w	r0, #0
 8003582:	f04f 0100 	mov.w	r1, #0
 8003586:	0159      	lsls	r1, r3, #5
 8003588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800358c:	0150      	lsls	r0, r2, #5
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4621      	mov	r1, r4
 8003594:	1a51      	subs	r1, r2, r1
 8003596:	6139      	str	r1, [r7, #16]
 8003598:	4629      	mov	r1, r5
 800359a:	eb63 0301 	sbc.w	r3, r3, r1
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035ac:	4659      	mov	r1, fp
 80035ae:	018b      	lsls	r3, r1, #6
 80035b0:	4651      	mov	r1, sl
 80035b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035b6:	4651      	mov	r1, sl
 80035b8:	018a      	lsls	r2, r1, #6
 80035ba:	4651      	mov	r1, sl
 80035bc:	ebb2 0801 	subs.w	r8, r2, r1
 80035c0:	4659      	mov	r1, fp
 80035c2:	eb63 0901 	sbc.w	r9, r3, r1
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035da:	4690      	mov	r8, r2
 80035dc:	4699      	mov	r9, r3
 80035de:	4623      	mov	r3, r4
 80035e0:	eb18 0303 	adds.w	r3, r8, r3
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	462b      	mov	r3, r5
 80035e8:	eb49 0303 	adc.w	r3, r9, r3
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035fa:	4629      	mov	r1, r5
 80035fc:	024b      	lsls	r3, r1, #9
 80035fe:	4621      	mov	r1, r4
 8003600:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003604:	4621      	mov	r1, r4
 8003606:	024a      	lsls	r2, r1, #9
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800360e:	2200      	movs	r2, #0
 8003610:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003614:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003618:	f7fd f8dc 	bl	80007d4 <__aeabi_uldivmod>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4613      	mov	r3, r2
 8003622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003624:	e058      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003626:	4b38      	ldr	r3, [pc, #224]	@ (8003708 <HAL_RCC_GetSysClockFreq+0x200>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	099b      	lsrs	r3, r3, #6
 800362c:	2200      	movs	r2, #0
 800362e:	4618      	mov	r0, r3
 8003630:	4611      	mov	r1, r2
 8003632:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003636:	623b      	str	r3, [r7, #32]
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	@ 0x24
 800363c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	f04f 0000 	mov.w	r0, #0
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	0159      	lsls	r1, r3, #5
 800364e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003652:	0150      	lsls	r0, r2, #5
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4641      	mov	r1, r8
 800365a:	ebb2 0a01 	subs.w	sl, r2, r1
 800365e:	4649      	mov	r1, r9
 8003660:	eb63 0b01 	sbc.w	fp, r3, r1
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003670:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003674:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003678:	ebb2 040a 	subs.w	r4, r2, sl
 800367c:	eb63 050b 	sbc.w	r5, r3, fp
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	00eb      	lsls	r3, r5, #3
 800368a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368e:	00e2      	lsls	r2, r4, #3
 8003690:	4614      	mov	r4, r2
 8003692:	461d      	mov	r5, r3
 8003694:	4643      	mov	r3, r8
 8003696:	18e3      	adds	r3, r4, r3
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	464b      	mov	r3, r9
 800369c:	eb45 0303 	adc.w	r3, r5, r3
 80036a0:	607b      	str	r3, [r7, #4]
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ae:	4629      	mov	r1, r5
 80036b0:	028b      	lsls	r3, r1, #10
 80036b2:	4621      	mov	r1, r4
 80036b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036b8:	4621      	mov	r1, r4
 80036ba:	028a      	lsls	r2, r1, #10
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036c2:	2200      	movs	r2, #0
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	61fa      	str	r2, [r7, #28]
 80036c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036cc:	f7fd f882 	bl	80007d4 <__aeabi_uldivmod>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4613      	mov	r3, r2
 80036d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_RCC_GetSysClockFreq+0x200>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	0c1b      	lsrs	r3, r3, #16
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	3301      	adds	r3, #1
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80036e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036f2:	e002      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036f4:	4b05      	ldr	r3, [pc, #20]	@ (800370c <HAL_RCC_GetSysClockFreq+0x204>)
 80036f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3750      	adds	r7, #80	@ 0x50
 8003700:	46bd      	mov	sp, r7
 8003702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	00f42400 	.word	0x00f42400
 8003710:	007a1200 	.word	0x007a1200

08003714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003718:	4b03      	ldr	r3, [pc, #12]	@ (8003728 <HAL_RCC_GetHCLKFreq+0x14>)
 800371a:	681b      	ldr	r3, [r3, #0]
}
 800371c:	4618      	mov	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000000 	.word	0x20000000

0800372c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003730:	f7ff fff0 	bl	8003714 <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	@ (800374c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	0a9b      	lsrs	r3, r3, #10
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	@ (8003750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800
 8003750:	08004cf0 	.word	0x08004cf0

08003754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003758:	f7ff ffdc 	bl	8003714 <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	0b5b      	lsrs	r3, r3, #13
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4903      	ldr	r1, [pc, #12]	@ (8003778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40023800 	.word	0x40023800
 8003778:	08004cf0 	.word	0x08004cf0

0800377c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e041      	b.n	8003812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd fdce 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f000 fc6e 	bl	800409c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e041      	b.n	80038b0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d106      	bne.n	8003846 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f839 	bl	80038b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	4619      	mov	r1, r3
 8003858:	4610      	mov	r0, r2
 800385a:	f000 fc1f 	bl	800409c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d104      	bne.n	80038ea <HAL_TIM_IC_Start_IT+0x1e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e013      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x46>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d104      	bne.n	80038fa <HAL_TIM_IC_Start_IT+0x2e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	e00b      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x46>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d104      	bne.n	800390a <HAL_TIM_IC_Start_IT+0x3e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003906:	b2db      	uxtb	r3, r3
 8003908:	e003      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x46>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d104      	bne.n	8003924 <HAL_TIM_IC_Start_IT+0x58>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e013      	b.n	800394c <HAL_TIM_IC_Start_IT+0x80>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b04      	cmp	r3, #4
 8003928:	d104      	bne.n	8003934 <HAL_TIM_IC_Start_IT+0x68>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003930:	b2db      	uxtb	r3, r3
 8003932:	e00b      	b.n	800394c <HAL_TIM_IC_Start_IT+0x80>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b08      	cmp	r3, #8
 8003938:	d104      	bne.n	8003944 <HAL_TIM_IC_Start_IT+0x78>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e003      	b.n	800394c <HAL_TIM_IC_Start_IT+0x80>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800394a:	b2db      	uxtb	r3, r3
 800394c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800394e:	7bbb      	ldrb	r3, [r7, #14]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d102      	bne.n	800395a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003954:	7b7b      	ldrb	r3, [r7, #13]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0cc      	b.n	8003af8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d104      	bne.n	800396e <HAL_TIM_IC_Start_IT+0xa2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800396c:	e013      	b.n	8003996 <HAL_TIM_IC_Start_IT+0xca>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b04      	cmp	r3, #4
 8003972:	d104      	bne.n	800397e <HAL_TIM_IC_Start_IT+0xb2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800397c:	e00b      	b.n	8003996 <HAL_TIM_IC_Start_IT+0xca>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d104      	bne.n	800398e <HAL_TIM_IC_Start_IT+0xc2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800398c:	e003      	b.n	8003996 <HAL_TIM_IC_Start_IT+0xca>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d104      	bne.n	80039a6 <HAL_TIM_IC_Start_IT+0xda>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039a4:	e013      	b.n	80039ce <HAL_TIM_IC_Start_IT+0x102>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d104      	bne.n	80039b6 <HAL_TIM_IC_Start_IT+0xea>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039b4:	e00b      	b.n	80039ce <HAL_TIM_IC_Start_IT+0x102>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d104      	bne.n	80039c6 <HAL_TIM_IC_Start_IT+0xfa>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039c4:	e003      	b.n	80039ce <HAL_TIM_IC_Start_IT+0x102>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	d841      	bhi.n	8003a58 <HAL_TIM_IC_Start_IT+0x18c>
 80039d4:	a201      	add	r2, pc, #4	@ (adr r2, 80039dc <HAL_TIM_IC_Start_IT+0x110>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a11 	.word	0x08003a11
 80039e0:	08003a59 	.word	0x08003a59
 80039e4:	08003a59 	.word	0x08003a59
 80039e8:	08003a59 	.word	0x08003a59
 80039ec:	08003a23 	.word	0x08003a23
 80039f0:	08003a59 	.word	0x08003a59
 80039f4:	08003a59 	.word	0x08003a59
 80039f8:	08003a59 	.word	0x08003a59
 80039fc:	08003a35 	.word	0x08003a35
 8003a00:	08003a59 	.word	0x08003a59
 8003a04:	08003a59 	.word	0x08003a59
 8003a08:	08003a59 	.word	0x08003a59
 8003a0c:	08003a47 	.word	0x08003a47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0202 	orr.w	r2, r2, #2
 8003a1e:	60da      	str	r2, [r3, #12]
      break;
 8003a20:	e01d      	b.n	8003a5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0204 	orr.w	r2, r2, #4
 8003a30:	60da      	str	r2, [r3, #12]
      break;
 8003a32:	e014      	b.n	8003a5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0208 	orr.w	r2, r2, #8
 8003a42:	60da      	str	r2, [r3, #12]
      break;
 8003a44:	e00b      	b.n	8003a5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0210 	orr.w	r2, r2, #16
 8003a54:	60da      	str	r2, [r3, #12]
      break;
 8003a56:	e002      	b.n	8003a5e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d148      	bne.n	8003af6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	6839      	ldr	r1, [r7, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fd85 	bl	800457c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a22      	ldr	r2, [pc, #136]	@ (8003b00 <HAL_TIM_IC_Start_IT+0x234>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d022      	beq.n	8003ac2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a84:	d01d      	beq.n	8003ac2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b04 <HAL_TIM_IC_Start_IT+0x238>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d018      	beq.n	8003ac2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1c      	ldr	r2, [pc, #112]	@ (8003b08 <HAL_TIM_IC_Start_IT+0x23c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003b0c <HAL_TIM_IC_Start_IT+0x240>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a19      	ldr	r2, [pc, #100]	@ (8003b10 <HAL_TIM_IC_Start_IT+0x244>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a18      	ldr	r2, [pc, #96]	@ (8003b14 <HAL_TIM_IC_Start_IT+0x248>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a16      	ldr	r2, [pc, #88]	@ (8003b18 <HAL_TIM_IC_Start_IT+0x24c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d111      	bne.n	8003ae6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b06      	cmp	r3, #6
 8003ad2:	d010      	beq.n	8003af6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae4:	e007      	b.n	8003af6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40010400 	.word	0x40010400
 8003b14:	40014000 	.word	0x40014000
 8003b18:	40001800 	.word	0x40001800

08003b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d020      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01b      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0202 	mvn.w	r2, #2
 8003b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fc ffea 	bl	8000b40 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa76 	bl	8004060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fa7d 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d020      	beq.n	8003bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01b      	beq.n	8003bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0204 	mvn.w	r2, #4
 8003b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fc ffc4 	bl	8000b40 <HAL_TIM_IC_CaptureCallback>
 8003bb8:	e005      	b.n	8003bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fa50 	bl	8004060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fa57 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d020      	beq.n	8003c18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01b      	beq.n	8003c18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0208 	mvn.w	r2, #8
 8003be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2204      	movs	r2, #4
 8003bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fc ff9e 	bl	8000b40 <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fa2a 	bl	8004060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fa31 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d020      	beq.n	8003c64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01b      	beq.n	8003c64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0210 	mvn.w	r2, #16
 8003c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2208      	movs	r2, #8
 8003c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fc ff78 	bl	8000b40 <HAL_TIM_IC_CaptureCallback>
 8003c50:	e005      	b.n	8003c5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fa04 	bl	8004060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fa0b 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00c      	beq.n	8003c88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0201 	mvn.w	r2, #1
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9e2 	bl	800404c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00c      	beq.n	8003cac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fd14 	bl	80046d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00c      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f9dc 	bl	8004088 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00c      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0220 	mvn.w	r2, #32
 8003cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fce6 	bl	80046c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e088      	b.n	8003e2c <HAL_TIM_IC_ConfigChannel+0x130>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d11b      	bne.n	8003d60 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003d38:	f000 fa5c 	bl	80041f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 020c 	bic.w	r2, r2, #12
 8003d4a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6999      	ldr	r1, [r3, #24]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	619a      	str	r2, [r3, #24]
 8003d5e:	e060      	b.n	8003e22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d11c      	bne.n	8003da0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003d76:	f000 fae0 	bl	800433a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d88:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6999      	ldr	r1, [r3, #24]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	021a      	lsls	r2, r3, #8
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	619a      	str	r2, [r3, #24]
 8003d9e:	e040      	b.n	8003e22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d11b      	bne.n	8003dde <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003db6:	f000 fb2d 	bl	8004414 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 020c 	bic.w	r2, r2, #12
 8003dc8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69d9      	ldr	r1, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	61da      	str	r2, [r3, #28]
 8003ddc:	e021      	b.n	8003e22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	d11c      	bne.n	8003e1e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003df4:	f000 fb4a 	bl	800448c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003e06:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69d9      	ldr	r1, [r3, #28]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	021a      	lsls	r2, r3, #8
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	61da      	str	r2, [r3, #28]
 8003e1c:	e001      	b.n	8003e22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_TIM_ConfigClockSource+0x1c>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e0b4      	b.n	8003fba <HAL_TIM_ConfigClockSource+0x186>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e88:	d03e      	beq.n	8003f08 <HAL_TIM_ConfigClockSource+0xd4>
 8003e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e8e:	f200 8087 	bhi.w	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e96:	f000 8086 	beq.w	8003fa6 <HAL_TIM_ConfigClockSource+0x172>
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e9e:	d87f      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b70      	cmp	r3, #112	@ 0x70
 8003ea2:	d01a      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0xa6>
 8003ea4:	2b70      	cmp	r3, #112	@ 0x70
 8003ea6:	d87b      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b60      	cmp	r3, #96	@ 0x60
 8003eaa:	d050      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x11a>
 8003eac:	2b60      	cmp	r3, #96	@ 0x60
 8003eae:	d877      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b50      	cmp	r3, #80	@ 0x50
 8003eb2:	d03c      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0xfa>
 8003eb4:	2b50      	cmp	r3, #80	@ 0x50
 8003eb6:	d873      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b40      	cmp	r3, #64	@ 0x40
 8003eba:	d058      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x13a>
 8003ebc:	2b40      	cmp	r3, #64	@ 0x40
 8003ebe:	d86f      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b30      	cmp	r3, #48	@ 0x30
 8003ec2:	d064      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ec4:	2b30      	cmp	r3, #48	@ 0x30
 8003ec6:	d86b      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d060      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d867      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d05c      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d05a      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ed8:	e062      	b.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eea:	f000 fb27 	bl	800453c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003efc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	609a      	str	r2, [r3, #8]
      break;
 8003f06:	e04f      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f18:	f000 fb10 	bl	800453c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f2a:	609a      	str	r2, [r3, #8]
      break;
 8003f2c:	e03c      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f000 f9ce 	bl	80042dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2150      	movs	r1, #80	@ 0x50
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fadd 	bl	8004506 <TIM_ITRx_SetConfig>
      break;
 8003f4c:	e02c      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f000 fa2a 	bl	80043b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2160      	movs	r1, #96	@ 0x60
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 facd 	bl	8004506 <TIM_ITRx_SetConfig>
      break;
 8003f6c:	e01c      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f000 f9ae 	bl	80042dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2140      	movs	r1, #64	@ 0x40
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fabd 	bl	8004506 <TIM_ITRx_SetConfig>
      break;
 8003f8c:	e00c      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f000 fab4 	bl	8004506 <TIM_ITRx_SetConfig>
      break;
 8003f9e:	e003      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa4:	e000      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b0c      	cmp	r3, #12
 8003fd6:	d831      	bhi.n	800403c <HAL_TIM_ReadCapturedValue+0x78>
 8003fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08004015 	.word	0x08004015
 8003fe4:	0800403d 	.word	0x0800403d
 8003fe8:	0800403d 	.word	0x0800403d
 8003fec:	0800403d 	.word	0x0800403d
 8003ff0:	0800401f 	.word	0x0800401f
 8003ff4:	0800403d 	.word	0x0800403d
 8003ff8:	0800403d 	.word	0x0800403d
 8003ffc:	0800403d 	.word	0x0800403d
 8004000:	08004029 	.word	0x08004029
 8004004:	0800403d 	.word	0x0800403d
 8004008:	0800403d 	.word	0x0800403d
 800400c:	0800403d 	.word	0x0800403d
 8004010:	08004033 	.word	0x08004033
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401a:	60fb      	str	r3, [r7, #12]

      break;
 800401c:	e00f      	b.n	800403e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004024:	60fb      	str	r3, [r7, #12]

      break;
 8004026:	e00a      	b.n	800403e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402e:	60fb      	str	r3, [r7, #12]

      break;
 8004030:	e005      	b.n	800403e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004038:	60fb      	str	r3, [r7, #12]

      break;
 800403a:	e000      	b.n	800403e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800403c:	bf00      	nop
  }

  return tmpreg;
 800403e:	68fb      	ldr	r3, [r7, #12]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a46      	ldr	r2, [pc, #280]	@ (80041c8 <TIM_Base_SetConfig+0x12c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ba:	d00f      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a43      	ldr	r2, [pc, #268]	@ (80041cc <TIM_Base_SetConfig+0x130>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00b      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a42      	ldr	r2, [pc, #264]	@ (80041d0 <TIM_Base_SetConfig+0x134>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a41      	ldr	r2, [pc, #260]	@ (80041d4 <TIM_Base_SetConfig+0x138>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a40      	ldr	r2, [pc, #256]	@ (80041d8 <TIM_Base_SetConfig+0x13c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d108      	bne.n	80040ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a35      	ldr	r2, [pc, #212]	@ (80041c8 <TIM_Base_SetConfig+0x12c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d02b      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040fc:	d027      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a32      	ldr	r2, [pc, #200]	@ (80041cc <TIM_Base_SetConfig+0x130>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d023      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a31      	ldr	r2, [pc, #196]	@ (80041d0 <TIM_Base_SetConfig+0x134>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01f      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a30      	ldr	r2, [pc, #192]	@ (80041d4 <TIM_Base_SetConfig+0x138>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01b      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a2f      	ldr	r2, [pc, #188]	@ (80041d8 <TIM_Base_SetConfig+0x13c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d017      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2e      	ldr	r2, [pc, #184]	@ (80041dc <TIM_Base_SetConfig+0x140>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2d      	ldr	r2, [pc, #180]	@ (80041e0 <TIM_Base_SetConfig+0x144>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00f      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2c      	ldr	r2, [pc, #176]	@ (80041e4 <TIM_Base_SetConfig+0x148>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00b      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2b      	ldr	r2, [pc, #172]	@ (80041e8 <TIM_Base_SetConfig+0x14c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d007      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2a      	ldr	r2, [pc, #168]	@ (80041ec <TIM_Base_SetConfig+0x150>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d003      	beq.n	800414e <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a29      	ldr	r2, [pc, #164]	@ (80041f0 <TIM_Base_SetConfig+0x154>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d108      	bne.n	8004160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a10      	ldr	r2, [pc, #64]	@ (80041c8 <TIM_Base_SetConfig+0x12c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_Base_SetConfig+0xf8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a12      	ldr	r2, [pc, #72]	@ (80041d8 <TIM_Base_SetConfig+0x13c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d103      	bne.n	800419c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d105      	bne.n	80041ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f023 0201 	bic.w	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	611a      	str	r2, [r3, #16]
  }
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40000800 	.word	0x40000800
 80041d4:	40000c00 	.word	0x40000c00
 80041d8:	40010400 	.word	0x40010400
 80041dc:	40014000 	.word	0x40014000
 80041e0:	40014400 	.word	0x40014400
 80041e4:	40014800 	.word	0x40014800
 80041e8:	40001800 	.word	0x40001800
 80041ec:	40001c00 	.word	0x40001c00
 80041f0:	40002000 	.word	0x40002000

080041f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f023 0201 	bic.w	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a28      	ldr	r2, [pc, #160]	@ (80042c0 <TIM_TI1_SetConfig+0xcc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d01b      	beq.n	800425a <TIM_TI1_SetConfig+0x66>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004228:	d017      	beq.n	800425a <TIM_TI1_SetConfig+0x66>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4a25      	ldr	r2, [pc, #148]	@ (80042c4 <TIM_TI1_SetConfig+0xd0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <TIM_TI1_SetConfig+0x66>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4a24      	ldr	r2, [pc, #144]	@ (80042c8 <TIM_TI1_SetConfig+0xd4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00f      	beq.n	800425a <TIM_TI1_SetConfig+0x66>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4a23      	ldr	r2, [pc, #140]	@ (80042cc <TIM_TI1_SetConfig+0xd8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00b      	beq.n	800425a <TIM_TI1_SetConfig+0x66>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4a22      	ldr	r2, [pc, #136]	@ (80042d0 <TIM_TI1_SetConfig+0xdc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d007      	beq.n	800425a <TIM_TI1_SetConfig+0x66>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a21      	ldr	r2, [pc, #132]	@ (80042d4 <TIM_TI1_SetConfig+0xe0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d003      	beq.n	800425a <TIM_TI1_SetConfig+0x66>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4a20      	ldr	r2, [pc, #128]	@ (80042d8 <TIM_TI1_SetConfig+0xe4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <TIM_TI1_SetConfig+0x6a>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <TIM_TI1_SetConfig+0x6c>
 800425e:	2300      	movs	r3, #0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0303 	bic.w	r3, r3, #3
 800426a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e003      	b.n	800427e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	b2db      	uxtb	r3, r3
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f023 030a 	bic.w	r3, r3, #10
 8004298:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f003 030a 	and.w	r3, r3, #10
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40010400 	.word	0x40010400
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40001800 	.word	0x40001800

080042dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f023 0201 	bic.w	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f023 030a 	bic.w	r3, r3, #10
 8004318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800433a:	b480      	push	{r7}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0210 	bic.w	r2, r3, #16
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	031b      	lsls	r3, r3, #12
 800437e:	b29b      	uxth	r3, r3
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800438c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	621a      	str	r2, [r3, #32]
}
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f023 0210 	bic.w	r2, r3, #16
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	031b      	lsls	r3, r3, #12
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	621a      	str	r2, [r3, #32]
}
 8004408:	bf00      	nop
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f023 0303 	bic.w	r3, r3, #3
 8004440:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004450:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	b2db      	uxtb	r3, r3
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004464:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	621a      	str	r2, [r3, #32]
}
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	021b      	lsls	r3, r3, #8
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	031b      	lsls	r3, r3, #12
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80044de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	031b      	lsls	r3, r3, #12
 80044e4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800451c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	f043 0307 	orr.w	r3, r3, #7
 8004528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	609a      	str	r2, [r3, #8]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	021a      	lsls	r2, r3, #8
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	431a      	orrs	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4313      	orrs	r3, r2
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	609a      	str	r2, [r3, #8]
}
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	2201      	movs	r2, #1
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1a      	ldr	r2, [r3, #32]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	43db      	mvns	r3, r3
 800459e:	401a      	ands	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	fa01 f303 	lsl.w	r3, r1, r3
 80045b4:	431a      	orrs	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045dc:	2302      	movs	r3, #2
 80045de:	e05a      	b.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a21      	ldr	r2, [pc, #132]	@ (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d022      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462c:	d01d      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1d      	ldr	r2, [pc, #116]	@ (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d018      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1b      	ldr	r2, [pc, #108]	@ (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1a      	ldr	r2, [pc, #104]	@ (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00e      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a18      	ldr	r2, [pc, #96]	@ (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d009      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a17      	ldr	r2, [pc, #92]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a15      	ldr	r2, [pc, #84]	@ (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10c      	bne.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	4313      	orrs	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40010000 	.word	0x40010000
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40000800 	.word	0x40000800
 80046b0:	40000c00 	.word	0x40000c00
 80046b4:	40010400 	.word	0x40010400
 80046b8:	40014000 	.word	0x40014000
 80046bc:	40001800 	.word	0x40001800

080046c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e042      	b.n	8004780 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fc fe68 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	@ 0x24
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800472a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f82b 	bl	8004788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800478c:	b0c0      	sub	sp, #256	@ 0x100
 800478e:	af00      	add	r7, sp, #0
 8004790:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a4:	68d9      	ldr	r1, [r3, #12]
 80047a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	ea40 0301 	orr.w	r3, r0, r1
 80047b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	431a      	orrs	r2, r3
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047e0:	f021 010c 	bic.w	r1, r1, #12
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047ee:	430b      	orrs	r3, r1
 80047f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	6999      	ldr	r1, [r3, #24]
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	ea40 0301 	orr.w	r3, r0, r1
 800480e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b8f      	ldr	r3, [pc, #572]	@ (8004a54 <UART_SetConfig+0x2cc>)
 8004818:	429a      	cmp	r2, r3
 800481a:	d005      	beq.n	8004828 <UART_SetConfig+0xa0>
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b8d      	ldr	r3, [pc, #564]	@ (8004a58 <UART_SetConfig+0x2d0>)
 8004824:	429a      	cmp	r2, r3
 8004826:	d104      	bne.n	8004832 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004828:	f7fe ff94 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 800482c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004830:	e003      	b.n	800483a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004832:	f7fe ff7b 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 8004836:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004844:	f040 810c 	bne.w	8004a60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800484c:	2200      	movs	r2, #0
 800484e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004852:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004856:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800485a:	4622      	mov	r2, r4
 800485c:	462b      	mov	r3, r5
 800485e:	1891      	adds	r1, r2, r2
 8004860:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004862:	415b      	adcs	r3, r3
 8004864:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004866:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800486a:	4621      	mov	r1, r4
 800486c:	eb12 0801 	adds.w	r8, r2, r1
 8004870:	4629      	mov	r1, r5
 8004872:	eb43 0901 	adc.w	r9, r3, r1
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800488a:	4690      	mov	r8, r2
 800488c:	4699      	mov	r9, r3
 800488e:	4623      	mov	r3, r4
 8004890:	eb18 0303 	adds.w	r3, r8, r3
 8004894:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004898:	462b      	mov	r3, r5
 800489a:	eb49 0303 	adc.w	r3, r9, r3
 800489e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048b6:	460b      	mov	r3, r1
 80048b8:	18db      	adds	r3, r3, r3
 80048ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80048bc:	4613      	mov	r3, r2
 80048be:	eb42 0303 	adc.w	r3, r2, r3
 80048c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80048c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048cc:	f7fb ff82 	bl	80007d4 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4b61      	ldr	r3, [pc, #388]	@ (8004a5c <UART_SetConfig+0x2d4>)
 80048d6:	fba3 2302 	umull	r2, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	011c      	lsls	r4, r3, #4
 80048de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	1891      	adds	r1, r2, r2
 80048f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048f8:	415b      	adcs	r3, r3
 80048fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004900:	4641      	mov	r1, r8
 8004902:	eb12 0a01 	adds.w	sl, r2, r1
 8004906:	4649      	mov	r1, r9
 8004908:	eb43 0b01 	adc.w	fp, r3, r1
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004918:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800491c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004920:	4692      	mov	sl, r2
 8004922:	469b      	mov	fp, r3
 8004924:	4643      	mov	r3, r8
 8004926:	eb1a 0303 	adds.w	r3, sl, r3
 800492a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800492e:	464b      	mov	r3, r9
 8004930:	eb4b 0303 	adc.w	r3, fp, r3
 8004934:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004944:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004948:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800494c:	460b      	mov	r3, r1
 800494e:	18db      	adds	r3, r3, r3
 8004950:	643b      	str	r3, [r7, #64]	@ 0x40
 8004952:	4613      	mov	r3, r2
 8004954:	eb42 0303 	adc.w	r3, r2, r3
 8004958:	647b      	str	r3, [r7, #68]	@ 0x44
 800495a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800495e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004962:	f7fb ff37 	bl	80007d4 <__aeabi_uldivmod>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4611      	mov	r1, r2
 800496c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <UART_SetConfig+0x2d4>)
 800496e:	fba3 2301 	umull	r2, r3, r3, r1
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2264      	movs	r2, #100	@ 0x64
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	1acb      	subs	r3, r1, r3
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004982:	4b36      	ldr	r3, [pc, #216]	@ (8004a5c <UART_SetConfig+0x2d4>)
 8004984:	fba3 2302 	umull	r2, r3, r3, r2
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004990:	441c      	add	r4, r3
 8004992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004996:	2200      	movs	r2, #0
 8004998:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800499c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049a4:	4642      	mov	r2, r8
 80049a6:	464b      	mov	r3, r9
 80049a8:	1891      	adds	r1, r2, r2
 80049aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049ac:	415b      	adcs	r3, r3
 80049ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049b4:	4641      	mov	r1, r8
 80049b6:	1851      	adds	r1, r2, r1
 80049b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80049ba:	4649      	mov	r1, r9
 80049bc:	414b      	adcs	r3, r1
 80049be:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049cc:	4659      	mov	r1, fp
 80049ce:	00cb      	lsls	r3, r1, #3
 80049d0:	4651      	mov	r1, sl
 80049d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d6:	4651      	mov	r1, sl
 80049d8:	00ca      	lsls	r2, r1, #3
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	4642      	mov	r2, r8
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049e8:	464b      	mov	r3, r9
 80049ea:	460a      	mov	r2, r1
 80049ec:	eb42 0303 	adc.w	r3, r2, r3
 80049f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a08:	460b      	mov	r3, r1
 8004a0a:	18db      	adds	r3, r3, r3
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a0e:	4613      	mov	r3, r2
 8004a10:	eb42 0303 	adc.w	r3, r2, r3
 8004a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a1e:	f7fb fed9 	bl	80007d4 <__aeabi_uldivmod>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4b0d      	ldr	r3, [pc, #52]	@ (8004a5c <UART_SetConfig+0x2d4>)
 8004a28:	fba3 1302 	umull	r1, r3, r3, r2
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	2164      	movs	r1, #100	@ 0x64
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	3332      	adds	r3, #50	@ 0x32
 8004a3a:	4a08      	ldr	r2, [pc, #32]	@ (8004a5c <UART_SetConfig+0x2d4>)
 8004a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	f003 0207 	and.w	r2, r3, #7
 8004a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4422      	add	r2, r4
 8004a4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a50:	e106      	b.n	8004c60 <UART_SetConfig+0x4d8>
 8004a52:	bf00      	nop
 8004a54:	40011000 	.word	0x40011000
 8004a58:	40011400 	.word	0x40011400
 8004a5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a64:	2200      	movs	r2, #0
 8004a66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a72:	4642      	mov	r2, r8
 8004a74:	464b      	mov	r3, r9
 8004a76:	1891      	adds	r1, r2, r2
 8004a78:	6239      	str	r1, [r7, #32]
 8004a7a:	415b      	adcs	r3, r3
 8004a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a82:	4641      	mov	r1, r8
 8004a84:	1854      	adds	r4, r2, r1
 8004a86:	4649      	mov	r1, r9
 8004a88:	eb43 0501 	adc.w	r5, r3, r1
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	00eb      	lsls	r3, r5, #3
 8004a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a9a:	00e2      	lsls	r2, r4, #3
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	461d      	mov	r5, r3
 8004aa0:	4643      	mov	r3, r8
 8004aa2:	18e3      	adds	r3, r4, r3
 8004aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004aa8:	464b      	mov	r3, r9
 8004aaa:	eb45 0303 	adc.w	r3, r5, r3
 8004aae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004abe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ace:	4629      	mov	r1, r5
 8004ad0:	008b      	lsls	r3, r1, #2
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ad8:	4621      	mov	r1, r4
 8004ada:	008a      	lsls	r2, r1, #2
 8004adc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ae0:	f7fb fe78 	bl	80007d4 <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4b60      	ldr	r3, [pc, #384]	@ (8004c6c <UART_SetConfig+0x4e4>)
 8004aea:	fba3 2302 	umull	r2, r3, r3, r2
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	011c      	lsls	r4, r3, #4
 8004af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004afc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	1891      	adds	r1, r2, r2
 8004b0a:	61b9      	str	r1, [r7, #24]
 8004b0c:	415b      	adcs	r3, r3
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b14:	4641      	mov	r1, r8
 8004b16:	1851      	adds	r1, r2, r1
 8004b18:	6139      	str	r1, [r7, #16]
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	414b      	adcs	r3, r1
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	00cb      	lsls	r3, r1, #3
 8004b30:	4651      	mov	r1, sl
 8004b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b36:	4651      	mov	r1, sl
 8004b38:	00ca      	lsls	r2, r1, #3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4642      	mov	r2, r8
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b48:	464b      	mov	r3, r9
 8004b4a:	460a      	mov	r2, r1
 8004b4c:	eb42 0303 	adc.w	r3, r2, r3
 8004b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	008b      	lsls	r3, r1, #2
 8004b70:	4641      	mov	r1, r8
 8004b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b76:	4641      	mov	r1, r8
 8004b78:	008a      	lsls	r2, r1, #2
 8004b7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b7e:	f7fb fe29 	bl	80007d4 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	4b38      	ldr	r3, [pc, #224]	@ (8004c6c <UART_SetConfig+0x4e4>)
 8004b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	2264      	movs	r2, #100	@ 0x64
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	1acb      	subs	r3, r1, r3
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	3332      	adds	r3, #50	@ 0x32
 8004b9c:	4a33      	ldr	r2, [pc, #204]	@ (8004c6c <UART_SetConfig+0x4e4>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ba8:	441c      	add	r4, r3
 8004baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bae:	2200      	movs	r2, #0
 8004bb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bb8:	4642      	mov	r2, r8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	1891      	adds	r1, r2, r2
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	415b      	adcs	r3, r3
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bc8:	4641      	mov	r1, r8
 8004bca:	1851      	adds	r1, r2, r1
 8004bcc:	6039      	str	r1, [r7, #0]
 8004bce:	4649      	mov	r1, r9
 8004bd0:	414b      	adcs	r3, r1
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004be0:	4659      	mov	r1, fp
 8004be2:	00cb      	lsls	r3, r1, #3
 8004be4:	4651      	mov	r1, sl
 8004be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bea:	4651      	mov	r1, sl
 8004bec:	00ca      	lsls	r2, r1, #3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	460a      	mov	r2, r1
 8004bfe:	eb42 0303 	adc.w	r3, r2, r3
 8004c02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	008b      	lsls	r3, r1, #2
 8004c20:	4641      	mov	r1, r8
 8004c22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c26:	4641      	mov	r1, r8
 8004c28:	008a      	lsls	r2, r1, #2
 8004c2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c2e:	f7fb fdd1 	bl	80007d4 <__aeabi_uldivmod>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4b0d      	ldr	r3, [pc, #52]	@ (8004c6c <UART_SetConfig+0x4e4>)
 8004c38:	fba3 1302 	umull	r1, r3, r3, r2
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	2164      	movs	r1, #100	@ 0x64
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	3332      	adds	r3, #50	@ 0x32
 8004c4a:	4a08      	ldr	r2, [pc, #32]	@ (8004c6c <UART_SetConfig+0x4e4>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	095b      	lsrs	r3, r3, #5
 8004c52:	f003 020f 	and.w	r2, r3, #15
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4422      	add	r2, r4
 8004c5e:	609a      	str	r2, [r3, #8]
}
 8004c60:	bf00      	nop
 8004c62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c66:	46bd      	mov	sp, r7
 8004c68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c6c:	51eb851f 	.word	0x51eb851f

08004c70 <memset>:
 8004c70:	4402      	add	r2, r0
 8004c72:	4603      	mov	r3, r0
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d100      	bne.n	8004c7a <memset+0xa>
 8004c78:	4770      	bx	lr
 8004c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7e:	e7f9      	b.n	8004c74 <memset+0x4>

08004c80 <__libc_init_array>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	4d0d      	ldr	r5, [pc, #52]	@ (8004cb8 <__libc_init_array+0x38>)
 8004c84:	4c0d      	ldr	r4, [pc, #52]	@ (8004cbc <__libc_init_array+0x3c>)
 8004c86:	1b64      	subs	r4, r4, r5
 8004c88:	10a4      	asrs	r4, r4, #2
 8004c8a:	2600      	movs	r6, #0
 8004c8c:	42a6      	cmp	r6, r4
 8004c8e:	d109      	bne.n	8004ca4 <__libc_init_array+0x24>
 8004c90:	4d0b      	ldr	r5, [pc, #44]	@ (8004cc0 <__libc_init_array+0x40>)
 8004c92:	4c0c      	ldr	r4, [pc, #48]	@ (8004cc4 <__libc_init_array+0x44>)
 8004c94:	f000 f818 	bl	8004cc8 <_init>
 8004c98:	1b64      	subs	r4, r4, r5
 8004c9a:	10a4      	asrs	r4, r4, #2
 8004c9c:	2600      	movs	r6, #0
 8004c9e:	42a6      	cmp	r6, r4
 8004ca0:	d105      	bne.n	8004cae <__libc_init_array+0x2e>
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca8:	4798      	blx	r3
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7ee      	b.n	8004c8c <__libc_init_array+0xc>
 8004cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb2:	4798      	blx	r3
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	e7f2      	b.n	8004c9e <__libc_init_array+0x1e>
 8004cb8:	08004d00 	.word	0x08004d00
 8004cbc:	08004d00 	.word	0x08004d00
 8004cc0:	08004d00 	.word	0x08004d00
 8004cc4:	08004d04 	.word	0x08004d04

08004cc8 <_init>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr

08004cd4 <_fini>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr
