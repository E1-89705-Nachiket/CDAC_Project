
HAL_CAN_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005370  08005370  00006370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800541c  0800541c  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800541c  0800541c  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005424  08005424  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005424  08005424  00006424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005428  08005428  00006428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800542c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          000002a4  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000300  20000300  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d46  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ac  00000000  00000000  00017dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00019f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb4  00000000  00000000  0001af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b60  00000000  00000000  0001bc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012003  00000000  00000000  0001e7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0345  00000000  00000000  000307a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100aec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a78  00000000  00000000  00100b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  001055a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005358 	.word	0x08005358

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005358 	.word	0x08005358

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LcdInit>:

#include "lcd.h"

extern I2C_HandleTypeDef hi2c1;

void LcdInit(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 80005b0:	2014      	movs	r0, #20
 80005b2:	f000 ff41 	bl	8001438 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 80005b6:	2103      	movs	r1, #3
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f82f 	bl	800061c <LcdWriteNibble>
	HAL_Delay(5);
 80005be:	2005      	movs	r0, #5
 80005c0:	f000 ff3a 	bl	8001438 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 80005c4:	2103      	movs	r1, #3
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 f828 	bl	800061c <LcdWriteNibble>
	HAL_Delay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 ff33 	bl	8001438 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 80005d2:	2103      	movs	r1, #3
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 f821 	bl	800061c <LcdWriteNibble>
	HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 ff2c 	bl	8001438 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x02);
 80005e0:	2102      	movs	r1, #2
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f81a 	bl	800061c <LcdWriteNibble>
	HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 ff25 	bl	8001438 <HAL_Delay>

	LcdWriteByte(LCD_CMD, LCD_FNSET_2LINE);
 80005ee:	2128      	movs	r1, #40	@ 0x28
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 f859 	bl	80006a8 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_OFF);
 80005f6:	2108      	movs	r1, #8
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 f855 	bl	80006a8 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_CLEAR);
 80005fe:	2101      	movs	r1, #1
 8000600:	2000      	movs	r0, #0
 8000602:	f000 f851 	bl	80006a8 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_ENTRYMODE);
 8000606:	2106      	movs	r1, #6
 8000608:	2000      	movs	r0, #0
 800060a:	f000 f84d 	bl	80006a8 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_ON);
 800060e:	210c      	movs	r1, #12
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f849 	bl	80006a8 <LcdWriteByte>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t data) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	71bb      	strb	r3, [r7, #6]
	uint8_t rsFlag = rs == LCD_DATA ? BV(LCD_RS_Pos) : 0;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b01      	cmp	r3, #1
 8000630:	bf0c      	ite	eq
 8000632:	2301      	moveq	r3, #1
 8000634:	2300      	movne	r3, #0
 8000636:	b2db      	uxtb	r3, r3
 8000638:	73fb      	strb	r3, [r7, #15]
	uint8_t val = (data << 4) | rsFlag | BV(LCD_BL_Pos) | BV(LCD_EN_Pos) ;
 800063a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800063e:	011b      	lsls	r3, r3, #4
 8000640:	b25a      	sxtb	r2, r3
 8000642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000646:	4313      	orrs	r3, r2
 8000648:	b25b      	sxtb	r3, r3
 800064a:	f043 030c 	orr.w	r3, r3, #12
 800064e:	b25b      	sxtb	r3, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	73bb      	strb	r3, [r7, #14]
	//I2CWrite(LCD_SLAVE_ADDR_W, val);
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDR_W, (uint8_t *)&val, sizeof(val), HAL_MAX_DELAY);
 8000654:	f107 020e 	add.w	r2, r7, #14
 8000658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	214e      	movs	r1, #78	@ 0x4e
 8000662:	4810      	ldr	r0, [pc, #64]	@ (80006a4 <LcdWriteNibble+0x88>)
 8000664:	f002 f8b0 	bl	80027c8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f000 fee5 	bl	8001438 <HAL_Delay>
	val = (data << 4) | rsFlag | BV(LCD_BL_Pos);
 800066e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	b25a      	sxtb	r2, r3
 8000676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067a:	4313      	orrs	r3, r2
 800067c:	b25b      	sxtb	r3, r3
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	b25b      	sxtb	r3, r3
 8000684:	b2db      	uxtb	r3, r3
 8000686:	73bb      	strb	r3, [r7, #14]
	//I2CWrite(LCD_SLAVE_ADDR_W, val);
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDR_W, (uint8_t *)&val, sizeof(val), HAL_MAX_DELAY);
 8000688:	f107 020e 	add.w	r2, r7, #14
 800068c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	214e      	movs	r1, #78	@ 0x4e
 8000696:	4803      	ldr	r0, [pc, #12]	@ (80006a4 <LcdWriteNibble+0x88>)
 8000698:	f002 f896 	bl	80027c8 <HAL_I2C_Master_Transmit>
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000a0 	.word	0x200000a0

080006a8 <LcdWriteByte>:

void LcdWriteByte(uint8_t rs, uint8_t data) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	460a      	mov	r2, r1
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	4613      	mov	r3, r2
 80006b6:	71bb      	strb	r3, [r7, #6]
	// divide data into two nibbles
	uint8_t high = data >> 4, low = data & 0x0F;
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	091b      	lsrs	r3, r3, #4
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	79bb      	ldrb	r3, [r7, #6]
 80006c0:	f003 030f 	and.w	r3, r3, #15
 80006c4:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(rs, high);
 80006c6:	7bfa      	ldrb	r2, [r7, #15]
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4611      	mov	r1, r2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ffa5 	bl	800061c <LcdWriteNibble>
	LcdWriteNibble(rs, low);
 80006d2:	7bba      	ldrb	r2, [r7, #14]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff9f 	bl	800061c <LcdWriteNibble>
	// wait for busy flag -- optional for low speed uc
	HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 feaa 	bl	8001438 <HAL_Delay>
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <LcdPuts>:

void LcdPuts(uint8_t line, char *str) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
	// set line start addr
	LcdWriteByte(LCD_CMD, line);
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4619      	mov	r1, r3
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff ffd3 	bl	80006a8 <LcdWriteByte>
	// write chars one by one
	for(int i=0; str[i] != '\0'; i++)
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e00a      	b.n	800071e <LcdPuts+0x32>
		LcdWriteByte(LCD_DATA, str[i]);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	4413      	add	r3, r2
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff ffc8 	bl	80006a8 <LcdWriteByte>
	for(int i=0; str[i] != '\0'; i++)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3301      	adds	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	683a      	ldr	r2, [r7, #0]
 8000722:	4413      	add	r3, r2
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1ee      	bne.n	8000708 <LcdPuts+0x1c>
}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t is_data_received;
uint16_t distance;
uint16_t speed;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800073e:	4a0a      	ldr	r2, [pc, #40]	@ (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000740:	2100      	movs	r1, #0
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f001 f8bc 	bl	80018c0 <HAL_CAN_GetRxMessage>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d106      	bne.n	800075c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		// process the message
        if (RxHeader.DLC == 5) {
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000750:	691b      	ldr	r3, [r3, #16]
 8000752:	2b05      	cmp	r3, #5
 8000754:	d102      	bne.n	800075c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
        	is_data_received = 1;
 8000756:	4b05      	ldr	r3, [pc, #20]	@ (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
        }
	}
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200001a0 	.word	0x200001a0
 8000768:	20000184 	.word	0x20000184
 800076c:	200001a8 	.word	0x200001a8

08000770 <SetMotorSpeed>:

void SetMotorSpeed(uint16_t distance)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
	speed = MIN_SPEED + ((distance - MIN_DIST) * (MAX_SPEED - MIN_SPEED) / (MAX_DIST - MIN_DIST));
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	1f5a      	subs	r2, r3, #5
 800077e:	4613      	mov	r3, r2
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4a11      	ldr	r2, [pc, #68]	@ (80007cc <SetMotorSpeed+0x5c>)
 8000788:	fb82 1203 	smull	r1, r2, r2, r3
 800078c:	441a      	add	r2, r3
 800078e:	1192      	asrs	r2, r2, #6
 8000790:	17db      	asrs	r3, r3, #31
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	b29b      	uxth	r3, r3
 8000796:	3346      	adds	r3, #70	@ 0x46
 8000798:	b29a      	uxth	r2, r3
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <SetMotorSpeed+0x60>)
 800079c:	801a      	strh	r2, [r3, #0]
	//speed = ((distance - MIN_DIST)/(MAX_DIST - MIN_DIST)) * 100;
	if(speed > MAX_SPEED)
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <SetMotorSpeed+0x60>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	2b64      	cmp	r3, #100	@ 0x64
 80007a4:	d902      	bls.n	80007ac <SetMotorSpeed+0x3c>
	    speed = MAX_SPEED;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <SetMotorSpeed+0x60>)
 80007a8:	2264      	movs	r2, #100	@ 0x64
 80007aa:	801a      	strh	r2, [r3, #0]
	//uint16_t pulsewidth  = (htim1.Init.Period + 1) * speed / 100;
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
	htim1.Instance->CCR1 = speed;
 80007ac:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <SetMotorSpeed+0x60>)
 80007ae:	881a      	ldrh	r2, [r3, #0]
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <SetMotorSpeed+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
	MotorStart(FORWARD);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 f80e 	bl	80007d8 <MotorStart>
	HAL_Delay(3000);
 80007bc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80007c0:	f000 fe3a 	bl	8001438 <HAL_Delay>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	ac769185 	.word	0xac769185
 80007d0:	200001ac 	.word	0x200001ac
 80007d4:	200000f4 	.word	0x200000f4

080007d8 <MotorStart>:

void MotorStart(uint16_t direction)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
	if(direction == FORWARD)
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d10c      	bne.n	8000802 <MotorStart+0x2a>
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ee:	480e      	ldr	r0, [pc, #56]	@ (8000828 <MotorStart+0x50>)
 80007f0:	f001 fe8c 	bl	800250c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007fa:	480b      	ldr	r0, [pc, #44]	@ (8000828 <MotorStart+0x50>)
 80007fc:	f001 fe86 	bl	800250c <HAL_GPIO_WritePin>
	else if(direction == BACKWARD)
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8000800:	e00e      	b.n	8000820 <MotorStart+0x48>
	else if(direction == BACKWARD)
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d10b      	bne.n	8000820 <MotorStart+0x48>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800080e:	4806      	ldr	r0, [pc, #24]	@ (8000828 <MotorStart+0x50>)
 8000810:	f001 fe7c 	bl	800250c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <MotorStart+0x50>)
 800081c:	f001 fe76 	bl	800250c <HAL_GPIO_WritePin>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000

0800082c <MotorStop>:

void MotorStop(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MotorStop+0x20>)
 8000838:	f001 fe68 	bl	800250c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000842:	4802      	ldr	r0, [pc, #8]	@ (800084c <MotorStop+0x20>)
 8000844:	f001 fe62 	bl	800250c <HAL_GPIO_WritePin>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b5b0      	push	{r4, r5, r7, lr}
 8000852:	b098      	sub	sp, #96	@ 0x60
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 char str[64];
	 char *str2 = "This is UART\r\n";
 8000856:	4b93      	ldr	r3, [pc, #588]	@ (8000aa4 <main+0x254>)
 8000858:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f000 fd7b 	bl	8001354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f943 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f000 fadb 	bl	8000e1c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000866:	f000 f9a9 	bl	8000bbc <MX_CAN1_Init>
  MX_TIM1_Init();
 800086a:	f000 fa2b 	bl	8000cc4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800086e:	f000 faab 	bl	8000dc8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000872:	f000 f9f9 	bl	8000c68 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000876:	488c      	ldr	r0, [pc, #560]	@ (8000aa8 <main+0x258>)
 8000878:	f000 ffde 	bl	8001838 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800087c:	2102      	movs	r1, #2
 800087e:	488a      	ldr	r0, [pc, #552]	@ (8000aa8 <main+0x258>)
 8000880:	f001 f940 	bl	8001b04 <HAL_CAN_ActivateNotification>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000884:	2100      	movs	r1, #0
 8000886:	4889      	ldr	r0, [pc, #548]	@ (8000aac <main+0x25c>)
 8000888:	f002 ffe0 	bl	800384c <HAL_TIM_PWM_Start>
  HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 800088c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800088e:	f7ff fc9f 	bl	80001d0 <strlen>
 8000892:	4603      	mov	r3, r0
 8000894:	b29a      	uxth	r2, r3
 8000896:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800089a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800089c:	4884      	ldr	r0, [pc, #528]	@ (8000ab0 <main+0x260>)
 800089e:	f003 fcff 	bl	80042a0 <HAL_UART_Transmit>
  LcdInit();
 80008a2:	f7ff fe83 	bl	80005ac <LcdInit>
  HAL_Delay(100);
 80008a6:	2064      	movs	r0, #100	@ 0x64
 80008a8:	f000 fdc6 	bl	8001438 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if(is_data_received == 1)
 80008ac:	4b81      	ldr	r3, [pc, #516]	@ (8000ab4 <main+0x264>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	f040 80f3 	bne.w	8000a9c <main+0x24c>
	 {
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008bc:	487e      	ldr	r0, [pc, #504]	@ (8000ab8 <main+0x268>)
 80008be:	f001 fe25 	bl	800250c <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008c8:	487b      	ldr	r0, [pc, #492]	@ (8000ab8 <main+0x268>)
 80008ca:	f001 fe1f 	bl	800250c <HAL_GPIO_WritePin>
          distance = (uint16_t)RxData[0] << 8 | (uint16_t)RxData[1];
 80008ce:	4b7b      	ldr	r3, [pc, #492]	@ (8000abc <main+0x26c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	4b78      	ldr	r3, [pc, #480]	@ (8000abc <main+0x26c>)
 80008da:	785b      	ldrb	r3, [r3, #1]
 80008dc:	b21b      	sxth	r3, r3
 80008de:	4313      	orrs	r3, r2
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b76      	ldr	r3, [pc, #472]	@ (8000ac0 <main+0x270>)
 80008e6:	801a      	strh	r2, [r3, #0]



          sprintf(str, "Distance : %d cm \r\n", distance);
 80008e8:	4b75      	ldr	r3, [pc, #468]	@ (8000ac0 <main+0x270>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	463b      	mov	r3, r7
 80008f0:	4974      	ldr	r1, [pc, #464]	@ (8000ac4 <main+0x274>)
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 f890 	bl	8004a18 <siprintf>
      	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80008f8:	463b      	mov	r3, r7
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fc68 	bl	80001d0 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	b29a      	uxth	r2, r3
 8000904:	4639      	mov	r1, r7
 8000906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800090a:	4869      	ldr	r0, [pc, #420]	@ (8000ab0 <main+0x260>)
 800090c:	f003 fcc8 	bl	80042a0 <HAL_UART_Transmit>
      	  LcdPuts(LCD_LINE1, str);
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	2080      	movs	r0, #128	@ 0x80
 8000916:	f7ff fee9 	bl	80006ec <LcdPuts>
      	  uint16_t adc_value= (uint16_t)RxData[4] << 8 | (uint16_t)RxData[3];
 800091a:	4b68      	ldr	r3, [pc, #416]	@ (8000abc <main+0x26c>)
 800091c:	791b      	ldrb	r3, [r3, #4]
 800091e:	b21b      	sxth	r3, r3
 8000920:	021b      	lsls	r3, r3, #8
 8000922:	b21a      	sxth	r2, r3
 8000924:	4b65      	ldr	r3, [pc, #404]	@ (8000abc <main+0x26c>)
 8000926:	78db      	ldrb	r3, [r3, #3]
 8000928:	b21b      	sxth	r3, r3
 800092a:	4313      	orrs	r3, r2
 800092c:	b21b      	sxth	r3, r3
 800092e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
      	                   float voltage = (adc_value * 3.3f) / 4095.0f;
 8000932:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000936:	ee07 3a90 	vmov	s15, r3
 800093a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800093e:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8000ac8 <main+0x278>
 8000942:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000946:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8000acc <main+0x27c>
 800094a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800094e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      	                   float temperature = voltage / 0.01f;
 8000952:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000956:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8000ad0 <main+0x280>
 800095a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800095e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
      	                   int temp_int = (int)(temperature * 100);  // e.g., 26.52°C → 2652
 8000962:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000966:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8000ad4 <main+0x284>
 800096a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800096e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000972:	ee17 3a90 	vmov	r3, s15
 8000976:	64fb      	str	r3, [r7, #76]	@ 0x4c
      	                   int whole = temp_int / 100;        // 26
 8000978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800097a:	4a57      	ldr	r2, [pc, #348]	@ (8000ad8 <main+0x288>)
 800097c:	fb82 1203 	smull	r1, r2, r2, r3
 8000980:	1152      	asrs	r2, r2, #5
 8000982:	17db      	asrs	r3, r3, #31
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	64bb      	str	r3, [r7, #72]	@ 0x48
      	                   int frac = temp_int % 100;
 8000988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800098a:	4a53      	ldr	r2, [pc, #332]	@ (8000ad8 <main+0x288>)
 800098c:	fb82 1203 	smull	r1, r2, r2, r3
 8000990:	1151      	asrs	r1, r2, #5
 8000992:	17da      	asrs	r2, r3, #31
 8000994:	1a8a      	subs	r2, r1, r2
 8000996:	2164      	movs	r1, #100	@ 0x64
 8000998:	fb01 f202 	mul.w	r2, r1, r2
 800099c:	1a9b      	subs	r3, r3, r2
 800099e:	647b      	str	r3, [r7, #68]	@ 0x44
      	                   sprintf(str, "tempreture : %d  \r\n",whole);
 80009a0:	463b      	mov	r3, r7
 80009a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80009a4:	494d      	ldr	r1, [pc, #308]	@ (8000adc <main+0x28c>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f004 f836 	bl	8004a18 <siprintf>

      	                   HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80009ac:	463b      	mov	r3, r7
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fc0e 	bl	80001d0 <strlen>
 80009b4:	4603      	mov	r3, r0
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4639      	mov	r1, r7
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009be:	483c      	ldr	r0, [pc, #240]	@ (8000ab0 <main+0x260>)
 80009c0:	f003 fc6e 	bl	80042a0 <HAL_UART_Transmit>

      	                   uint8_t rain =RxData[4];
 80009c4:	4b3d      	ldr	r3, [pc, #244]	@ (8000abc <main+0x26c>)
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

      	                   if(rain==0)
 80009cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d118      	bne.n	8000a06 <main+0x1b6>
      	                   {	  strcpy(str,"whether is rainy\r\n");
 80009d4:	463b      	mov	r3, r7
 80009d6:	4a42      	ldr	r2, [pc, #264]	@ (8000ae0 <main+0x290>)
 80009d8:	461c      	mov	r4, r3
 80009da:	4615      	mov	r5, r2
 80009dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e0:	682b      	ldr	r3, [r5, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	8022      	strh	r2, [r4, #0]
 80009e6:	3402      	adds	r4, #2
 80009e8:	0c1b      	lsrs	r3, r3, #16
 80009ea:	7023      	strb	r3, [r4, #0]
      	                   HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80009ec:	463b      	mov	r3, r7
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fbee 	bl	80001d0 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	4639      	mov	r1, r7
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009fe:	482c      	ldr	r0, [pc, #176]	@ (8000ab0 <main+0x260>)
 8000a00:	f003 fc4e 	bl	80042a0 <HAL_UART_Transmit>
 8000a04:	e017      	b.n	8000a36 <main+0x1e6>
      	                   }
      	                   else
      	                   {	  strcpy(str,"whether is clean\r\n");
 8000a06:	463b      	mov	r3, r7
 8000a08:	4a36      	ldr	r2, [pc, #216]	@ (8000ae4 <main+0x294>)
 8000a0a:	461c      	mov	r4, r3
 8000a0c:	4615      	mov	r5, r2
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	682b      	ldr	r3, [r5, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	8022      	strh	r2, [r4, #0]
 8000a18:	3402      	adds	r4, #2
 8000a1a:	0c1b      	lsrs	r3, r3, #16
 8000a1c:	7023      	strb	r3, [r4, #0]
      	                             HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fbd5 	bl	80001d0 <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4639      	mov	r1, r7
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a30:	481f      	ldr	r0, [pc, #124]	@ (8000ab0 <main+0x260>)
 8000a32:	f003 fc35 	bl	80042a0 <HAL_UART_Transmit>
      	                             }
          if(distance > 100)
 8000a36:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <main+0x270>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	2b64      	cmp	r3, #100	@ 0x64
 8000a3c:	d908      	bls.n	8000a50 <main+0x200>
          {
        	  distance = 100;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <main+0x270>)
 8000a40:	2264      	movs	r2, #100	@ 0x64
 8000a42:	801a      	strh	r2, [r3, #0]
        	  SetMotorSpeed(distance);
 8000a44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <main+0x270>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fe91 	bl	8000770 <SetMotorSpeed>
 8000a4e:	e01b      	b.n	8000a88 <main+0x238>
          }
          else if(distance <= 100 && distance > 5)
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <main+0x270>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	2b64      	cmp	r3, #100	@ 0x64
 8000a56:	d809      	bhi.n	8000a6c <main+0x21c>
 8000a58:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <main+0x270>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	2b05      	cmp	r3, #5
 8000a5e:	d905      	bls.n	8000a6c <main+0x21c>
          {
        	  SetMotorSpeed(distance);
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <main+0x270>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe83 	bl	8000770 <SetMotorSpeed>
 8000a6a:	e00d      	b.n	8000a88 <main+0x238>
          }
          else
          {
        	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a72:	4811      	ldr	r0, [pc, #68]	@ (8000ab8 <main+0x268>)
 8000a74:	f001 fd4a 	bl	800250c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a7e:	480e      	ldr	r0, [pc, #56]	@ (8000ab8 <main+0x268>)
 8000a80:	f001 fd44 	bl	800250c <HAL_GPIO_WritePin>
        	  MotorStop();
 8000a84:	f7ff fed2 	bl	800082c <MotorStop>
          }
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a8e:	480a      	ldr	r0, [pc, #40]	@ (8000ab8 <main+0x268>)
 8000a90:	f001 fd3c 	bl	800250c <HAL_GPIO_WritePin>


          HAL_Delay(1000);
 8000a94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a98:	f000 fcce 	bl	8001438 <HAL_Delay>
	 }
	 is_data_received = 0;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <main+0x264>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
	 if(is_data_received == 1)
 8000aa2:	e703      	b.n	80008ac <main+0x5c>
 8000aa4:	08005370 	.word	0x08005370
 8000aa8:	20000078 	.word	0x20000078
 8000aac:	200000f4 	.word	0x200000f4
 8000ab0:	2000013c 	.word	0x2000013c
 8000ab4:	200001a8 	.word	0x200001a8
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	200001a0 	.word	0x200001a0
 8000ac0:	200001aa 	.word	0x200001aa
 8000ac4:	08005380 	.word	0x08005380
 8000ac8:	40533333 	.word	0x40533333
 8000acc:	457ff000 	.word	0x457ff000
 8000ad0:	3c23d70a 	.word	0x3c23d70a
 8000ad4:	42c80000 	.word	0x42c80000
 8000ad8:	51eb851f 	.word	0x51eb851f
 8000adc:	08005394 	.word	0x08005394
 8000ae0:	080053a8 	.word	0x080053a8
 8000ae4:	080053bc 	.word	0x080053bc

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	@ 0x50
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	2230      	movs	r2, #48	@ 0x30
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 ffb0 	bl	8004a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	4b28      	ldr	r3, [pc, #160]	@ (8000bb4 <SystemClock_Config+0xcc>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	4a27      	ldr	r2, [pc, #156]	@ (8000bb4 <SystemClock_Config+0xcc>)
 8000b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1c:	4b25      	ldr	r3, [pc, #148]	@ (8000bb4 <SystemClock_Config+0xcc>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	4b22      	ldr	r3, [pc, #136]	@ (8000bb8 <SystemClock_Config+0xd0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a21      	ldr	r2, [pc, #132]	@ (8000bb8 <SystemClock_Config+0xd0>)
 8000b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <SystemClock_Config+0xd0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b5c:	2348      	movs	r3, #72	@ 0x48
 8000b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b64:	2307      	movs	r3, #7
 8000b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	f107 0320 	add.w	r3, r7, #32
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 f985 	bl	8002e7c <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b78:	f000 f9d6 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b80:	2302      	movs	r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2102      	movs	r1, #2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 fbe6 	bl	800336c <HAL_RCC_ClockConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ba6:	f000 f9bf 	bl	8000f28 <Error_Handler>
  }
}
 8000baa:	bf00      	nop
 8000bac:	3750      	adds	r7, #80	@ 0x50
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40007000 	.word	0x40007000

08000bbc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bc2:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000bc4:	4a27      	ldr	r2, [pc, #156]	@ (8000c64 <MX_CAN1_Init+0xa8>)
 8000bc6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000bc8:	4b25      	ldr	r3, [pc, #148]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000bca:	2212      	movs	r2, #18
 8000bcc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bce:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bd4:	4b22      	ldr	r3, [pc, #136]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000bda:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000bdc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000be0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c00:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c06:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c0c:	4814      	ldr	r0, [pc, #80]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000c0e:	f000 fc37 	bl	8001480 <HAL_CAN_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000c18:	f000 f986 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef FilterConfig;
  //FilterConfig.SlaveStartFilterBank = 9; // CAN1-0 to 8, CAN2-9 to 27
  FilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	623b      	str	r3, [r7, #32]
  FilterConfig.FilterBank = 0; // Use any Filter from 0 to 8
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // Use a 32-bit filter
 8000c24:	2301      	movs	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  FilterConfig.FilterMaskIdHigh = 0xFF00;
 8000c2c:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000c30:	60bb      	str	r3, [r7, #8]
  FilterConfig.FilterMaskIdLow = 0x0000;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  FilterConfig.FilterIdHigh = 0x1500;
 8000c36:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8000c3a:	603b      	str	r3, [r7, #0]
  FilterConfig.FilterIdLow = 0x0000;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
  FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]

  if(HAL_CAN_ConfigFilter(&hcan1, &FilterConfig) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_CAN1_Init+0xa4>)
 8000c4a:	f000 fd15 	bl	8001678 <HAL_CAN_ConfigFilter>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_CAN1_Init+0x9c>
	  Error_Handler();
 8000c54:	f000 f968 	bl	8000f28 <Error_Handler>
  /* USER CODE END CAN1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	@ 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000078 	.word	0x20000078
 8000c64:	40006400 	.word	0x40006400

08000c68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c6e:	4a13      	ldr	r2, [pc, #76]	@ (8000cbc <MX_I2C1_Init+0x54>)
 8000c70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c74:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <MX_I2C1_Init+0x58>)
 8000c76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c98:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca4:	4804      	ldr	r0, [pc, #16]	@ (8000cb8 <MX_I2C1_Init+0x50>)
 8000ca6:	f001 fc4b 	bl	8002540 <HAL_I2C_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cb0:	f000 f93a 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200000a0 	.word	0x200000a0
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	000186a0 	.word	0x000186a0

08000cc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b092      	sub	sp, #72	@ 0x48
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2220      	movs	r2, #32
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f003 feb4 	bl	8004a5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cf4:	4b32      	ldr	r3, [pc, #200]	@ (8000dc0 <MX_TIM1_Init+0xfc>)
 8000cf6:	4a33      	ldr	r2, [pc, #204]	@ (8000dc4 <MX_TIM1_Init+0x100>)
 8000cf8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000cfa:	4b31      	ldr	r3, [pc, #196]	@ (8000dc0 <MX_TIM1_Init+0xfc>)
 8000cfc:	220f      	movs	r2, #15
 8000cfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d00:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc0 <MX_TIM1_Init+0xfc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000d06:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc0 <MX_TIM1_Init+0xfc>)
 8000d08:	2263      	movs	r2, #99	@ 0x63
 8000d0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc0 <MX_TIM1_Init+0xfc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d12:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc0 <MX_TIM1_Init+0xfc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d18:	4b29      	ldr	r3, [pc, #164]	@ (8000dc0 <MX_TIM1_Init+0xfc>)
 8000d1a:	2280      	movs	r2, #128	@ 0x80
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d1e:	4828      	ldr	r0, [pc, #160]	@ (8000dc0 <MX_TIM1_Init+0xfc>)
 8000d20:	f002 fd44 	bl	80037ac <HAL_TIM_PWM_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000d2a:	f000 f8fd 	bl	8000f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d36:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4820      	ldr	r0, [pc, #128]	@ (8000dc0 <MX_TIM1_Init+0xfc>)
 8000d3e:	f003 f991 	bl	8004064 <HAL_TIMEx_MasterConfigSynchronization>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000d48:	f000 f8ee 	bl	8000f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4c:	2360      	movs	r3, #96	@ 0x60
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4813      	ldr	r0, [pc, #76]	@ (8000dc0 <MX_TIM1_Init+0xfc>)
 8000d72:	f002 fe33 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000d7c:	f000 f8d4 	bl	8000f28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4807      	ldr	r0, [pc, #28]	@ (8000dc0 <MX_TIM1_Init+0xfc>)
 8000da4:	f003 f9da 	bl	800415c <HAL_TIMEx_ConfigBreakDeadTime>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000dae:	f000 f8bb 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000db2:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <MX_TIM1_Init+0xfc>)
 8000db4:	f000 f9a0 	bl	80010f8 <HAL_TIM_MspPostInit>

}
 8000db8:	bf00      	nop
 8000dba:	3748      	adds	r7, #72	@ 0x48
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200000f4 	.word	0x200000f4
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <MX_USART2_UART_Init+0x50>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000e00:	f003 f9fe 	bl	8004200 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e0a:	f000 f88d 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000013c 	.word	0x2000013c
 8000e18:	40004400 	.word	0x40004400

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b39      	ldr	r3, [pc, #228]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a38      	ldr	r2, [pc, #224]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000e3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b36      	ldr	r3, [pc, #216]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b32      	ldr	r3, [pc, #200]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a31      	ldr	r2, [pc, #196]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a2a      	ldr	r2, [pc, #168]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b28      	ldr	r3, [pc, #160]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a23      	ldr	r2, [pc, #140]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_GPIO_Init+0x100>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000ec4:	4816      	ldr	r0, [pc, #88]	@ (8000f20 <MX_GPIO_Init+0x104>)
 8000ec6:	f001 fb21 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000ed0:	4814      	ldr	r0, [pc, #80]	@ (8000f24 <MX_GPIO_Init+0x108>)
 8000ed2:	f001 fb1b 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ed6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <MX_GPIO_Init+0x104>)
 8000ef0:	f001 f970 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000ef4:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_GPIO_Init+0x108>)
 8000f0e:	f001 f961 	bl	80021d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	@ 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40020c00 	.word	0x40020c00

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <Error_Handler+0x8>

08000f34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <HAL_MspInit+0x4c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f42:	4a0f      	ldr	r2, [pc, #60]	@ (8000f80 <HAL_MspInit+0x4c>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <HAL_MspInit+0x4c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <HAL_MspInit+0x4c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <HAL_MspInit+0x4c>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f72:	2007      	movs	r0, #7
 8000f74:	f001 f8ec 	bl	8002150 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800

08000f84 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8001018 <HAL_CAN_MspInit+0x94>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d134      	bne.n	8001010 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <HAL_CAN_MspInit+0x98>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <HAL_CAN_MspInit+0x98>)
 8000fb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_CAN_MspInit+0x98>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_CAN_MspInit+0x98>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a14      	ldr	r2, [pc, #80]	@ (800101c <HAL_CAN_MspInit+0x98>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_CAN_MspInit+0x98>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ff0:	2309      	movs	r3, #9
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4809      	ldr	r0, [pc, #36]	@ (8001020 <HAL_CAN_MspInit+0x9c>)
 8000ffc:	f001 f8ea 	bl	80021d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2014      	movs	r0, #20
 8001006:	f001 f8ae 	bl	8002166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800100a:	2014      	movs	r0, #20
 800100c:	f001 f8c7 	bl	800219e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	@ 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40006400 	.word	0x40006400
 800101c:	40023800 	.word	0x40023800
 8001020:	40020400 	.word	0x40020400

08001024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a19      	ldr	r2, [pc, #100]	@ (80010a8 <HAL_I2C_MspInit+0x84>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d12b      	bne.n	800109e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <HAL_I2C_MspInit+0x88>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <HAL_I2C_MspInit+0x88>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <HAL_I2C_MspInit+0x88>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001062:	23c0      	movs	r3, #192	@ 0xc0
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001066:	2312      	movs	r3, #18
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001072:	2304      	movs	r3, #4
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <HAL_I2C_MspInit+0x8c>)
 800107e:	f001 f8a9 	bl	80021d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <HAL_I2C_MspInit+0x88>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <HAL_I2C_MspInit+0x88>)
 800108c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001090:	6413      	str	r3, [r2, #64]	@ 0x40
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_I2C_MspInit+0x88>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	@ 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40005400 	.word	0x40005400
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020400 	.word	0x40020400

080010b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0b      	ldr	r2, [pc, #44]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10d      	bne.n	80010e2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <HAL_TIM_PWM_MspInit+0x40>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <HAL_TIM_PWM_MspInit+0x40>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d6:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <HAL_TIM_PWM_MspInit+0x40>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40010000 	.word	0x40010000
 80010f4:	40023800 	.word	0x40023800

080010f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <HAL_TIM_MspPostInit+0x68>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d11e      	bne.n	8001158 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <HAL_TIM_MspPostInit+0x6c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a10      	ldr	r2, [pc, #64]	@ (8001164 <HAL_TIM_MspPostInit+0x6c>)
 8001124:	f043 0310 	orr.w	r3, r3, #16
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <HAL_TIM_MspPostInit+0x6c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800113a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4619      	mov	r1, r3
 8001152:	4805      	ldr	r0, [pc, #20]	@ (8001168 <HAL_TIM_MspPostInit+0x70>)
 8001154:	f001 f83e 	bl	80021d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40010000 	.word	0x40010000
 8001164:	40023800 	.word	0x40023800
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a19      	ldr	r2, [pc, #100]	@ (80011f0 <HAL_UART_MspInit+0x84>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12b      	bne.n	80011e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <HAL_UART_MspInit+0x88>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <HAL_UART_MspInit+0x88>)
 8001198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119c:	6413      	str	r3, [r2, #64]	@ 0x40
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <HAL_UART_MspInit+0x88>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HAL_UART_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a10      	ldr	r2, [pc, #64]	@ (80011f4 <HAL_UART_MspInit+0x88>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_UART_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011c6:	230c      	movs	r3, #12
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d6:	2307      	movs	r3, #7
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <HAL_UART_MspInit+0x8c>)
 80011e2:	f000 fff7 	bl	80021d4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	@ 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40004400 	.word	0x40004400
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <NMI_Handler+0x4>

08001204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <MemManage_Handler+0x4>

08001214 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <UsageFault_Handler+0x4>

08001224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001252:	f000 f8d1 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001260:	4802      	ldr	r0, [pc, #8]	@ (800126c <CAN1_RX0_IRQHandler+0x10>)
 8001262:	f000 fc75 	bl	8001b50 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000078 	.word	0x20000078

08001270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001278:	4a14      	ldr	r2, [pc, #80]	@ (80012cc <_sbrk+0x5c>)
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <_sbrk+0x60>)
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <_sbrk+0x64>)
 800128e:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <_sbrk+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	429a      	cmp	r2, r3
 800129e:	d207      	bcs.n	80012b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a0:	f003 fbe4 	bl	8004a6c <__errno>
 80012a4:	4603      	mov	r3, r0
 80012a6:	220c      	movs	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ae:	e009      	b.n	80012c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b6:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	4a05      	ldr	r2, [pc, #20]	@ (80012d4 <_sbrk+0x64>)
 80012c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20020000 	.word	0x20020000
 80012d0:	00000400 	.word	0x00000400
 80012d4:	200001b0 	.word	0x200001b0
 80012d8:	20000300 	.word	0x20000300

080012dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <SystemInit+0x20>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e6:	4a05      	ldr	r2, [pc, #20]	@ (80012fc <SystemInit+0x20>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001338 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001304:	f7ff ffea 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	@ (800133c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	@ (8001340 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	@ (800134c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f003 fba3 	bl	8004a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001332:	f7ff fa8d 	bl	8000850 <main>
  bx  lr    
 8001336:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001344:	0800542c 	.word	0x0800542c
  ldr r2, =_sbss
 8001348:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800134c:	20000300 	.word	0x20000300

08001350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC_IRQHandler>
	...

08001354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <HAL_Init+0x40>)
 800135e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001362:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <HAL_Init+0x40>)
 800136a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800136e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a07      	ldr	r2, [pc, #28]	@ (8001394 <HAL_Init+0x40>)
 8001376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 fee7 	bl	8002150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001382:	2000      	movs	r0, #0
 8001384:	f000 f808 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001388:	f7ff fdd4 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023c00 	.word	0x40023c00

08001398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <HAL_InitTick+0x54>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <HAL_InitTick+0x58>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 feff 	bl	80021ba <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d80a      	bhi.n	80013e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013d4:	f000 fec7 	bl	8002166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d8:	4a06      	ldr	r2, [pc, #24]	@ (80013f4 <HAL_InitTick+0x5c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000008 	.word	0x20000008
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_IncTick+0x20>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_IncTick+0x24>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a04      	ldr	r2, [pc, #16]	@ (800141c <HAL_IncTick+0x24>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000008 	.word	0x20000008
 800141c:	200001b4 	.word	0x200001b4

08001420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b03      	ldr	r3, [pc, #12]	@ (8001434 <HAL_GetTick+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	200001b4 	.word	0x200001b4

08001438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001440:	f7ff ffee 	bl	8001420 <HAL_GetTick>
 8001444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001450:	d005      	beq.n	800145e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_Delay+0x44>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800145e:	bf00      	nop
 8001460:	f7ff ffde 	bl	8001420 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	429a      	cmp	r2, r3
 800146e:	d8f7      	bhi.n	8001460 <HAL_Delay+0x28>
  {
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008

08001480 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0ed      	b.n	800166e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fd70 	bl	8000f84 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b4:	f7ff ffb4 	bl	8001420 <HAL_GetTick>
 80014b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ba:	e012      	b.n	80014e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014bc:	f7ff ffb0 	bl	8001420 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b0a      	cmp	r3, #10
 80014c8:	d90b      	bls.n	80014e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2205      	movs	r2, #5
 80014da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e0c5      	b.n	800166e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0e5      	beq.n	80014bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0202 	bic.w	r2, r2, #2
 80014fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001500:	f7ff ff8e 	bl	8001420 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001506:	e012      	b.n	800152e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001508:	f7ff ff8a 	bl	8001420 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d90b      	bls.n	800152e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2205      	movs	r2, #5
 8001526:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e09f      	b.n	800166e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1e5      	bne.n	8001508 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e1b      	ldrb	r3, [r3, #24]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d108      	bne.n	8001556 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e007      	b.n	8001566 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7e5b      	ldrb	r3, [r3, #25]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e007      	b.n	8001590 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800158e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7e9b      	ldrb	r3, [r3, #26]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d108      	bne.n	80015aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0220 	orr.w	r2, r2, #32
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e007      	b.n	80015ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0220 	bic.w	r2, r2, #32
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7edb      	ldrb	r3, [r3, #27]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d108      	bne.n	80015d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0210 	bic.w	r2, r2, #16
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e007      	b.n	80015e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0210 	orr.w	r2, r2, #16
 80015e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7f1b      	ldrb	r3, [r3, #28]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0208 	orr.w	r2, r2, #8
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e007      	b.n	800160e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0208 	bic.w	r2, r2, #8
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7f5b      	ldrb	r3, [r3, #29]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0204 	orr.w	r2, r2, #4
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e007      	b.n	8001638 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0204 	bic.w	r2, r2, #4
 8001636:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	ea42 0103 	orr.w	r1, r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	1e5a      	subs	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001690:	7cfb      	ldrb	r3, [r7, #19]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d003      	beq.n	800169e <HAL_CAN_ConfigFilter+0x26>
 8001696:	7cfb      	ldrb	r3, [r7, #19]
 8001698:	2b02      	cmp	r3, #2
 800169a:	f040 80be 	bne.w	800181a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800169e:	4b65      	ldr	r3, [pc, #404]	@ (8001834 <HAL_CAN_ConfigFilter+0x1bc>)
 80016a0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016a8:	f043 0201 	orr.w	r2, r3, #1
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016b8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	431a      	orrs	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	2201      	movs	r2, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	401a      	ands	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d123      	bne.n	8001748 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001722:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3248      	adds	r2, #72	@ 0x48
 8001728:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800173c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800173e:	6979      	ldr	r1, [r7, #20]
 8001740:	3348      	adds	r3, #72	@ 0x48
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d122      	bne.n	8001796 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	431a      	orrs	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001770:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3248      	adds	r2, #72	@ 0x48
 8001776:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800178a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800178c:	6979      	ldr	r1, [r7, #20]
 800178e:	3348      	adds	r3, #72	@ 0x48
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	401a      	ands	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80017b0:	e007      	b.n	80017c2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	431a      	orrs	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	401a      	ands	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80017dc:	e007      	b.n	80017ee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d107      	bne.n	8001806 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	431a      	orrs	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800180c:	f023 0201 	bic.w	r2, r3, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e006      	b.n	8001828 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
  }
}
 8001828:	4618      	mov	r0, r3
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	40006400 	.word	0x40006400

08001838 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b01      	cmp	r3, #1
 800184a:	d12e      	bne.n	80018aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0201 	bic.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001864:	f7ff fddc 	bl	8001420 <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800186a:	e012      	b.n	8001892 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800186c:	f7ff fdd8 	bl	8001420 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b0a      	cmp	r3, #10
 8001878:	d90b      	bls.n	8001892 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2205      	movs	r2, #5
 800188a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e012      	b.n	80018b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1e5      	bne.n	800186c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e006      	b.n	80018b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
  }
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d003      	beq.n	80018e4 <HAL_CAN_GetRxMessage+0x24>
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	f040 8103 	bne.w	8001aea <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10e      	bne.n	8001908 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d116      	bne.n	8001926 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0f7      	b.n	8001af8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0e8      	b.n	8001af8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	331b      	adds	r3, #27
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4413      	add	r3, r2
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0204 	and.w	r2, r3, #4
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10c      	bne.n	800195e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	331b      	adds	r3, #27
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4413      	add	r3, r2
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0d5b      	lsrs	r3, r3, #21
 8001954:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e00b      	b.n	8001976 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	331b      	adds	r3, #27
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4413      	add	r3, r2
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	08db      	lsrs	r3, r3, #3
 800196e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	331b      	adds	r3, #27
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	4413      	add	r3, r2
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0202 	and.w	r2, r3, #2
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	331b      	adds	r3, #27
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
 8001998:	3304      	adds	r3, #4
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2208      	movs	r2, #8
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	e00b      	b.n	80019c4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	331b      	adds	r3, #27
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4413      	add	r3, r2
 80019b8:	3304      	adds	r3, #4
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 020f 	and.w	r2, r3, #15
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	331b      	adds	r3, #27
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4413      	add	r3, r2
 80019d0:	3304      	adds	r3, #4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	331b      	adds	r3, #27
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	4413      	add	r3, r2
 80019e8:	3304      	adds	r3, #4
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0a1a      	lsrs	r2, r3, #8
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0c1a      	lsrs	r2, r3, #16
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	3302      	adds	r3, #2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	0e1a      	lsrs	r2, r3, #24
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	3303      	adds	r3, #3
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0a1a      	lsrs	r2, r3, #8
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	3305      	adds	r3, #5
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0c1a      	lsrs	r2, r3, #16
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	3306      	adds	r3, #6
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0e1a      	lsrs	r2, r3, #24
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	3307      	adds	r3, #7
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d108      	bne.n	8001ad6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0220 	orr.w	r2, r2, #32
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	e007      	b.n	8001ae6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e006      	b.n	8001af8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
  }
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b14:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d002      	beq.n	8001b22 <HAL_CAN_ActivateNotification+0x1e>
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d109      	bne.n	8001b36 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6959      	ldr	r1, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e006      	b.n	8001b44 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
  }
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	@ 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d07c      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d023      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f983 	bl	8001ebe <HAL_CAN_TxMailbox0CompleteCallback>
 8001bb8:	e016      	b.n	8001be8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bcc:	e00c      	b.n	8001be8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be0:	e002      	b.n	8001be8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f989 	bl	8001efa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d024      	beq.n	8001c3c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f963 	bl	8001ed2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c0c:	e016      	b.n	8001c3c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c20:	e00c      	b.n	8001c3c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c34:	e002      	b.n	8001c3c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f969 	bl	8001f0e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d024      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f943 	bl	8001ee6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c60:	e016      	b.n	8001c90 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d004      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c74:	e00c      	b.n	8001c90 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c88:	e002      	b.n	8001c90 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f949 	bl	8001f22 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00c      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2208      	movs	r2, #8
 8001cce:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f930 	bl	8001f36 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d009      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe fd20 	bl	8000734 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00c      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2210      	movs	r2, #16
 8001d16:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2208      	movs	r2, #8
 8001d32:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f912 	bl	8001f5e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8f9 	bl	8001f4a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2210      	movs	r2, #16
 8001d72:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f8fc 	bl	8001f72 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00b      	beq.n	8001d9c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d006      	beq.n	8001d9c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2208      	movs	r2, #8
 8001d94:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8f5 	bl	8001f86 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d07b      	beq.n	8001e9e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d072      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d008      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d008      	beq.n	8001de8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d008      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d043      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d03e      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e1e:	2b60      	cmp	r3, #96	@ 0x60
 8001e20:	d02b      	beq.n	8001e7a <HAL_CAN_IRQHandler+0x32a>
 8001e22:	2b60      	cmp	r3, #96	@ 0x60
 8001e24:	d82e      	bhi.n	8001e84 <HAL_CAN_IRQHandler+0x334>
 8001e26:	2b50      	cmp	r3, #80	@ 0x50
 8001e28:	d022      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x320>
 8001e2a:	2b50      	cmp	r3, #80	@ 0x50
 8001e2c:	d82a      	bhi.n	8001e84 <HAL_CAN_IRQHandler+0x334>
 8001e2e:	2b40      	cmp	r3, #64	@ 0x40
 8001e30:	d019      	beq.n	8001e66 <HAL_CAN_IRQHandler+0x316>
 8001e32:	2b40      	cmp	r3, #64	@ 0x40
 8001e34:	d826      	bhi.n	8001e84 <HAL_CAN_IRQHandler+0x334>
 8001e36:	2b30      	cmp	r3, #48	@ 0x30
 8001e38:	d010      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x30c>
 8001e3a:	2b30      	cmp	r3, #48	@ 0x30
 8001e3c:	d822      	bhi.n	8001e84 <HAL_CAN_IRQHandler+0x334>
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d002      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x2f8>
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d005      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e46:	e01d      	b.n	8001e84 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	f043 0308 	orr.w	r3, r3, #8
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e50:	e019      	b.n	8001e86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	f043 0310 	orr.w	r3, r3, #16
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e5a:	e014      	b.n	8001e86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5e:	f043 0320 	orr.w	r3, r3, #32
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e64:	e00f      	b.n	8001e86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e6e:	e00a      	b.n	8001e86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e78:	e005      	b.n	8001e86 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e82:	e000      	b.n	8001e86 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e84:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699a      	ldr	r2, [r3, #24]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e94:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f872 	bl	8001f9a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	@ 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe2:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	60d3      	str	r3, [r2, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <__NVIC_GetPriorityGrouping+0x18>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0307 	and.w	r3, r3, #7
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	2b00      	cmp	r3, #0
 8002024:	db0b      	blt.n	800203e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 021f 	and.w	r2, r3, #31
 800202c:	4907      	ldr	r1, [pc, #28]	@ (800204c <__NVIC_EnableIRQ+0x38>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2001      	movs	r0, #1
 8002036:	fa00 f202 	lsl.w	r2, r0, r2
 800203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000e100 	.word	0xe000e100

08002050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	2b00      	cmp	r3, #0
 8002062:	db0a      	blt.n	800207a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	490c      	ldr	r1, [pc, #48]	@ (800209c <__NVIC_SetPriority+0x4c>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	0112      	lsls	r2, r2, #4
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	440b      	add	r3, r1
 8002074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002078:	e00a      	b.n	8002090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4908      	ldr	r1, [pc, #32]	@ (80020a0 <__NVIC_SetPriority+0x50>)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	3b04      	subs	r3, #4
 8002088:	0112      	lsls	r2, r2, #4
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	440b      	add	r3, r1
 800208e:	761a      	strb	r2, [r3, #24]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000e100 	.word	0xe000e100
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	@ 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f1c3 0307 	rsb	r3, r3, #7
 80020be:	2b04      	cmp	r3, #4
 80020c0:	bf28      	it	cs
 80020c2:	2304      	movcs	r3, #4
 80020c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3304      	adds	r3, #4
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d902      	bls.n	80020d4 <NVIC_EncodePriority+0x30>
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3b03      	subs	r3, #3
 80020d2:	e000      	b.n	80020d6 <NVIC_EncodePriority+0x32>
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	401a      	ands	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43d9      	mvns	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	4313      	orrs	r3, r2
         );
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3724      	adds	r7, #36	@ 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800211c:	d301      	bcc.n	8002122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800211e:	2301      	movs	r3, #1
 8002120:	e00f      	b.n	8002142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002122:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <SysTick_Config+0x40>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800212a:	210f      	movs	r1, #15
 800212c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002130:	f7ff ff8e 	bl	8002050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002134:	4b05      	ldr	r3, [pc, #20]	@ (800214c <SysTick_Config+0x40>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213a:	4b04      	ldr	r3, [pc, #16]	@ (800214c <SysTick_Config+0x40>)
 800213c:	2207      	movs	r2, #7
 800213e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	e000e010 	.word	0xe000e010

08002150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff29 	bl	8001fb0 <__NVIC_SetPriorityGrouping>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002178:	f7ff ff3e 	bl	8001ff8 <__NVIC_GetPriorityGrouping>
 800217c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f7ff ff8e 	bl	80020a4 <NVIC_EncodePriority>
 8002188:	4602      	mov	r2, r0
 800218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff5d 	bl	8002050 <__NVIC_SetPriority>
}
 8002196:	bf00      	nop
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff31 	bl	8002014 <__NVIC_EnableIRQ>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffa2 	bl	800210c <SysTick_Config>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e16b      	b.n	80024c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 815a 	bne.w	80024c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d005      	beq.n	8002226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	2b02      	cmp	r3, #2
 8002224:	d130      	bne.n	8002288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b03      	cmp	r3, #3
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80b4 	beq.w	80024c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b60      	ldr	r3, [pc, #384]	@ (80024e0 <HAL_GPIO_Init+0x30c>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4a5f      	ldr	r2, [pc, #380]	@ (80024e0 <HAL_GPIO_Init+0x30c>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002368:	6453      	str	r3, [r2, #68]	@ 0x44
 800236a:	4b5d      	ldr	r3, [pc, #372]	@ (80024e0 <HAL_GPIO_Init+0x30c>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002376:	4a5b      	ldr	r2, [pc, #364]	@ (80024e4 <HAL_GPIO_Init+0x310>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a52      	ldr	r2, [pc, #328]	@ (80024e8 <HAL_GPIO_Init+0x314>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d02b      	beq.n	80023fa <HAL_GPIO_Init+0x226>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a51      	ldr	r2, [pc, #324]	@ (80024ec <HAL_GPIO_Init+0x318>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d025      	beq.n	80023f6 <HAL_GPIO_Init+0x222>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a50      	ldr	r2, [pc, #320]	@ (80024f0 <HAL_GPIO_Init+0x31c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01f      	beq.n	80023f2 <HAL_GPIO_Init+0x21e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4f      	ldr	r2, [pc, #316]	@ (80024f4 <HAL_GPIO_Init+0x320>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d019      	beq.n	80023ee <HAL_GPIO_Init+0x21a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4e      	ldr	r2, [pc, #312]	@ (80024f8 <HAL_GPIO_Init+0x324>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <HAL_GPIO_Init+0x216>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4d      	ldr	r2, [pc, #308]	@ (80024fc <HAL_GPIO_Init+0x328>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00d      	beq.n	80023e6 <HAL_GPIO_Init+0x212>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002500 <HAL_GPIO_Init+0x32c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <HAL_GPIO_Init+0x20e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002504 <HAL_GPIO_Init+0x330>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <HAL_GPIO_Init+0x20a>
 80023da:	2307      	movs	r3, #7
 80023dc:	e00e      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023de:	2308      	movs	r3, #8
 80023e0:	e00c      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023e2:	2306      	movs	r3, #6
 80023e4:	e00a      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023e6:	2305      	movs	r3, #5
 80023e8:	e008      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023ea:	2304      	movs	r3, #4
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023ee:	2303      	movs	r3, #3
 80023f0:	e004      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e002      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023fa:	2300      	movs	r3, #0
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	f002 0203 	and.w	r2, r2, #3
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	4093      	lsls	r3, r2
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800240c:	4935      	ldr	r1, [pc, #212]	@ (80024e4 <HAL_GPIO_Init+0x310>)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800241a:	4b3b      	ldr	r3, [pc, #236]	@ (8002508 <HAL_GPIO_Init+0x334>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243e:	4a32      	ldr	r2, [pc, #200]	@ (8002508 <HAL_GPIO_Init+0x334>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002444:	4b30      	ldr	r3, [pc, #192]	@ (8002508 <HAL_GPIO_Init+0x334>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002468:	4a27      	ldr	r2, [pc, #156]	@ (8002508 <HAL_GPIO_Init+0x334>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800246e:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <HAL_GPIO_Init+0x334>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002492:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <HAL_GPIO_Init+0x334>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002498:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <HAL_GPIO_Init+0x334>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024bc:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <HAL_GPIO_Init+0x334>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3301      	adds	r3, #1
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b0f      	cmp	r3, #15
 80024cc:	f67f ae90 	bls.w	80021f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3724      	adds	r7, #36	@ 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40013800 	.word	0x40013800
 80024e8:	40020000 	.word	0x40020000
 80024ec:	40020400 	.word	0x40020400
 80024f0:	40020800 	.word	0x40020800
 80024f4:	40020c00 	.word	0x40020c00
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40021400 	.word	0x40021400
 8002500:	40021800 	.word	0x40021800
 8002504:	40021c00 	.word	0x40021c00
 8002508:	40013c00 	.word	0x40013c00

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002528:	e003      	b.n	8002532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	041a      	lsls	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e12b      	b.n	80027aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe fd5c 	bl	8001024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2224      	movs	r2, #36	@ 0x24
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025a4:	f001 f8da 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 80025a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4a81      	ldr	r2, [pc, #516]	@ (80027b4 <HAL_I2C_Init+0x274>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d807      	bhi.n	80025c4 <HAL_I2C_Init+0x84>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a80      	ldr	r2, [pc, #512]	@ (80027b8 <HAL_I2C_Init+0x278>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	bf94      	ite	ls
 80025bc:	2301      	movls	r3, #1
 80025be:	2300      	movhi	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e006      	b.n	80025d2 <HAL_I2C_Init+0x92>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4a7d      	ldr	r2, [pc, #500]	@ (80027bc <HAL_I2C_Init+0x27c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	bf94      	ite	ls
 80025cc:	2301      	movls	r3, #1
 80025ce:	2300      	movhi	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0e7      	b.n	80027aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a78      	ldr	r2, [pc, #480]	@ (80027c0 <HAL_I2C_Init+0x280>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	0c9b      	lsrs	r3, r3, #18
 80025e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4a6a      	ldr	r2, [pc, #424]	@ (80027b4 <HAL_I2C_Init+0x274>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d802      	bhi.n	8002614 <HAL_I2C_Init+0xd4>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	3301      	adds	r3, #1
 8002612:	e009      	b.n	8002628 <HAL_I2C_Init+0xe8>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	4a69      	ldr	r2, [pc, #420]	@ (80027c4 <HAL_I2C_Init+0x284>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	099b      	lsrs	r3, r3, #6
 8002626:	3301      	adds	r3, #1
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	430b      	orrs	r3, r1
 800262e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800263a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	495c      	ldr	r1, [pc, #368]	@ (80027b4 <HAL_I2C_Init+0x274>)
 8002644:	428b      	cmp	r3, r1
 8002646:	d819      	bhi.n	800267c <HAL_I2C_Init+0x13c>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1e59      	subs	r1, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fbb1 f3f3 	udiv	r3, r1, r3
 8002656:	1c59      	adds	r1, r3, #1
 8002658:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800265c:	400b      	ands	r3, r1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_I2C_Init+0x138>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1e59      	subs	r1, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002670:	3301      	adds	r3, #1
 8002672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002676:	e051      	b.n	800271c <HAL_I2C_Init+0x1dc>
 8002678:	2304      	movs	r3, #4
 800267a:	e04f      	b.n	800271c <HAL_I2C_Init+0x1dc>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d111      	bne.n	80026a8 <HAL_I2C_Init+0x168>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1e58      	subs	r0, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	440b      	add	r3, r1
 8002692:	fbb0 f3f3 	udiv	r3, r0, r3
 8002696:	3301      	adds	r3, #1
 8002698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e012      	b.n	80026ce <HAL_I2C_Init+0x18e>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1e58      	subs	r0, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	0099      	lsls	r1, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80026be:	3301      	adds	r3, #1
 80026c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_Init+0x196>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e022      	b.n	800271c <HAL_I2C_Init+0x1dc>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10e      	bne.n	80026fc <HAL_I2C_Init+0x1bc>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1e58      	subs	r0, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	440b      	add	r3, r1
 80026ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f0:	3301      	adds	r3, #1
 80026f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026fa:	e00f      	b.n	800271c <HAL_I2C_Init+0x1dc>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1e58      	subs	r0, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	0099      	lsls	r1, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002712:	3301      	adds	r3, #1
 8002714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002718:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	6809      	ldr	r1, [r1, #0]
 8002720:	4313      	orrs	r3, r2
 8002722:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800274a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6911      	ldr	r1, [r2, #16]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68d2      	ldr	r2, [r2, #12]
 8002756:	4311      	orrs	r1, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	430b      	orrs	r3, r1
 800275e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	000186a0 	.word	0x000186a0
 80027b8:	001e847f 	.word	0x001e847f
 80027bc:	003d08ff 	.word	0x003d08ff
 80027c0:	431bde83 	.word	0x431bde83
 80027c4:	10624dd3 	.word	0x10624dd3

080027c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	461a      	mov	r2, r3
 80027d4:	460b      	mov	r3, r1
 80027d6:	817b      	strh	r3, [r7, #10]
 80027d8:	4613      	mov	r3, r2
 80027da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7fe fe20 	bl	8001420 <HAL_GetTick>
 80027e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	f040 80e0 	bne.w	80029b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	2319      	movs	r3, #25
 80027f6:	2201      	movs	r2, #1
 80027f8:	4970      	ldr	r1, [pc, #448]	@ (80029bc <HAL_I2C_Master_Transmit+0x1f4>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f964 	bl	8002ac8 <I2C_WaitOnFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
 8002808:	e0d3      	b.n	80029b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_I2C_Master_Transmit+0x50>
 8002814:	2302      	movs	r3, #2
 8002816:	e0cc      	b.n	80029b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b01      	cmp	r3, #1
 800282c:	d007      	beq.n	800283e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0201 	orr.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800284c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2221      	movs	r2, #33	@ 0x21
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2210      	movs	r2, #16
 800285a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	893a      	ldrh	r2, [r7, #8]
 800286e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4a50      	ldr	r2, [pc, #320]	@ (80029c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800287e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002880:	8979      	ldrh	r1, [r7, #10]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	6a3a      	ldr	r2, [r7, #32]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f89c 	bl	80029c4 <I2C_MasterRequestWrite>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e08d      	b.n	80029b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028ac:	e066      	b.n	800297c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	6a39      	ldr	r1, [r7, #32]
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fa22 	bl	8002cfc <I2C_WaitOnTXEFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00d      	beq.n	80028da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d107      	bne.n	80028d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e06b      	b.n	80029b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b04      	cmp	r3, #4
 8002916:	d11b      	bne.n	8002950 <HAL_I2C_Master_Transmit+0x188>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	d017      	beq.n	8002950 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	6a39      	ldr	r1, [r7, #32]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fa19 	bl	8002d8c <I2C_WaitOnBTFFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00d      	beq.n	800297c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	2b04      	cmp	r3, #4
 8002966:	d107      	bne.n	8002978 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002976:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e01a      	b.n	80029b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	d194      	bne.n	80028ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	00100002 	.word	0x00100002
 80029c0:	ffff0000 	.word	0xffff0000

080029c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	460b      	mov	r3, r1
 80029d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d006      	beq.n	80029ee <I2C_MasterRequestWrite+0x2a>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d003      	beq.n	80029ee <I2C_MasterRequestWrite+0x2a>
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029ec:	d108      	bne.n	8002a00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e00b      	b.n	8002a18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	2b12      	cmp	r3, #18
 8002a06:	d107      	bne.n	8002a18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f84f 	bl	8002ac8 <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00d      	beq.n	8002a4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a3e:	d103      	bne.n	8002a48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e035      	b.n	8002ab8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a54:	d108      	bne.n	8002a68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a56:	897b      	ldrh	r3, [r7, #10]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a64:	611a      	str	r2, [r3, #16]
 8002a66:	e01b      	b.n	8002aa0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a68:	897b      	ldrh	r3, [r7, #10]
 8002a6a:	11db      	asrs	r3, r3, #7
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f003 0306 	and.w	r3, r3, #6
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f063 030f 	orn	r3, r3, #15
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	490e      	ldr	r1, [pc, #56]	@ (8002ac0 <I2C_MasterRequestWrite+0xfc>)
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f898 	bl	8002bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e010      	b.n	8002ab8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a96:	897b      	ldrh	r3, [r7, #10]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4907      	ldr	r1, [pc, #28]	@ (8002ac4 <I2C_MasterRequestWrite+0x100>)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f888 	bl	8002bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	00010008 	.word	0x00010008
 8002ac4:	00010002 	.word	0x00010002

08002ac8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ad8:	e048      	b.n	8002b6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ae0:	d044      	beq.n	8002b6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae2:	f7fe fc9d 	bl	8001420 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d302      	bcc.n	8002af8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d139      	bne.n	8002b6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	0c1b      	lsrs	r3, r3, #16
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d10d      	bne.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	43da      	mvns	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	e00c      	b.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	43da      	mvns	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d116      	bne.n	8002b6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f043 0220 	orr.w	r2, r3, #32
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e023      	b.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	0c1b      	lsrs	r3, r3, #16
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d10d      	bne.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	43da      	mvns	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4013      	ands	r3, r2
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	e00c      	b.n	8002bac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	43da      	mvns	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d093      	beq.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bca:	e071      	b.n	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bda:	d123      	bne.n	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	f043 0204 	orr.w	r2, r3, #4
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e067      	b.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c2a:	d041      	beq.n	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2c:	f7fe fbf8 	bl	8001420 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d302      	bcc.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d136      	bne.n	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10c      	bne.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4013      	ands	r3, r2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	e00b      	b.n	8002c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4013      	ands	r3, r2
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf14      	ite	ne
 8002c78:	2301      	movne	r3, #1
 8002c7a:	2300      	moveq	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	f043 0220 	orr.w	r2, r3, #32
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e021      	b.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d10c      	bne.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf14      	ite	ne
 8002ccc:	2301      	movne	r3, #1
 8002cce:	2300      	moveq	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e00b      	b.n	8002cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf14      	ite	ne
 8002ce6:	2301      	movne	r3, #1
 8002ce8:	2300      	moveq	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f47f af6d 	bne.w	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d08:	e034      	b.n	8002d74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f886 	bl	8002e1c <I2C_IsAcknowledgeFailed>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e034      	b.n	8002d84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d20:	d028      	beq.n	8002d74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d22:	f7fe fb7d 	bl	8001420 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d302      	bcc.n	8002d38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d11d      	bne.n	8002d74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d42:	2b80      	cmp	r3, #128	@ 0x80
 8002d44:	d016      	beq.n	8002d74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e007      	b.n	8002d84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7e:	2b80      	cmp	r3, #128	@ 0x80
 8002d80:	d1c3      	bne.n	8002d0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d98:	e034      	b.n	8002e04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f83e 	bl	8002e1c <I2C_IsAcknowledgeFailed>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e034      	b.n	8002e14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002db0:	d028      	beq.n	8002e04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db2:	f7fe fb35 	bl	8001420 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d302      	bcc.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11d      	bne.n	8002e04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d016      	beq.n	8002e04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e007      	b.n	8002e14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d1c3      	bne.n	8002d9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e32:	d11b      	bne.n	8002e6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	f043 0204 	orr.w	r2, r3, #4
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e267      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d075      	beq.n	8002f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e9a:	4b88      	ldr	r3, [pc, #544]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b85      	ldr	r3, [pc, #532]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d112      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb2:	4b82      	ldr	r3, [pc, #520]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d05b      	beq.n	8002f84 <HAL_RCC_OscConfig+0x108>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d157      	bne.n	8002f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e242      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x74>
 8002ee2:	4b76      	ldr	r3, [pc, #472]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a75      	ldr	r2, [pc, #468]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x98>
 8002efa:	4b70      	ldr	r3, [pc, #448]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6f      	ldr	r2, [pc, #444]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b6d      	ldr	r3, [pc, #436]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6c      	ldr	r2, [pc, #432]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002f14:	4b69      	ldr	r3, [pc, #420]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a68      	ldr	r2, [pc, #416]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b66      	ldr	r3, [pc, #408]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a65      	ldr	r2, [pc, #404]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fa74 	bl	8001420 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe fa70 	bl	8001420 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	@ 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e207      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0xc0>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fa60 	bl	8001420 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe fa5c 	bl	8001420 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e1f3      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	4b51      	ldr	r3, [pc, #324]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0xe8>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d063      	beq.n	800305a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f92:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b47      	ldr	r3, [pc, #284]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002faa:	4b44      	ldr	r3, [pc, #272]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	4b41      	ldr	r3, [pc, #260]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1c7      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b3b      	ldr	r3, [pc, #236]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4937      	ldr	r1, [pc, #220]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	e03a      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	4b34      	ldr	r3, [pc, #208]	@ (80030c0 <HAL_RCC_OscConfig+0x244>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fe fa15 	bl	8001420 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fa11 	bl	8001420 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e1a8      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4b2b      	ldr	r3, [pc, #172]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4925      	ldr	r1, [pc, #148]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	e015      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <HAL_RCC_OscConfig+0x244>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fe f9f4 	bl	8001420 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303c:	f7fe f9f0 	bl	8001420 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e187      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d036      	beq.n	80030d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306e:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <HAL_RCC_OscConfig+0x248>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe f9d4 	bl	8001420 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe f9d0 	bl	8001420 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e167      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x200>
 800309a:	e01b      	b.n	80030d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_RCC_OscConfig+0x248>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7fe f9bd 	bl	8001420 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	e00e      	b.n	80030c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030aa:	f7fe f9b9 	bl	8001420 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d907      	bls.n	80030c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e150      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	42470000 	.word	0x42470000
 80030c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b88      	ldr	r3, [pc, #544]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ea      	bne.n	80030aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8097 	beq.w	8003210 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b81      	ldr	r3, [pc, #516]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10f      	bne.n	8003112 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	4b7d      	ldr	r3, [pc, #500]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	4a7c      	ldr	r2, [pc, #496]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003100:	6413      	str	r3, [r2, #64]	@ 0x40
 8003102:	4b7a      	ldr	r3, [pc, #488]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	4b77      	ldr	r3, [pc, #476]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d118      	bne.n	8003150 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311e:	4b74      	ldr	r3, [pc, #464]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a73      	ldr	r2, [pc, #460]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312a:	f7fe f979 	bl	8001420 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fe f975 	bl	8001420 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e10c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b6a      	ldr	r3, [pc, #424]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x2ea>
 8003158:	4b64      	ldr	r3, [pc, #400]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315c:	4a63      	ldr	r2, [pc, #396]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	@ 0x70
 8003164:	e01c      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x30c>
 800316e:	4b5f      	ldr	r3, [pc, #380]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	4a5e      	ldr	r2, [pc, #376]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	@ 0x70
 800317a:	4b5c      	ldr	r3, [pc, #368]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317e:	4a5b      	ldr	r2, [pc, #364]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6713      	str	r3, [r2, #112]	@ 0x70
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003188:	4b58      	ldr	r3, [pc, #352]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a57      	ldr	r2, [pc, #348]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
 8003194:	4b55      	ldr	r3, [pc, #340]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a54      	ldr	r2, [pc, #336]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fe f93a 	bl	8001420 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fe f936 	bl	8001420 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0cb      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c6:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ee      	beq.n	80031b0 <HAL_RCC_OscConfig+0x334>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7fe f924 	bl	8001420 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fe f920 	bl	8001420 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0b5      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f2:	4b3e      	ldr	r3, [pc, #248]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1ee      	bne.n	80031dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003204:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	4a38      	ldr	r2, [pc, #224]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80a1 	beq.w	800335c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321a:	4b34      	ldr	r3, [pc, #208]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b08      	cmp	r3, #8
 8003224:	d05c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d141      	bne.n	80032b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fe f8f4 	bl	8001420 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe f8f0 	bl	8001420 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e087      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	4b27      	ldr	r3, [pc, #156]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	019b      	lsls	r3, r3, #6
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	3b01      	subs	r3, #1
 8003274:	041b      	lsls	r3, r3, #16
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	491b      	ldr	r1, [pc, #108]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe f8c9 	bl	8001420 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe f8c5 	bl	8001420 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e05c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a4:	4b11      	ldr	r3, [pc, #68]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x416>
 80032b0:	e054      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe f8b2 	bl	8001420 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe f8ae 	bl	8001420 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e045      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x444>
 80032de:	e03d      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e038      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000
 80032f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003368 <HAL_RCC_OscConfig+0x4ec>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d028      	beq.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d121      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d11a      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800332e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003330:	4293      	cmp	r3, r2
 8003332:	d111      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	3b01      	subs	r3, #1
 8003342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0cc      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b68      	ldr	r3, [pc, #416]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d90c      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b65      	ldr	r3, [pc, #404]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b63      	ldr	r3, [pc, #396]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0b8      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c0:	4b59      	ldr	r3, [pc, #356]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a58      	ldr	r2, [pc, #352]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d8:	4b53      	ldr	r3, [pc, #332]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a52      	ldr	r2, [pc, #328]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b50      	ldr	r3, [pc, #320]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	494d      	ldr	r1, [pc, #308]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d044      	beq.n	800348c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d119      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d003      	beq.n	800342a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003426:	2b03      	cmp	r3, #3
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342a:	4b3f      	ldr	r3, [pc, #252]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e06f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343a:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e067      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344a:	4b37      	ldr	r3, [pc, #220]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f023 0203 	bic.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4934      	ldr	r1, [pc, #208]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800345c:	f7fd ffe0 	bl	8001420 <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	e00a      	b.n	800347a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fd ffdc 	bl	8001420 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e04f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 020c 	and.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	429a      	cmp	r2, r3
 800348a:	d1eb      	bne.n	8003464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800348c:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d20c      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b22      	ldr	r3, [pc, #136]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e032      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c0:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4916      	ldr	r1, [pc, #88]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034de:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	490e      	ldr	r1, [pc, #56]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034f2:	f000 f821 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490a      	ldr	r1, [pc, #40]	@ (800352c <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	4a09      	ldr	r2, [pc, #36]	@ (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd ff40 	bl	8001398 <HAL_InitTick>

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40023c00 	.word	0x40023c00
 8003528:	40023800 	.word	0x40023800
 800352c:	080053d0 	.word	0x080053d0
 8003530:	20000000 	.word	0x20000000
 8003534:	20000004 	.word	0x20000004

08003538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800353c:	b094      	sub	sp, #80	@ 0x50
 800353e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003550:	4b79      	ldr	r3, [pc, #484]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d00d      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x40>
 800355c:	2b08      	cmp	r3, #8
 800355e:	f200 80e1 	bhi.w	8003724 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x34>
 8003566:	2b04      	cmp	r3, #4
 8003568:	d003      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x3a>
 800356a:	e0db      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4b73      	ldr	r3, [pc, #460]	@ (800373c <HAL_RCC_GetSysClockFreq+0x204>)
 800356e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003570:	e0db      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003572:	4b73      	ldr	r3, [pc, #460]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x208>)
 8003574:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003576:	e0d8      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003578:	4b6f      	ldr	r3, [pc, #444]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003580:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003582:	4b6d      	ldr	r3, [pc, #436]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d063      	beq.n	8003656 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358e:	4b6a      	ldr	r3, [pc, #424]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	2200      	movs	r2, #0
 8003596:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003598:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a2:	2300      	movs	r3, #0
 80035a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035aa:	4622      	mov	r2, r4
 80035ac:	462b      	mov	r3, r5
 80035ae:	f04f 0000 	mov.w	r0, #0
 80035b2:	f04f 0100 	mov.w	r1, #0
 80035b6:	0159      	lsls	r1, r3, #5
 80035b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035bc:	0150      	lsls	r0, r2, #5
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4621      	mov	r1, r4
 80035c4:	1a51      	subs	r1, r2, r1
 80035c6:	6139      	str	r1, [r7, #16]
 80035c8:	4629      	mov	r1, r5
 80035ca:	eb63 0301 	sbc.w	r3, r3, r1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035dc:	4659      	mov	r1, fp
 80035de:	018b      	lsls	r3, r1, #6
 80035e0:	4651      	mov	r1, sl
 80035e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035e6:	4651      	mov	r1, sl
 80035e8:	018a      	lsls	r2, r1, #6
 80035ea:	4651      	mov	r1, sl
 80035ec:	ebb2 0801 	subs.w	r8, r2, r1
 80035f0:	4659      	mov	r1, fp
 80035f2:	eb63 0901 	sbc.w	r9, r3, r1
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360a:	4690      	mov	r8, r2
 800360c:	4699      	mov	r9, r3
 800360e:	4623      	mov	r3, r4
 8003610:	eb18 0303 	adds.w	r3, r8, r3
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	462b      	mov	r3, r5
 8003618:	eb49 0303 	adc.w	r3, r9, r3
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800362a:	4629      	mov	r1, r5
 800362c:	024b      	lsls	r3, r1, #9
 800362e:	4621      	mov	r1, r4
 8003630:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003634:	4621      	mov	r1, r4
 8003636:	024a      	lsls	r2, r1, #9
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800363e:	2200      	movs	r2, #0
 8003640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003648:	f7fc fe1a 	bl	8000280 <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003654:	e058      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003656:	4b38      	ldr	r3, [pc, #224]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	2200      	movs	r2, #0
 800365e:	4618      	mov	r0, r3
 8003660:	4611      	mov	r1, r2
 8003662:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003666:	623b      	str	r3, [r7, #32]
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
 800366c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003670:	4642      	mov	r2, r8
 8003672:	464b      	mov	r3, r9
 8003674:	f04f 0000 	mov.w	r0, #0
 8003678:	f04f 0100 	mov.w	r1, #0
 800367c:	0159      	lsls	r1, r3, #5
 800367e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003682:	0150      	lsls	r0, r2, #5
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4641      	mov	r1, r8
 800368a:	ebb2 0a01 	subs.w	sl, r2, r1
 800368e:	4649      	mov	r1, r9
 8003690:	eb63 0b01 	sbc.w	fp, r3, r1
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036a8:	ebb2 040a 	subs.w	r4, r2, sl
 80036ac:	eb63 050b 	sbc.w	r5, r3, fp
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	00eb      	lsls	r3, r5, #3
 80036ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036be:	00e2      	lsls	r2, r4, #3
 80036c0:	4614      	mov	r4, r2
 80036c2:	461d      	mov	r5, r3
 80036c4:	4643      	mov	r3, r8
 80036c6:	18e3      	adds	r3, r4, r3
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	464b      	mov	r3, r9
 80036cc:	eb45 0303 	adc.w	r3, r5, r3
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036de:	4629      	mov	r1, r5
 80036e0:	028b      	lsls	r3, r1, #10
 80036e2:	4621      	mov	r1, r4
 80036e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036e8:	4621      	mov	r1, r4
 80036ea:	028a      	lsls	r2, r1, #10
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f2:	2200      	movs	r2, #0
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	61fa      	str	r2, [r7, #28]
 80036f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fc:	f7fc fdc0 	bl	8000280 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003708:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	3301      	adds	r3, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003718:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800371a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003722:	e002      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_RCC_GetSysClockFreq+0x204>)
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800372a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800372c:	4618      	mov	r0, r3
 800372e:	3750      	adds	r7, #80	@ 0x50
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	00f42400 	.word	0x00f42400
 8003740:	007a1200 	.word	0x007a1200

08003744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <HAL_RCC_GetHCLKFreq+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000

0800375c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003760:	f7ff fff0 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b05      	ldr	r3, [pc, #20]	@ (800377c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0a9b      	lsrs	r3, r3, #10
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4903      	ldr	r1, [pc, #12]	@ (8003780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40023800 	.word	0x40023800
 8003780:	080053e0 	.word	0x080053e0

08003784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003788:	f7ff ffdc 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	0b5b      	lsrs	r3, r3, #13
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4903      	ldr	r1, [pc, #12]	@ (80037a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800
 80037a8:	080053e0 	.word	0x080053e0

080037ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e041      	b.n	8003842 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fd fc6e 	bl	80010b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	4610      	mov	r0, r2
 80037ec:	f000 f9b8 	bl	8003b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_TIM_PWM_Start+0x24>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e022      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d109      	bne.n	800388a <HAL_TIM_PWM_Start+0x3e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e015      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d109      	bne.n	80038a4 <HAL_TIM_PWM_Start+0x58>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e008      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e07c      	b.n	80039b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_PWM_Start+0x82>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038cc:	e013      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d104      	bne.n	80038de <HAL_TIM_PWM_Start+0x92>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038dc:	e00b      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_PWM_Start+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038ec:	e003      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2201      	movs	r2, #1
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fb8a 	bl	8004018 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2d      	ldr	r2, [pc, #180]	@ (80039c0 <HAL_TIM_PWM_Start+0x174>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_TIM_PWM_Start+0xcc>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2c      	ldr	r2, [pc, #176]	@ (80039c4 <HAL_TIM_PWM_Start+0x178>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_TIM_PWM_Start+0xd0>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <HAL_TIM_PWM_Start+0xd2>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003930:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a22      	ldr	r2, [pc, #136]	@ (80039c0 <HAL_TIM_PWM_Start+0x174>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003944:	d01d      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1f      	ldr	r2, [pc, #124]	@ (80039c8 <HAL_TIM_PWM_Start+0x17c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1d      	ldr	r2, [pc, #116]	@ (80039cc <HAL_TIM_PWM_Start+0x180>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1c      	ldr	r2, [pc, #112]	@ (80039d0 <HAL_TIM_PWM_Start+0x184>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a16      	ldr	r2, [pc, #88]	@ (80039c4 <HAL_TIM_PWM_Start+0x178>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a18      	ldr	r2, [pc, #96]	@ (80039d4 <HAL_TIM_PWM_Start+0x188>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a16      	ldr	r2, [pc, #88]	@ (80039d8 <HAL_TIM_PWM_Start+0x18c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b06      	cmp	r3, #6
 8003992:	d010      	beq.n	80039b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a4:	e007      	b.n	80039b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40010400 	.word	0x40010400
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40001800 	.word	0x40001800

080039dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0ae      	b.n	8003b58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	f200 809f 	bhi.w	8003b48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a45 	.word	0x08003a45
 8003a14:	08003b49 	.word	0x08003b49
 8003a18:	08003b49 	.word	0x08003b49
 8003a1c:	08003b49 	.word	0x08003b49
 8003a20:	08003a85 	.word	0x08003a85
 8003a24:	08003b49 	.word	0x08003b49
 8003a28:	08003b49 	.word	0x08003b49
 8003a2c:	08003b49 	.word	0x08003b49
 8003a30:	08003ac7 	.word	0x08003ac7
 8003a34:	08003b49 	.word	0x08003b49
 8003a38:	08003b49 	.word	0x08003b49
 8003a3c:	08003b49 	.word	0x08003b49
 8003a40:	08003b07 	.word	0x08003b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f934 	bl	8003cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0208 	orr.w	r2, r2, #8
 8003a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0204 	bic.w	r2, r2, #4
 8003a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6999      	ldr	r1, [r3, #24]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	619a      	str	r2, [r3, #24]
      break;
 8003a82:	e064      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f984 	bl	8003d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6999      	ldr	r1, [r3, #24]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	021a      	lsls	r2, r3, #8
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	619a      	str	r2, [r3, #24]
      break;
 8003ac4:	e043      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 f9d9 	bl	8003e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0208 	orr.w	r2, r2, #8
 8003ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0204 	bic.w	r2, r2, #4
 8003af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69d9      	ldr	r1, [r3, #28]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	61da      	str	r2, [r3, #28]
      break;
 8003b04:	e023      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fa2d 	bl	8003f6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69d9      	ldr	r1, [r3, #28]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	021a      	lsls	r2, r3, #8
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	61da      	str	r2, [r3, #28]
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a46      	ldr	r2, [pc, #280]	@ (8003c8c <TIM_Base_SetConfig+0x12c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d013      	beq.n	8003ba0 <TIM_Base_SetConfig+0x40>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b7e:	d00f      	beq.n	8003ba0 <TIM_Base_SetConfig+0x40>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a43      	ldr	r2, [pc, #268]	@ (8003c90 <TIM_Base_SetConfig+0x130>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <TIM_Base_SetConfig+0x40>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a42      	ldr	r2, [pc, #264]	@ (8003c94 <TIM_Base_SetConfig+0x134>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_Base_SetConfig+0x40>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a41      	ldr	r2, [pc, #260]	@ (8003c98 <TIM_Base_SetConfig+0x138>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_Base_SetConfig+0x40>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a40      	ldr	r2, [pc, #256]	@ (8003c9c <TIM_Base_SetConfig+0x13c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d108      	bne.n	8003bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a35      	ldr	r2, [pc, #212]	@ (8003c8c <TIM_Base_SetConfig+0x12c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d02b      	beq.n	8003c12 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc0:	d027      	beq.n	8003c12 <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a32      	ldr	r2, [pc, #200]	@ (8003c90 <TIM_Base_SetConfig+0x130>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d023      	beq.n	8003c12 <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a31      	ldr	r2, [pc, #196]	@ (8003c94 <TIM_Base_SetConfig+0x134>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01f      	beq.n	8003c12 <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a30      	ldr	r2, [pc, #192]	@ (8003c98 <TIM_Base_SetConfig+0x138>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d01b      	beq.n	8003c12 <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8003c9c <TIM_Base_SetConfig+0x13c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d017      	beq.n	8003c12 <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a2e      	ldr	r2, [pc, #184]	@ (8003ca0 <TIM_Base_SetConfig+0x140>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d013      	beq.n	8003c12 <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca4 <TIM_Base_SetConfig+0x144>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00f      	beq.n	8003c12 <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca8 <TIM_Base_SetConfig+0x148>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00b      	beq.n	8003c12 <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8003cac <TIM_Base_SetConfig+0x14c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d007      	beq.n	8003c12 <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2a      	ldr	r2, [pc, #168]	@ (8003cb0 <TIM_Base_SetConfig+0x150>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d003      	beq.n	8003c12 <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a29      	ldr	r2, [pc, #164]	@ (8003cb4 <TIM_Base_SetConfig+0x154>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d108      	bne.n	8003c24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a10      	ldr	r2, [pc, #64]	@ (8003c8c <TIM_Base_SetConfig+0x12c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <TIM_Base_SetConfig+0xf8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a12      	ldr	r2, [pc, #72]	@ (8003c9c <TIM_Base_SetConfig+0x13c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d103      	bne.n	8003c60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f023 0201 	bic.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	611a      	str	r2, [r3, #16]
  }
}
 8003c7e:	bf00      	nop
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40000c00 	.word	0x40000c00
 8003c9c:	40010400 	.word	0x40010400
 8003ca0:	40014000 	.word	0x40014000
 8003ca4:	40014400 	.word	0x40014400
 8003ca8:	40014800 	.word	0x40014800
 8003cac:	40001800 	.word	0x40001800
 8003cb0:	40001c00 	.word	0x40001c00
 8003cb4:	40002000 	.word	0x40002000

08003cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f023 0201 	bic.w	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0303 	bic.w	r3, r3, #3
 8003cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0302 	bic.w	r3, r3, #2
 8003d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a20      	ldr	r2, [pc, #128]	@ (8003d90 <TIM_OC1_SetConfig+0xd8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_OC1_SetConfig+0x64>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a1f      	ldr	r2, [pc, #124]	@ (8003d94 <TIM_OC1_SetConfig+0xdc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10c      	bne.n	8003d36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f023 0308 	bic.w	r3, r3, #8
 8003d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a15      	ldr	r2, [pc, #84]	@ (8003d90 <TIM_OC1_SetConfig+0xd8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_OC1_SetConfig+0x8e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a14      	ldr	r2, [pc, #80]	@ (8003d94 <TIM_OC1_SetConfig+0xdc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d111      	bne.n	8003d6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	621a      	str	r2, [r3, #32]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40010000 	.word	0x40010000
 8003d94:	40010400 	.word	0x40010400

08003d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f023 0210 	bic.w	r2, r3, #16
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f023 0320 	bic.w	r3, r3, #32
 8003de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a22      	ldr	r2, [pc, #136]	@ (8003e7c <TIM_OC2_SetConfig+0xe4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <TIM_OC2_SetConfig+0x68>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a21      	ldr	r2, [pc, #132]	@ (8003e80 <TIM_OC2_SetConfig+0xe8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d10d      	bne.n	8003e1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a17      	ldr	r2, [pc, #92]	@ (8003e7c <TIM_OC2_SetConfig+0xe4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_OC2_SetConfig+0x94>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a16      	ldr	r2, [pc, #88]	@ (8003e80 <TIM_OC2_SetConfig+0xe8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d113      	bne.n	8003e54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	621a      	str	r2, [r3, #32]
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40010000 	.word	0x40010000
 8003e80:	40010400 	.word	0x40010400

08003e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0303 	bic.w	r3, r3, #3
 8003eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a21      	ldr	r2, [pc, #132]	@ (8003f64 <TIM_OC3_SetConfig+0xe0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_OC3_SetConfig+0x66>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a20      	ldr	r2, [pc, #128]	@ (8003f68 <TIM_OC3_SetConfig+0xe4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d10d      	bne.n	8003f06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a16      	ldr	r2, [pc, #88]	@ (8003f64 <TIM_OC3_SetConfig+0xe0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_OC3_SetConfig+0x92>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a15      	ldr	r2, [pc, #84]	@ (8003f68 <TIM_OC3_SetConfig+0xe4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d113      	bne.n	8003f3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	621a      	str	r2, [r3, #32]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40010000 	.word	0x40010000
 8003f68:	40010400 	.word	0x40010400

08003f6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	031b      	lsls	r3, r3, #12
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a12      	ldr	r2, [pc, #72]	@ (8004010 <TIM_OC4_SetConfig+0xa4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_OC4_SetConfig+0x68>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a11      	ldr	r2, [pc, #68]	@ (8004014 <TIM_OC4_SetConfig+0xa8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d109      	bne.n	8003fe8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	019b      	lsls	r3, r3, #6
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40010000 	.word	0x40010000
 8004014:	40010400 	.word	0x40010400

08004018 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	2201      	movs	r2, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1a      	ldr	r2, [r3, #32]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	43db      	mvns	r3, r3
 800403a:	401a      	ands	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	fa01 f303 	lsl.w	r3, r1, r3
 8004050:	431a      	orrs	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	621a      	str	r2, [r3, #32]
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004078:	2302      	movs	r3, #2
 800407a:	e05a      	b.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a21      	ldr	r2, [pc, #132]	@ (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d022      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c8:	d01d      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d018      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1a      	ldr	r2, [pc, #104]	@ (800414c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a18      	ldr	r2, [pc, #96]	@ (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a17      	ldr	r2, [pc, #92]	@ (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a15      	ldr	r2, [pc, #84]	@ (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10c      	bne.n	8004120 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800410c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	4313      	orrs	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40010000 	.word	0x40010000
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40010400 	.word	0x40010400
 8004154:	40014000 	.word	0x40014000
 8004158:	40001800 	.word	0x40001800

0800415c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004174:	2302      	movs	r3, #2
 8004176:	e03d      	b.n	80041f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e042      	b.n	8004298 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fc ffa0 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2224      	movs	r2, #36	@ 0x24
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f973 	bl	8004530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	@ 0x28
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	4613      	mov	r3, r2
 80042ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d175      	bne.n	80043ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_UART_Transmit+0x2c>
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e06e      	b.n	80043ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2221      	movs	r2, #33	@ 0x21
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042de:	f7fd f89f 	bl	8001420 <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	88fa      	ldrh	r2, [r7, #6]
 80042e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	88fa      	ldrh	r2, [r7, #6]
 80042ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f8:	d108      	bne.n	800430c <HAL_UART_Transmit+0x6c>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d104      	bne.n	800430c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	e003      	b.n	8004314 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004314:	e02e      	b.n	8004374 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2200      	movs	r2, #0
 800431e:	2180      	movs	r1, #128	@ 0x80
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f848 	bl	80043b6 <UART_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e03a      	b.n	80043ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800434c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	3302      	adds	r3, #2
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	e007      	b.n	8004366 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	3301      	adds	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1cb      	bne.n	8004316 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	2140      	movs	r1, #64	@ 0x40
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f814 	bl	80043b6 <UART_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e006      	b.n	80043ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b086      	sub	sp, #24
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	603b      	str	r3, [r7, #0]
 80043c2:	4613      	mov	r3, r2
 80043c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c6:	e03b      	b.n	8004440 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043ce:	d037      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d0:	f7fd f826 	bl	8001420 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	6a3a      	ldr	r2, [r7, #32]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d302      	bcc.n	80043e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e03a      	b.n	8004460 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d023      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b80      	cmp	r3, #128	@ 0x80
 80043fc:	d020      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b40      	cmp	r3, #64	@ 0x40
 8004402:	d01d      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b08      	cmp	r3, #8
 8004410:	d116      	bne.n	8004440 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f81d 	bl	8004468 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2208      	movs	r2, #8
 8004432:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e00f      	b.n	8004460 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4013      	ands	r3, r2
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	429a      	cmp	r2, r3
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2300      	movne	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	429a      	cmp	r2, r3
 800445c:	d0b4      	beq.n	80043c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b095      	sub	sp, #84	@ 0x54
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004482:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	330c      	adds	r3, #12
 800448e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004490:	643a      	str	r2, [r7, #64]	@ 0x40
 8004492:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004496:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800449e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e5      	bne.n	8004470 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3314      	adds	r3, #20
 80044aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3314      	adds	r3, #20
 80044c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e5      	bne.n	80044a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d119      	bne.n	8004514 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f023 0310 	bic.w	r3, r3, #16
 80044f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	330c      	adds	r3, #12
 80044fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004500:	61ba      	str	r2, [r7, #24]
 8004502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6979      	ldr	r1, [r7, #20]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	613b      	str	r3, [r7, #16]
   return(result);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e5      	bne.n	80044e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004522:	bf00      	nop
 8004524:	3754      	adds	r7, #84	@ 0x54
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004534:	b0c0      	sub	sp, #256	@ 0x100
 8004536:	af00      	add	r7, sp, #0
 8004538:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	68d9      	ldr	r1, [r3, #12]
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	ea40 0301 	orr.w	r3, r0, r1
 8004558:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800455a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	431a      	orrs	r2, r3
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	431a      	orrs	r2, r3
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004588:	f021 010c 	bic.w	r1, r1, #12
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004596:	430b      	orrs	r3, r1
 8004598:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045aa:	6999      	ldr	r1, [r3, #24]
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	ea40 0301 	orr.w	r3, r0, r1
 80045b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b8f      	ldr	r3, [pc, #572]	@ (80047fc <UART_SetConfig+0x2cc>)
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d005      	beq.n	80045d0 <UART_SetConfig+0xa0>
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004800 <UART_SetConfig+0x2d0>)
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d104      	bne.n	80045da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045d0:	f7ff f8d8 	bl	8003784 <HAL_RCC_GetPCLK2Freq>
 80045d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045d8:	e003      	b.n	80045e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045da:	f7ff f8bf 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 80045de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045ec:	f040 810c 	bne.w	8004808 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004602:	4622      	mov	r2, r4
 8004604:	462b      	mov	r3, r5
 8004606:	1891      	adds	r1, r2, r2
 8004608:	65b9      	str	r1, [r7, #88]	@ 0x58
 800460a:	415b      	adcs	r3, r3
 800460c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800460e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004612:	4621      	mov	r1, r4
 8004614:	eb12 0801 	adds.w	r8, r2, r1
 8004618:	4629      	mov	r1, r5
 800461a:	eb43 0901 	adc.w	r9, r3, r1
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800462e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004632:	4690      	mov	r8, r2
 8004634:	4699      	mov	r9, r3
 8004636:	4623      	mov	r3, r4
 8004638:	eb18 0303 	adds.w	r3, r8, r3
 800463c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004640:	462b      	mov	r3, r5
 8004642:	eb49 0303 	adc.w	r3, r9, r3
 8004646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004656:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800465a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800465e:	460b      	mov	r3, r1
 8004660:	18db      	adds	r3, r3, r3
 8004662:	653b      	str	r3, [r7, #80]	@ 0x50
 8004664:	4613      	mov	r3, r2
 8004666:	eb42 0303 	adc.w	r3, r2, r3
 800466a:	657b      	str	r3, [r7, #84]	@ 0x54
 800466c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004670:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004674:	f7fb fe04 	bl	8000280 <__aeabi_uldivmod>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4b61      	ldr	r3, [pc, #388]	@ (8004804 <UART_SetConfig+0x2d4>)
 800467e:	fba3 2302 	umull	r2, r3, r3, r2
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	011c      	lsls	r4, r3, #4
 8004686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800468a:	2200      	movs	r2, #0
 800468c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004690:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004694:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004698:	4642      	mov	r2, r8
 800469a:	464b      	mov	r3, r9
 800469c:	1891      	adds	r1, r2, r2
 800469e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046a0:	415b      	adcs	r3, r3
 80046a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046a8:	4641      	mov	r1, r8
 80046aa:	eb12 0a01 	adds.w	sl, r2, r1
 80046ae:	4649      	mov	r1, r9
 80046b0:	eb43 0b01 	adc.w	fp, r3, r1
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046c8:	4692      	mov	sl, r2
 80046ca:	469b      	mov	fp, r3
 80046cc:	4643      	mov	r3, r8
 80046ce:	eb1a 0303 	adds.w	r3, sl, r3
 80046d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046d6:	464b      	mov	r3, r9
 80046d8:	eb4b 0303 	adc.w	r3, fp, r3
 80046dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046f4:	460b      	mov	r3, r1
 80046f6:	18db      	adds	r3, r3, r3
 80046f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80046fa:	4613      	mov	r3, r2
 80046fc:	eb42 0303 	adc.w	r3, r2, r3
 8004700:	647b      	str	r3, [r7, #68]	@ 0x44
 8004702:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004706:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800470a:	f7fb fdb9 	bl	8000280 <__aeabi_uldivmod>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4611      	mov	r1, r2
 8004714:	4b3b      	ldr	r3, [pc, #236]	@ (8004804 <UART_SetConfig+0x2d4>)
 8004716:	fba3 2301 	umull	r2, r3, r3, r1
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	2264      	movs	r2, #100	@ 0x64
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	1acb      	subs	r3, r1, r3
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800472a:	4b36      	ldr	r3, [pc, #216]	@ (8004804 <UART_SetConfig+0x2d4>)
 800472c:	fba3 2302 	umull	r2, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004738:	441c      	add	r4, r3
 800473a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004744:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004748:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800474c:	4642      	mov	r2, r8
 800474e:	464b      	mov	r3, r9
 8004750:	1891      	adds	r1, r2, r2
 8004752:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004754:	415b      	adcs	r3, r3
 8004756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004758:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800475c:	4641      	mov	r1, r8
 800475e:	1851      	adds	r1, r2, r1
 8004760:	6339      	str	r1, [r7, #48]	@ 0x30
 8004762:	4649      	mov	r1, r9
 8004764:	414b      	adcs	r3, r1
 8004766:	637b      	str	r3, [r7, #52]	@ 0x34
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004774:	4659      	mov	r1, fp
 8004776:	00cb      	lsls	r3, r1, #3
 8004778:	4651      	mov	r1, sl
 800477a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800477e:	4651      	mov	r1, sl
 8004780:	00ca      	lsls	r2, r1, #3
 8004782:	4610      	mov	r0, r2
 8004784:	4619      	mov	r1, r3
 8004786:	4603      	mov	r3, r0
 8004788:	4642      	mov	r2, r8
 800478a:	189b      	adds	r3, r3, r2
 800478c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004790:	464b      	mov	r3, r9
 8004792:	460a      	mov	r2, r1
 8004794:	eb42 0303 	adc.w	r3, r2, r3
 8004798:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047b0:	460b      	mov	r3, r1
 80047b2:	18db      	adds	r3, r3, r3
 80047b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b6:	4613      	mov	r3, r2
 80047b8:	eb42 0303 	adc.w	r3, r2, r3
 80047bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047c6:	f7fb fd5b 	bl	8000280 <__aeabi_uldivmod>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004804 <UART_SetConfig+0x2d4>)
 80047d0:	fba3 1302 	umull	r1, r3, r3, r2
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	2164      	movs	r1, #100	@ 0x64
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	3332      	adds	r3, #50	@ 0x32
 80047e2:	4a08      	ldr	r2, [pc, #32]	@ (8004804 <UART_SetConfig+0x2d4>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	f003 0207 	and.w	r2, r3, #7
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4422      	add	r2, r4
 80047f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047f8:	e106      	b.n	8004a08 <UART_SetConfig+0x4d8>
 80047fa:	bf00      	nop
 80047fc:	40011000 	.word	0x40011000
 8004800:	40011400 	.word	0x40011400
 8004804:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004812:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004816:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800481a:	4642      	mov	r2, r8
 800481c:	464b      	mov	r3, r9
 800481e:	1891      	adds	r1, r2, r2
 8004820:	6239      	str	r1, [r7, #32]
 8004822:	415b      	adcs	r3, r3
 8004824:	627b      	str	r3, [r7, #36]	@ 0x24
 8004826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800482a:	4641      	mov	r1, r8
 800482c:	1854      	adds	r4, r2, r1
 800482e:	4649      	mov	r1, r9
 8004830:	eb43 0501 	adc.w	r5, r3, r1
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	00eb      	lsls	r3, r5, #3
 800483e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004842:	00e2      	lsls	r2, r4, #3
 8004844:	4614      	mov	r4, r2
 8004846:	461d      	mov	r5, r3
 8004848:	4643      	mov	r3, r8
 800484a:	18e3      	adds	r3, r4, r3
 800484c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004850:	464b      	mov	r3, r9
 8004852:	eb45 0303 	adc.w	r3, r5, r3
 8004856:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800485a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004866:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004876:	4629      	mov	r1, r5
 8004878:	008b      	lsls	r3, r1, #2
 800487a:	4621      	mov	r1, r4
 800487c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004880:	4621      	mov	r1, r4
 8004882:	008a      	lsls	r2, r1, #2
 8004884:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004888:	f7fb fcfa 	bl	8000280 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4b60      	ldr	r3, [pc, #384]	@ (8004a14 <UART_SetConfig+0x4e4>)
 8004892:	fba3 2302 	umull	r2, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	011c      	lsls	r4, r3, #4
 800489a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048ac:	4642      	mov	r2, r8
 80048ae:	464b      	mov	r3, r9
 80048b0:	1891      	adds	r1, r2, r2
 80048b2:	61b9      	str	r1, [r7, #24]
 80048b4:	415b      	adcs	r3, r3
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048bc:	4641      	mov	r1, r8
 80048be:	1851      	adds	r1, r2, r1
 80048c0:	6139      	str	r1, [r7, #16]
 80048c2:	4649      	mov	r1, r9
 80048c4:	414b      	adcs	r3, r1
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048d4:	4659      	mov	r1, fp
 80048d6:	00cb      	lsls	r3, r1, #3
 80048d8:	4651      	mov	r1, sl
 80048da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048de:	4651      	mov	r1, sl
 80048e0:	00ca      	lsls	r2, r1, #3
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	4642      	mov	r2, r8
 80048ea:	189b      	adds	r3, r3, r2
 80048ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048f0:	464b      	mov	r3, r9
 80048f2:	460a      	mov	r2, r1
 80048f4:	eb42 0303 	adc.w	r3, r2, r3
 80048f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004906:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004914:	4649      	mov	r1, r9
 8004916:	008b      	lsls	r3, r1, #2
 8004918:	4641      	mov	r1, r8
 800491a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800491e:	4641      	mov	r1, r8
 8004920:	008a      	lsls	r2, r1, #2
 8004922:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004926:	f7fb fcab 	bl	8000280 <__aeabi_uldivmod>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4611      	mov	r1, r2
 8004930:	4b38      	ldr	r3, [pc, #224]	@ (8004a14 <UART_SetConfig+0x4e4>)
 8004932:	fba3 2301 	umull	r2, r3, r3, r1
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2264      	movs	r2, #100	@ 0x64
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	1acb      	subs	r3, r1, r3
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	3332      	adds	r3, #50	@ 0x32
 8004944:	4a33      	ldr	r2, [pc, #204]	@ (8004a14 <UART_SetConfig+0x4e4>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004950:	441c      	add	r4, r3
 8004952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004956:	2200      	movs	r2, #0
 8004958:	673b      	str	r3, [r7, #112]	@ 0x70
 800495a:	677a      	str	r2, [r7, #116]	@ 0x74
 800495c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	1891      	adds	r1, r2, r2
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	415b      	adcs	r3, r3
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004970:	4641      	mov	r1, r8
 8004972:	1851      	adds	r1, r2, r1
 8004974:	6039      	str	r1, [r7, #0]
 8004976:	4649      	mov	r1, r9
 8004978:	414b      	adcs	r3, r1
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004988:	4659      	mov	r1, fp
 800498a:	00cb      	lsls	r3, r1, #3
 800498c:	4651      	mov	r1, sl
 800498e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004992:	4651      	mov	r1, sl
 8004994:	00ca      	lsls	r2, r1, #3
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	4603      	mov	r3, r0
 800499c:	4642      	mov	r2, r8
 800499e:	189b      	adds	r3, r3, r2
 80049a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049a2:	464b      	mov	r3, r9
 80049a4:	460a      	mov	r2, r1
 80049a6:	eb42 0303 	adc.w	r3, r2, r3
 80049aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80049b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049c4:	4649      	mov	r1, r9
 80049c6:	008b      	lsls	r3, r1, #2
 80049c8:	4641      	mov	r1, r8
 80049ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ce:	4641      	mov	r1, r8
 80049d0:	008a      	lsls	r2, r1, #2
 80049d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049d6:	f7fb fc53 	bl	8000280 <__aeabi_uldivmod>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <UART_SetConfig+0x4e4>)
 80049e0:	fba3 1302 	umull	r1, r3, r3, r2
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	2164      	movs	r1, #100	@ 0x64
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	3332      	adds	r3, #50	@ 0x32
 80049f2:	4a08      	ldr	r2, [pc, #32]	@ (8004a14 <UART_SetConfig+0x4e4>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	f003 020f 	and.w	r2, r3, #15
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4422      	add	r2, r4
 8004a06:	609a      	str	r2, [r3, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a14:	51eb851f 	.word	0x51eb851f

08004a18 <siprintf>:
 8004a18:	b40e      	push	{r1, r2, r3}
 8004a1a:	b510      	push	{r4, lr}
 8004a1c:	b09d      	sub	sp, #116	@ 0x74
 8004a1e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004a20:	9002      	str	r0, [sp, #8]
 8004a22:	9006      	str	r0, [sp, #24]
 8004a24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a28:	480a      	ldr	r0, [pc, #40]	@ (8004a54 <siprintf+0x3c>)
 8004a2a:	9107      	str	r1, [sp, #28]
 8004a2c:	9104      	str	r1, [sp, #16]
 8004a2e:	490a      	ldr	r1, [pc, #40]	@ (8004a58 <siprintf+0x40>)
 8004a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a34:	9105      	str	r1, [sp, #20]
 8004a36:	2400      	movs	r4, #0
 8004a38:	a902      	add	r1, sp, #8
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	9301      	str	r3, [sp, #4]
 8004a3e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004a40:	f000 f994 	bl	8004d6c <_svfiprintf_r>
 8004a44:	9b02      	ldr	r3, [sp, #8]
 8004a46:	701c      	strb	r4, [r3, #0]
 8004a48:	b01d      	add	sp, #116	@ 0x74
 8004a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a4e:	b003      	add	sp, #12
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c
 8004a58:	ffff0208 	.word	0xffff0208

08004a5c <memset>:
 8004a5c:	4402      	add	r2, r0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d100      	bne.n	8004a66 <memset+0xa>
 8004a64:	4770      	bx	lr
 8004a66:	f803 1b01 	strb.w	r1, [r3], #1
 8004a6a:	e7f9      	b.n	8004a60 <memset+0x4>

08004a6c <__errno>:
 8004a6c:	4b01      	ldr	r3, [pc, #4]	@ (8004a74 <__errno+0x8>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	2000000c 	.word	0x2000000c

08004a78 <__libc_init_array>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ab0 <__libc_init_array+0x38>)
 8004a7c:	4c0d      	ldr	r4, [pc, #52]	@ (8004ab4 <__libc_init_array+0x3c>)
 8004a7e:	1b64      	subs	r4, r4, r5
 8004a80:	10a4      	asrs	r4, r4, #2
 8004a82:	2600      	movs	r6, #0
 8004a84:	42a6      	cmp	r6, r4
 8004a86:	d109      	bne.n	8004a9c <__libc_init_array+0x24>
 8004a88:	4d0b      	ldr	r5, [pc, #44]	@ (8004ab8 <__libc_init_array+0x40>)
 8004a8a:	4c0c      	ldr	r4, [pc, #48]	@ (8004abc <__libc_init_array+0x44>)
 8004a8c:	f000 fc64 	bl	8005358 <_init>
 8004a90:	1b64      	subs	r4, r4, r5
 8004a92:	10a4      	asrs	r4, r4, #2
 8004a94:	2600      	movs	r6, #0
 8004a96:	42a6      	cmp	r6, r4
 8004a98:	d105      	bne.n	8004aa6 <__libc_init_array+0x2e>
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa0:	4798      	blx	r3
 8004aa2:	3601      	adds	r6, #1
 8004aa4:	e7ee      	b.n	8004a84 <__libc_init_array+0xc>
 8004aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aaa:	4798      	blx	r3
 8004aac:	3601      	adds	r6, #1
 8004aae:	e7f2      	b.n	8004a96 <__libc_init_array+0x1e>
 8004ab0:	08005424 	.word	0x08005424
 8004ab4:	08005424 	.word	0x08005424
 8004ab8:	08005424 	.word	0x08005424
 8004abc:	08005428 	.word	0x08005428

08004ac0 <__retarget_lock_acquire_recursive>:
 8004ac0:	4770      	bx	lr

08004ac2 <__retarget_lock_release_recursive>:
 8004ac2:	4770      	bx	lr

08004ac4 <_free_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	d041      	beq.n	8004b50 <_free_r+0x8c>
 8004acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad0:	1f0c      	subs	r4, r1, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bfb8      	it	lt
 8004ad6:	18e4      	addlt	r4, r4, r3
 8004ad8:	f000 f8e0 	bl	8004c9c <__malloc_lock>
 8004adc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b54 <_free_r+0x90>)
 8004ade:	6813      	ldr	r3, [r2, #0]
 8004ae0:	b933      	cbnz	r3, 8004af0 <_free_r+0x2c>
 8004ae2:	6063      	str	r3, [r4, #4]
 8004ae4:	6014      	str	r4, [r2, #0]
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aec:	f000 b8dc 	b.w	8004ca8 <__malloc_unlock>
 8004af0:	42a3      	cmp	r3, r4
 8004af2:	d908      	bls.n	8004b06 <_free_r+0x42>
 8004af4:	6820      	ldr	r0, [r4, #0]
 8004af6:	1821      	adds	r1, r4, r0
 8004af8:	428b      	cmp	r3, r1
 8004afa:	bf01      	itttt	eq
 8004afc:	6819      	ldreq	r1, [r3, #0]
 8004afe:	685b      	ldreq	r3, [r3, #4]
 8004b00:	1809      	addeq	r1, r1, r0
 8004b02:	6021      	streq	r1, [r4, #0]
 8004b04:	e7ed      	b.n	8004ae2 <_free_r+0x1e>
 8004b06:	461a      	mov	r2, r3
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	b10b      	cbz	r3, 8004b10 <_free_r+0x4c>
 8004b0c:	42a3      	cmp	r3, r4
 8004b0e:	d9fa      	bls.n	8004b06 <_free_r+0x42>
 8004b10:	6811      	ldr	r1, [r2, #0]
 8004b12:	1850      	adds	r0, r2, r1
 8004b14:	42a0      	cmp	r0, r4
 8004b16:	d10b      	bne.n	8004b30 <_free_r+0x6c>
 8004b18:	6820      	ldr	r0, [r4, #0]
 8004b1a:	4401      	add	r1, r0
 8004b1c:	1850      	adds	r0, r2, r1
 8004b1e:	4283      	cmp	r3, r0
 8004b20:	6011      	str	r1, [r2, #0]
 8004b22:	d1e0      	bne.n	8004ae6 <_free_r+0x22>
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	6053      	str	r3, [r2, #4]
 8004b2a:	4408      	add	r0, r1
 8004b2c:	6010      	str	r0, [r2, #0]
 8004b2e:	e7da      	b.n	8004ae6 <_free_r+0x22>
 8004b30:	d902      	bls.n	8004b38 <_free_r+0x74>
 8004b32:	230c      	movs	r3, #12
 8004b34:	602b      	str	r3, [r5, #0]
 8004b36:	e7d6      	b.n	8004ae6 <_free_r+0x22>
 8004b38:	6820      	ldr	r0, [r4, #0]
 8004b3a:	1821      	adds	r1, r4, r0
 8004b3c:	428b      	cmp	r3, r1
 8004b3e:	bf04      	itt	eq
 8004b40:	6819      	ldreq	r1, [r3, #0]
 8004b42:	685b      	ldreq	r3, [r3, #4]
 8004b44:	6063      	str	r3, [r4, #4]
 8004b46:	bf04      	itt	eq
 8004b48:	1809      	addeq	r1, r1, r0
 8004b4a:	6021      	streq	r1, [r4, #0]
 8004b4c:	6054      	str	r4, [r2, #4]
 8004b4e:	e7ca      	b.n	8004ae6 <_free_r+0x22>
 8004b50:	bd38      	pop	{r3, r4, r5, pc}
 8004b52:	bf00      	nop
 8004b54:	200002fc 	.word	0x200002fc

08004b58 <sbrk_aligned>:
 8004b58:	b570      	push	{r4, r5, r6, lr}
 8004b5a:	4e0f      	ldr	r6, [pc, #60]	@ (8004b98 <sbrk_aligned+0x40>)
 8004b5c:	460c      	mov	r4, r1
 8004b5e:	6831      	ldr	r1, [r6, #0]
 8004b60:	4605      	mov	r5, r0
 8004b62:	b911      	cbnz	r1, 8004b6a <sbrk_aligned+0x12>
 8004b64:	f000 fba4 	bl	80052b0 <_sbrk_r>
 8004b68:	6030      	str	r0, [r6, #0]
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f000 fb9f 	bl	80052b0 <_sbrk_r>
 8004b72:	1c43      	adds	r3, r0, #1
 8004b74:	d103      	bne.n	8004b7e <sbrk_aligned+0x26>
 8004b76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	bd70      	pop	{r4, r5, r6, pc}
 8004b7e:	1cc4      	adds	r4, r0, #3
 8004b80:	f024 0403 	bic.w	r4, r4, #3
 8004b84:	42a0      	cmp	r0, r4
 8004b86:	d0f8      	beq.n	8004b7a <sbrk_aligned+0x22>
 8004b88:	1a21      	subs	r1, r4, r0
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f000 fb90 	bl	80052b0 <_sbrk_r>
 8004b90:	3001      	adds	r0, #1
 8004b92:	d1f2      	bne.n	8004b7a <sbrk_aligned+0x22>
 8004b94:	e7ef      	b.n	8004b76 <sbrk_aligned+0x1e>
 8004b96:	bf00      	nop
 8004b98:	200002f8 	.word	0x200002f8

08004b9c <_malloc_r>:
 8004b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ba0:	1ccd      	adds	r5, r1, #3
 8004ba2:	f025 0503 	bic.w	r5, r5, #3
 8004ba6:	3508      	adds	r5, #8
 8004ba8:	2d0c      	cmp	r5, #12
 8004baa:	bf38      	it	cc
 8004bac:	250c      	movcc	r5, #12
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	db01      	blt.n	8004bb8 <_malloc_r+0x1c>
 8004bb4:	42a9      	cmp	r1, r5
 8004bb6:	d904      	bls.n	8004bc2 <_malloc_r+0x26>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	6033      	str	r3, [r6, #0]
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c98 <_malloc_r+0xfc>
 8004bc6:	f000 f869 	bl	8004c9c <__malloc_lock>
 8004bca:	f8d8 3000 	ldr.w	r3, [r8]
 8004bce:	461c      	mov	r4, r3
 8004bd0:	bb44      	cbnz	r4, 8004c24 <_malloc_r+0x88>
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f7ff ffbf 	bl	8004b58 <sbrk_aligned>
 8004bda:	1c43      	adds	r3, r0, #1
 8004bdc:	4604      	mov	r4, r0
 8004bde:	d158      	bne.n	8004c92 <_malloc_r+0xf6>
 8004be0:	f8d8 4000 	ldr.w	r4, [r8]
 8004be4:	4627      	mov	r7, r4
 8004be6:	2f00      	cmp	r7, #0
 8004be8:	d143      	bne.n	8004c72 <_malloc_r+0xd6>
 8004bea:	2c00      	cmp	r4, #0
 8004bec:	d04b      	beq.n	8004c86 <_malloc_r+0xea>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	4639      	mov	r1, r7
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	eb04 0903 	add.w	r9, r4, r3
 8004bf8:	f000 fb5a 	bl	80052b0 <_sbrk_r>
 8004bfc:	4581      	cmp	r9, r0
 8004bfe:	d142      	bne.n	8004c86 <_malloc_r+0xea>
 8004c00:	6821      	ldr	r1, [r4, #0]
 8004c02:	1a6d      	subs	r5, r5, r1
 8004c04:	4629      	mov	r1, r5
 8004c06:	4630      	mov	r0, r6
 8004c08:	f7ff ffa6 	bl	8004b58 <sbrk_aligned>
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d03a      	beq.n	8004c86 <_malloc_r+0xea>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	442b      	add	r3, r5
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	f8d8 3000 	ldr.w	r3, [r8]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	bb62      	cbnz	r2, 8004c78 <_malloc_r+0xdc>
 8004c1e:	f8c8 7000 	str.w	r7, [r8]
 8004c22:	e00f      	b.n	8004c44 <_malloc_r+0xa8>
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	1b52      	subs	r2, r2, r5
 8004c28:	d420      	bmi.n	8004c6c <_malloc_r+0xd0>
 8004c2a:	2a0b      	cmp	r2, #11
 8004c2c:	d917      	bls.n	8004c5e <_malloc_r+0xc2>
 8004c2e:	1961      	adds	r1, r4, r5
 8004c30:	42a3      	cmp	r3, r4
 8004c32:	6025      	str	r5, [r4, #0]
 8004c34:	bf18      	it	ne
 8004c36:	6059      	strne	r1, [r3, #4]
 8004c38:	6863      	ldr	r3, [r4, #4]
 8004c3a:	bf08      	it	eq
 8004c3c:	f8c8 1000 	streq.w	r1, [r8]
 8004c40:	5162      	str	r2, [r4, r5]
 8004c42:	604b      	str	r3, [r1, #4]
 8004c44:	4630      	mov	r0, r6
 8004c46:	f000 f82f 	bl	8004ca8 <__malloc_unlock>
 8004c4a:	f104 000b 	add.w	r0, r4, #11
 8004c4e:	1d23      	adds	r3, r4, #4
 8004c50:	f020 0007 	bic.w	r0, r0, #7
 8004c54:	1ac2      	subs	r2, r0, r3
 8004c56:	bf1c      	itt	ne
 8004c58:	1a1b      	subne	r3, r3, r0
 8004c5a:	50a3      	strne	r3, [r4, r2]
 8004c5c:	e7af      	b.n	8004bbe <_malloc_r+0x22>
 8004c5e:	6862      	ldr	r2, [r4, #4]
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	bf0c      	ite	eq
 8004c64:	f8c8 2000 	streq.w	r2, [r8]
 8004c68:	605a      	strne	r2, [r3, #4]
 8004c6a:	e7eb      	b.n	8004c44 <_malloc_r+0xa8>
 8004c6c:	4623      	mov	r3, r4
 8004c6e:	6864      	ldr	r4, [r4, #4]
 8004c70:	e7ae      	b.n	8004bd0 <_malloc_r+0x34>
 8004c72:	463c      	mov	r4, r7
 8004c74:	687f      	ldr	r7, [r7, #4]
 8004c76:	e7b6      	b.n	8004be6 <_malloc_r+0x4a>
 8004c78:	461a      	mov	r2, r3
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	42a3      	cmp	r3, r4
 8004c7e:	d1fb      	bne.n	8004c78 <_malloc_r+0xdc>
 8004c80:	2300      	movs	r3, #0
 8004c82:	6053      	str	r3, [r2, #4]
 8004c84:	e7de      	b.n	8004c44 <_malloc_r+0xa8>
 8004c86:	230c      	movs	r3, #12
 8004c88:	6033      	str	r3, [r6, #0]
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f000 f80c 	bl	8004ca8 <__malloc_unlock>
 8004c90:	e794      	b.n	8004bbc <_malloc_r+0x20>
 8004c92:	6005      	str	r5, [r0, #0]
 8004c94:	e7d6      	b.n	8004c44 <_malloc_r+0xa8>
 8004c96:	bf00      	nop
 8004c98:	200002fc 	.word	0x200002fc

08004c9c <__malloc_lock>:
 8004c9c:	4801      	ldr	r0, [pc, #4]	@ (8004ca4 <__malloc_lock+0x8>)
 8004c9e:	f7ff bf0f 	b.w	8004ac0 <__retarget_lock_acquire_recursive>
 8004ca2:	bf00      	nop
 8004ca4:	200002f4 	.word	0x200002f4

08004ca8 <__malloc_unlock>:
 8004ca8:	4801      	ldr	r0, [pc, #4]	@ (8004cb0 <__malloc_unlock+0x8>)
 8004caa:	f7ff bf0a 	b.w	8004ac2 <__retarget_lock_release_recursive>
 8004cae:	bf00      	nop
 8004cb0:	200002f4 	.word	0x200002f4

08004cb4 <__ssputs_r>:
 8004cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb8:	688e      	ldr	r6, [r1, #8]
 8004cba:	461f      	mov	r7, r3
 8004cbc:	42be      	cmp	r6, r7
 8004cbe:	680b      	ldr	r3, [r1, #0]
 8004cc0:	4682      	mov	sl, r0
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	4690      	mov	r8, r2
 8004cc6:	d82d      	bhi.n	8004d24 <__ssputs_r+0x70>
 8004cc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ccc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004cd0:	d026      	beq.n	8004d20 <__ssputs_r+0x6c>
 8004cd2:	6965      	ldr	r5, [r4, #20]
 8004cd4:	6909      	ldr	r1, [r1, #16]
 8004cd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cda:	eba3 0901 	sub.w	r9, r3, r1
 8004cde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ce2:	1c7b      	adds	r3, r7, #1
 8004ce4:	444b      	add	r3, r9
 8004ce6:	106d      	asrs	r5, r5, #1
 8004ce8:	429d      	cmp	r5, r3
 8004cea:	bf38      	it	cc
 8004cec:	461d      	movcc	r5, r3
 8004cee:	0553      	lsls	r3, r2, #21
 8004cf0:	d527      	bpl.n	8004d42 <__ssputs_r+0x8e>
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	f7ff ff52 	bl	8004b9c <_malloc_r>
 8004cf8:	4606      	mov	r6, r0
 8004cfa:	b360      	cbz	r0, 8004d56 <__ssputs_r+0xa2>
 8004cfc:	6921      	ldr	r1, [r4, #16]
 8004cfe:	464a      	mov	r2, r9
 8004d00:	f000 fae6 	bl	80052d0 <memcpy>
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0e:	81a3      	strh	r3, [r4, #12]
 8004d10:	6126      	str	r6, [r4, #16]
 8004d12:	6165      	str	r5, [r4, #20]
 8004d14:	444e      	add	r6, r9
 8004d16:	eba5 0509 	sub.w	r5, r5, r9
 8004d1a:	6026      	str	r6, [r4, #0]
 8004d1c:	60a5      	str	r5, [r4, #8]
 8004d1e:	463e      	mov	r6, r7
 8004d20:	42be      	cmp	r6, r7
 8004d22:	d900      	bls.n	8004d26 <__ssputs_r+0x72>
 8004d24:	463e      	mov	r6, r7
 8004d26:	6820      	ldr	r0, [r4, #0]
 8004d28:	4632      	mov	r2, r6
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	f000 faa6 	bl	800527c <memmove>
 8004d30:	68a3      	ldr	r3, [r4, #8]
 8004d32:	1b9b      	subs	r3, r3, r6
 8004d34:	60a3      	str	r3, [r4, #8]
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	4433      	add	r3, r6
 8004d3a:	6023      	str	r3, [r4, #0]
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d42:	462a      	mov	r2, r5
 8004d44:	f000 fad2 	bl	80052ec <_realloc_r>
 8004d48:	4606      	mov	r6, r0
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d1e0      	bne.n	8004d10 <__ssputs_r+0x5c>
 8004d4e:	6921      	ldr	r1, [r4, #16]
 8004d50:	4650      	mov	r0, sl
 8004d52:	f7ff feb7 	bl	8004ac4 <_free_r>
 8004d56:	230c      	movs	r3, #12
 8004d58:	f8ca 3000 	str.w	r3, [sl]
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d62:	81a3      	strh	r3, [r4, #12]
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d68:	e7e9      	b.n	8004d3e <__ssputs_r+0x8a>
	...

08004d6c <_svfiprintf_r>:
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	4698      	mov	r8, r3
 8004d72:	898b      	ldrh	r3, [r1, #12]
 8004d74:	061b      	lsls	r3, r3, #24
 8004d76:	b09d      	sub	sp, #116	@ 0x74
 8004d78:	4607      	mov	r7, r0
 8004d7a:	460d      	mov	r5, r1
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	d510      	bpl.n	8004da2 <_svfiprintf_r+0x36>
 8004d80:	690b      	ldr	r3, [r1, #16]
 8004d82:	b973      	cbnz	r3, 8004da2 <_svfiprintf_r+0x36>
 8004d84:	2140      	movs	r1, #64	@ 0x40
 8004d86:	f7ff ff09 	bl	8004b9c <_malloc_r>
 8004d8a:	6028      	str	r0, [r5, #0]
 8004d8c:	6128      	str	r0, [r5, #16]
 8004d8e:	b930      	cbnz	r0, 8004d9e <_svfiprintf_r+0x32>
 8004d90:	230c      	movs	r3, #12
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d98:	b01d      	add	sp, #116	@ 0x74
 8004d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9e:	2340      	movs	r3, #64	@ 0x40
 8004da0:	616b      	str	r3, [r5, #20]
 8004da2:	2300      	movs	r3, #0
 8004da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004da6:	2320      	movs	r3, #32
 8004da8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8004db0:	2330      	movs	r3, #48	@ 0x30
 8004db2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f50 <_svfiprintf_r+0x1e4>
 8004db6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004dba:	f04f 0901 	mov.w	r9, #1
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	469a      	mov	sl, r3
 8004dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dc6:	b10a      	cbz	r2, 8004dcc <_svfiprintf_r+0x60>
 8004dc8:	2a25      	cmp	r2, #37	@ 0x25
 8004dca:	d1f9      	bne.n	8004dc0 <_svfiprintf_r+0x54>
 8004dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8004dd0:	d00b      	beq.n	8004dea <_svfiprintf_r+0x7e>
 8004dd2:	465b      	mov	r3, fp
 8004dd4:	4622      	mov	r2, r4
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	4638      	mov	r0, r7
 8004dda:	f7ff ff6b 	bl	8004cb4 <__ssputs_r>
 8004dde:	3001      	adds	r0, #1
 8004de0:	f000 80a7 	beq.w	8004f32 <_svfiprintf_r+0x1c6>
 8004de4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004de6:	445a      	add	r2, fp
 8004de8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dea:	f89a 3000 	ldrb.w	r3, [sl]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 809f 	beq.w	8004f32 <_svfiprintf_r+0x1c6>
 8004df4:	2300      	movs	r3, #0
 8004df6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dfe:	f10a 0a01 	add.w	sl, sl, #1
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	9307      	str	r3, [sp, #28]
 8004e06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e0c:	4654      	mov	r4, sl
 8004e0e:	2205      	movs	r2, #5
 8004e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e14:	484e      	ldr	r0, [pc, #312]	@ (8004f50 <_svfiprintf_r+0x1e4>)
 8004e16:	f7fb f9e3 	bl	80001e0 <memchr>
 8004e1a:	9a04      	ldr	r2, [sp, #16]
 8004e1c:	b9d8      	cbnz	r0, 8004e56 <_svfiprintf_r+0xea>
 8004e1e:	06d0      	lsls	r0, r2, #27
 8004e20:	bf44      	itt	mi
 8004e22:	2320      	movmi	r3, #32
 8004e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e28:	0711      	lsls	r1, r2, #28
 8004e2a:	bf44      	itt	mi
 8004e2c:	232b      	movmi	r3, #43	@ 0x2b
 8004e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e32:	f89a 3000 	ldrb.w	r3, [sl]
 8004e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e38:	d015      	beq.n	8004e66 <_svfiprintf_r+0xfa>
 8004e3a:	9a07      	ldr	r2, [sp, #28]
 8004e3c:	4654      	mov	r4, sl
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f04f 0c0a 	mov.w	ip, #10
 8004e44:	4621      	mov	r1, r4
 8004e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e4a:	3b30      	subs	r3, #48	@ 0x30
 8004e4c:	2b09      	cmp	r3, #9
 8004e4e:	d94b      	bls.n	8004ee8 <_svfiprintf_r+0x17c>
 8004e50:	b1b0      	cbz	r0, 8004e80 <_svfiprintf_r+0x114>
 8004e52:	9207      	str	r2, [sp, #28]
 8004e54:	e014      	b.n	8004e80 <_svfiprintf_r+0x114>
 8004e56:	eba0 0308 	sub.w	r3, r0, r8
 8004e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	9304      	str	r3, [sp, #16]
 8004e62:	46a2      	mov	sl, r4
 8004e64:	e7d2      	b.n	8004e0c <_svfiprintf_r+0xa0>
 8004e66:	9b03      	ldr	r3, [sp, #12]
 8004e68:	1d19      	adds	r1, r3, #4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	9103      	str	r1, [sp, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bfbb      	ittet	lt
 8004e72:	425b      	neglt	r3, r3
 8004e74:	f042 0202 	orrlt.w	r2, r2, #2
 8004e78:	9307      	strge	r3, [sp, #28]
 8004e7a:	9307      	strlt	r3, [sp, #28]
 8004e7c:	bfb8      	it	lt
 8004e7e:	9204      	strlt	r2, [sp, #16]
 8004e80:	7823      	ldrb	r3, [r4, #0]
 8004e82:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e84:	d10a      	bne.n	8004e9c <_svfiprintf_r+0x130>
 8004e86:	7863      	ldrb	r3, [r4, #1]
 8004e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e8a:	d132      	bne.n	8004ef2 <_svfiprintf_r+0x186>
 8004e8c:	9b03      	ldr	r3, [sp, #12]
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	9203      	str	r2, [sp, #12]
 8004e94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e98:	3402      	adds	r4, #2
 8004e9a:	9305      	str	r3, [sp, #20]
 8004e9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f60 <_svfiprintf_r+0x1f4>
 8004ea0:	7821      	ldrb	r1, [r4, #0]
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	4650      	mov	r0, sl
 8004ea6:	f7fb f99b 	bl	80001e0 <memchr>
 8004eaa:	b138      	cbz	r0, 8004ebc <_svfiprintf_r+0x150>
 8004eac:	9b04      	ldr	r3, [sp, #16]
 8004eae:	eba0 000a 	sub.w	r0, r0, sl
 8004eb2:	2240      	movs	r2, #64	@ 0x40
 8004eb4:	4082      	lsls	r2, r0
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	3401      	adds	r4, #1
 8004eba:	9304      	str	r3, [sp, #16]
 8004ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec0:	4824      	ldr	r0, [pc, #144]	@ (8004f54 <_svfiprintf_r+0x1e8>)
 8004ec2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ec6:	2206      	movs	r2, #6
 8004ec8:	f7fb f98a 	bl	80001e0 <memchr>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d036      	beq.n	8004f3e <_svfiprintf_r+0x1d2>
 8004ed0:	4b21      	ldr	r3, [pc, #132]	@ (8004f58 <_svfiprintf_r+0x1ec>)
 8004ed2:	bb1b      	cbnz	r3, 8004f1c <_svfiprintf_r+0x1b0>
 8004ed4:	9b03      	ldr	r3, [sp, #12]
 8004ed6:	3307      	adds	r3, #7
 8004ed8:	f023 0307 	bic.w	r3, r3, #7
 8004edc:	3308      	adds	r3, #8
 8004ede:	9303      	str	r3, [sp, #12]
 8004ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ee2:	4433      	add	r3, r6
 8004ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ee6:	e76a      	b.n	8004dbe <_svfiprintf_r+0x52>
 8004ee8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eec:	460c      	mov	r4, r1
 8004eee:	2001      	movs	r0, #1
 8004ef0:	e7a8      	b.n	8004e44 <_svfiprintf_r+0xd8>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	3401      	adds	r4, #1
 8004ef6:	9305      	str	r3, [sp, #20]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	f04f 0c0a 	mov.w	ip, #10
 8004efe:	4620      	mov	r0, r4
 8004f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f04:	3a30      	subs	r2, #48	@ 0x30
 8004f06:	2a09      	cmp	r2, #9
 8004f08:	d903      	bls.n	8004f12 <_svfiprintf_r+0x1a6>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0c6      	beq.n	8004e9c <_svfiprintf_r+0x130>
 8004f0e:	9105      	str	r1, [sp, #20]
 8004f10:	e7c4      	b.n	8004e9c <_svfiprintf_r+0x130>
 8004f12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f16:	4604      	mov	r4, r0
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e7f0      	b.n	8004efe <_svfiprintf_r+0x192>
 8004f1c:	ab03      	add	r3, sp, #12
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	462a      	mov	r2, r5
 8004f22:	4b0e      	ldr	r3, [pc, #56]	@ (8004f5c <_svfiprintf_r+0x1f0>)
 8004f24:	a904      	add	r1, sp, #16
 8004f26:	4638      	mov	r0, r7
 8004f28:	f3af 8000 	nop.w
 8004f2c:	1c42      	adds	r2, r0, #1
 8004f2e:	4606      	mov	r6, r0
 8004f30:	d1d6      	bne.n	8004ee0 <_svfiprintf_r+0x174>
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	065b      	lsls	r3, r3, #25
 8004f36:	f53f af2d 	bmi.w	8004d94 <_svfiprintf_r+0x28>
 8004f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f3c:	e72c      	b.n	8004d98 <_svfiprintf_r+0x2c>
 8004f3e:	ab03      	add	r3, sp, #12
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	462a      	mov	r2, r5
 8004f44:	4b05      	ldr	r3, [pc, #20]	@ (8004f5c <_svfiprintf_r+0x1f0>)
 8004f46:	a904      	add	r1, sp, #16
 8004f48:	4638      	mov	r0, r7
 8004f4a:	f000 f879 	bl	8005040 <_printf_i>
 8004f4e:	e7ed      	b.n	8004f2c <_svfiprintf_r+0x1c0>
 8004f50:	080053e8 	.word	0x080053e8
 8004f54:	080053f2 	.word	0x080053f2
 8004f58:	00000000 	.word	0x00000000
 8004f5c:	08004cb5 	.word	0x08004cb5
 8004f60:	080053ee 	.word	0x080053ee

08004f64 <_printf_common>:
 8004f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	4616      	mov	r6, r2
 8004f6a:	4698      	mov	r8, r3
 8004f6c:	688a      	ldr	r2, [r1, #8]
 8004f6e:	690b      	ldr	r3, [r1, #16]
 8004f70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f74:	4293      	cmp	r3, r2
 8004f76:	bfb8      	it	lt
 8004f78:	4613      	movlt	r3, r2
 8004f7a:	6033      	str	r3, [r6, #0]
 8004f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f80:	4607      	mov	r7, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	b10a      	cbz	r2, 8004f8a <_printf_common+0x26>
 8004f86:	3301      	adds	r3, #1
 8004f88:	6033      	str	r3, [r6, #0]
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	0699      	lsls	r1, r3, #26
 8004f8e:	bf42      	ittt	mi
 8004f90:	6833      	ldrmi	r3, [r6, #0]
 8004f92:	3302      	addmi	r3, #2
 8004f94:	6033      	strmi	r3, [r6, #0]
 8004f96:	6825      	ldr	r5, [r4, #0]
 8004f98:	f015 0506 	ands.w	r5, r5, #6
 8004f9c:	d106      	bne.n	8004fac <_printf_common+0x48>
 8004f9e:	f104 0a19 	add.w	sl, r4, #25
 8004fa2:	68e3      	ldr	r3, [r4, #12]
 8004fa4:	6832      	ldr	r2, [r6, #0]
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	42ab      	cmp	r3, r5
 8004faa:	dc26      	bgt.n	8004ffa <_printf_common+0x96>
 8004fac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fb0:	6822      	ldr	r2, [r4, #0]
 8004fb2:	3b00      	subs	r3, #0
 8004fb4:	bf18      	it	ne
 8004fb6:	2301      	movne	r3, #1
 8004fb8:	0692      	lsls	r2, r2, #26
 8004fba:	d42b      	bmi.n	8005014 <_printf_common+0xb0>
 8004fbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	47c8      	blx	r9
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d01e      	beq.n	8005008 <_printf_common+0xa4>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	6922      	ldr	r2, [r4, #16]
 8004fce:	f003 0306 	and.w	r3, r3, #6
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	bf02      	ittt	eq
 8004fd6:	68e5      	ldreq	r5, [r4, #12]
 8004fd8:	6833      	ldreq	r3, [r6, #0]
 8004fda:	1aed      	subeq	r5, r5, r3
 8004fdc:	68a3      	ldr	r3, [r4, #8]
 8004fde:	bf0c      	ite	eq
 8004fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe4:	2500      	movne	r5, #0
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	bfc4      	itt	gt
 8004fea:	1a9b      	subgt	r3, r3, r2
 8004fec:	18ed      	addgt	r5, r5, r3
 8004fee:	2600      	movs	r6, #0
 8004ff0:	341a      	adds	r4, #26
 8004ff2:	42b5      	cmp	r5, r6
 8004ff4:	d11a      	bne.n	800502c <_printf_common+0xc8>
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	e008      	b.n	800500c <_printf_common+0xa8>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4652      	mov	r2, sl
 8004ffe:	4641      	mov	r1, r8
 8005000:	4638      	mov	r0, r7
 8005002:	47c8      	blx	r9
 8005004:	3001      	adds	r0, #1
 8005006:	d103      	bne.n	8005010 <_printf_common+0xac>
 8005008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800500c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005010:	3501      	adds	r5, #1
 8005012:	e7c6      	b.n	8004fa2 <_printf_common+0x3e>
 8005014:	18e1      	adds	r1, r4, r3
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	2030      	movs	r0, #48	@ 0x30
 800501a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800501e:	4422      	add	r2, r4
 8005020:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005024:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005028:	3302      	adds	r3, #2
 800502a:	e7c7      	b.n	8004fbc <_printf_common+0x58>
 800502c:	2301      	movs	r3, #1
 800502e:	4622      	mov	r2, r4
 8005030:	4641      	mov	r1, r8
 8005032:	4638      	mov	r0, r7
 8005034:	47c8      	blx	r9
 8005036:	3001      	adds	r0, #1
 8005038:	d0e6      	beq.n	8005008 <_printf_common+0xa4>
 800503a:	3601      	adds	r6, #1
 800503c:	e7d9      	b.n	8004ff2 <_printf_common+0x8e>
	...

08005040 <_printf_i>:
 8005040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	7e0f      	ldrb	r7, [r1, #24]
 8005046:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005048:	2f78      	cmp	r7, #120	@ 0x78
 800504a:	4691      	mov	r9, r2
 800504c:	4680      	mov	r8, r0
 800504e:	460c      	mov	r4, r1
 8005050:	469a      	mov	sl, r3
 8005052:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005056:	d807      	bhi.n	8005068 <_printf_i+0x28>
 8005058:	2f62      	cmp	r7, #98	@ 0x62
 800505a:	d80a      	bhi.n	8005072 <_printf_i+0x32>
 800505c:	2f00      	cmp	r7, #0
 800505e:	f000 80d1 	beq.w	8005204 <_printf_i+0x1c4>
 8005062:	2f58      	cmp	r7, #88	@ 0x58
 8005064:	f000 80b8 	beq.w	80051d8 <_printf_i+0x198>
 8005068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800506c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005070:	e03a      	b.n	80050e8 <_printf_i+0xa8>
 8005072:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005076:	2b15      	cmp	r3, #21
 8005078:	d8f6      	bhi.n	8005068 <_printf_i+0x28>
 800507a:	a101      	add	r1, pc, #4	@ (adr r1, 8005080 <_printf_i+0x40>)
 800507c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005080:	080050d9 	.word	0x080050d9
 8005084:	080050ed 	.word	0x080050ed
 8005088:	08005069 	.word	0x08005069
 800508c:	08005069 	.word	0x08005069
 8005090:	08005069 	.word	0x08005069
 8005094:	08005069 	.word	0x08005069
 8005098:	080050ed 	.word	0x080050ed
 800509c:	08005069 	.word	0x08005069
 80050a0:	08005069 	.word	0x08005069
 80050a4:	08005069 	.word	0x08005069
 80050a8:	08005069 	.word	0x08005069
 80050ac:	080051eb 	.word	0x080051eb
 80050b0:	08005117 	.word	0x08005117
 80050b4:	080051a5 	.word	0x080051a5
 80050b8:	08005069 	.word	0x08005069
 80050bc:	08005069 	.word	0x08005069
 80050c0:	0800520d 	.word	0x0800520d
 80050c4:	08005069 	.word	0x08005069
 80050c8:	08005117 	.word	0x08005117
 80050cc:	08005069 	.word	0x08005069
 80050d0:	08005069 	.word	0x08005069
 80050d4:	080051ad 	.word	0x080051ad
 80050d8:	6833      	ldr	r3, [r6, #0]
 80050da:	1d1a      	adds	r2, r3, #4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6032      	str	r2, [r6, #0]
 80050e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050e8:	2301      	movs	r3, #1
 80050ea:	e09c      	b.n	8005226 <_printf_i+0x1e6>
 80050ec:	6833      	ldr	r3, [r6, #0]
 80050ee:	6820      	ldr	r0, [r4, #0]
 80050f0:	1d19      	adds	r1, r3, #4
 80050f2:	6031      	str	r1, [r6, #0]
 80050f4:	0606      	lsls	r6, r0, #24
 80050f6:	d501      	bpl.n	80050fc <_printf_i+0xbc>
 80050f8:	681d      	ldr	r5, [r3, #0]
 80050fa:	e003      	b.n	8005104 <_printf_i+0xc4>
 80050fc:	0645      	lsls	r5, r0, #25
 80050fe:	d5fb      	bpl.n	80050f8 <_printf_i+0xb8>
 8005100:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005104:	2d00      	cmp	r5, #0
 8005106:	da03      	bge.n	8005110 <_printf_i+0xd0>
 8005108:	232d      	movs	r3, #45	@ 0x2d
 800510a:	426d      	negs	r5, r5
 800510c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005110:	4858      	ldr	r0, [pc, #352]	@ (8005274 <_printf_i+0x234>)
 8005112:	230a      	movs	r3, #10
 8005114:	e011      	b.n	800513a <_printf_i+0xfa>
 8005116:	6821      	ldr	r1, [r4, #0]
 8005118:	6833      	ldr	r3, [r6, #0]
 800511a:	0608      	lsls	r0, r1, #24
 800511c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005120:	d402      	bmi.n	8005128 <_printf_i+0xe8>
 8005122:	0649      	lsls	r1, r1, #25
 8005124:	bf48      	it	mi
 8005126:	b2ad      	uxthmi	r5, r5
 8005128:	2f6f      	cmp	r7, #111	@ 0x6f
 800512a:	4852      	ldr	r0, [pc, #328]	@ (8005274 <_printf_i+0x234>)
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	bf14      	ite	ne
 8005130:	230a      	movne	r3, #10
 8005132:	2308      	moveq	r3, #8
 8005134:	2100      	movs	r1, #0
 8005136:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800513a:	6866      	ldr	r6, [r4, #4]
 800513c:	60a6      	str	r6, [r4, #8]
 800513e:	2e00      	cmp	r6, #0
 8005140:	db05      	blt.n	800514e <_printf_i+0x10e>
 8005142:	6821      	ldr	r1, [r4, #0]
 8005144:	432e      	orrs	r6, r5
 8005146:	f021 0104 	bic.w	r1, r1, #4
 800514a:	6021      	str	r1, [r4, #0]
 800514c:	d04b      	beq.n	80051e6 <_printf_i+0x1a6>
 800514e:	4616      	mov	r6, r2
 8005150:	fbb5 f1f3 	udiv	r1, r5, r3
 8005154:	fb03 5711 	mls	r7, r3, r1, r5
 8005158:	5dc7      	ldrb	r7, [r0, r7]
 800515a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800515e:	462f      	mov	r7, r5
 8005160:	42bb      	cmp	r3, r7
 8005162:	460d      	mov	r5, r1
 8005164:	d9f4      	bls.n	8005150 <_printf_i+0x110>
 8005166:	2b08      	cmp	r3, #8
 8005168:	d10b      	bne.n	8005182 <_printf_i+0x142>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	07df      	lsls	r7, r3, #31
 800516e:	d508      	bpl.n	8005182 <_printf_i+0x142>
 8005170:	6923      	ldr	r3, [r4, #16]
 8005172:	6861      	ldr	r1, [r4, #4]
 8005174:	4299      	cmp	r1, r3
 8005176:	bfde      	ittt	le
 8005178:	2330      	movle	r3, #48	@ 0x30
 800517a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800517e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005182:	1b92      	subs	r2, r2, r6
 8005184:	6122      	str	r2, [r4, #16]
 8005186:	f8cd a000 	str.w	sl, [sp]
 800518a:	464b      	mov	r3, r9
 800518c:	aa03      	add	r2, sp, #12
 800518e:	4621      	mov	r1, r4
 8005190:	4640      	mov	r0, r8
 8005192:	f7ff fee7 	bl	8004f64 <_printf_common>
 8005196:	3001      	adds	r0, #1
 8005198:	d14a      	bne.n	8005230 <_printf_i+0x1f0>
 800519a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800519e:	b004      	add	sp, #16
 80051a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	f043 0320 	orr.w	r3, r3, #32
 80051aa:	6023      	str	r3, [r4, #0]
 80051ac:	4832      	ldr	r0, [pc, #200]	@ (8005278 <_printf_i+0x238>)
 80051ae:	2778      	movs	r7, #120	@ 0x78
 80051b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	6831      	ldr	r1, [r6, #0]
 80051b8:	061f      	lsls	r7, r3, #24
 80051ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80051be:	d402      	bmi.n	80051c6 <_printf_i+0x186>
 80051c0:	065f      	lsls	r7, r3, #25
 80051c2:	bf48      	it	mi
 80051c4:	b2ad      	uxthmi	r5, r5
 80051c6:	6031      	str	r1, [r6, #0]
 80051c8:	07d9      	lsls	r1, r3, #31
 80051ca:	bf44      	itt	mi
 80051cc:	f043 0320 	orrmi.w	r3, r3, #32
 80051d0:	6023      	strmi	r3, [r4, #0]
 80051d2:	b11d      	cbz	r5, 80051dc <_printf_i+0x19c>
 80051d4:	2310      	movs	r3, #16
 80051d6:	e7ad      	b.n	8005134 <_printf_i+0xf4>
 80051d8:	4826      	ldr	r0, [pc, #152]	@ (8005274 <_printf_i+0x234>)
 80051da:	e7e9      	b.n	80051b0 <_printf_i+0x170>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	f023 0320 	bic.w	r3, r3, #32
 80051e2:	6023      	str	r3, [r4, #0]
 80051e4:	e7f6      	b.n	80051d4 <_printf_i+0x194>
 80051e6:	4616      	mov	r6, r2
 80051e8:	e7bd      	b.n	8005166 <_printf_i+0x126>
 80051ea:	6833      	ldr	r3, [r6, #0]
 80051ec:	6825      	ldr	r5, [r4, #0]
 80051ee:	6961      	ldr	r1, [r4, #20]
 80051f0:	1d18      	adds	r0, r3, #4
 80051f2:	6030      	str	r0, [r6, #0]
 80051f4:	062e      	lsls	r6, r5, #24
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	d501      	bpl.n	80051fe <_printf_i+0x1be>
 80051fa:	6019      	str	r1, [r3, #0]
 80051fc:	e002      	b.n	8005204 <_printf_i+0x1c4>
 80051fe:	0668      	lsls	r0, r5, #25
 8005200:	d5fb      	bpl.n	80051fa <_printf_i+0x1ba>
 8005202:	8019      	strh	r1, [r3, #0]
 8005204:	2300      	movs	r3, #0
 8005206:	6123      	str	r3, [r4, #16]
 8005208:	4616      	mov	r6, r2
 800520a:	e7bc      	b.n	8005186 <_printf_i+0x146>
 800520c:	6833      	ldr	r3, [r6, #0]
 800520e:	1d1a      	adds	r2, r3, #4
 8005210:	6032      	str	r2, [r6, #0]
 8005212:	681e      	ldr	r6, [r3, #0]
 8005214:	6862      	ldr	r2, [r4, #4]
 8005216:	2100      	movs	r1, #0
 8005218:	4630      	mov	r0, r6
 800521a:	f7fa ffe1 	bl	80001e0 <memchr>
 800521e:	b108      	cbz	r0, 8005224 <_printf_i+0x1e4>
 8005220:	1b80      	subs	r0, r0, r6
 8005222:	6060      	str	r0, [r4, #4]
 8005224:	6863      	ldr	r3, [r4, #4]
 8005226:	6123      	str	r3, [r4, #16]
 8005228:	2300      	movs	r3, #0
 800522a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800522e:	e7aa      	b.n	8005186 <_printf_i+0x146>
 8005230:	6923      	ldr	r3, [r4, #16]
 8005232:	4632      	mov	r2, r6
 8005234:	4649      	mov	r1, r9
 8005236:	4640      	mov	r0, r8
 8005238:	47d0      	blx	sl
 800523a:	3001      	adds	r0, #1
 800523c:	d0ad      	beq.n	800519a <_printf_i+0x15a>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	079b      	lsls	r3, r3, #30
 8005242:	d413      	bmi.n	800526c <_printf_i+0x22c>
 8005244:	68e0      	ldr	r0, [r4, #12]
 8005246:	9b03      	ldr	r3, [sp, #12]
 8005248:	4298      	cmp	r0, r3
 800524a:	bfb8      	it	lt
 800524c:	4618      	movlt	r0, r3
 800524e:	e7a6      	b.n	800519e <_printf_i+0x15e>
 8005250:	2301      	movs	r3, #1
 8005252:	4632      	mov	r2, r6
 8005254:	4649      	mov	r1, r9
 8005256:	4640      	mov	r0, r8
 8005258:	47d0      	blx	sl
 800525a:	3001      	adds	r0, #1
 800525c:	d09d      	beq.n	800519a <_printf_i+0x15a>
 800525e:	3501      	adds	r5, #1
 8005260:	68e3      	ldr	r3, [r4, #12]
 8005262:	9903      	ldr	r1, [sp, #12]
 8005264:	1a5b      	subs	r3, r3, r1
 8005266:	42ab      	cmp	r3, r5
 8005268:	dcf2      	bgt.n	8005250 <_printf_i+0x210>
 800526a:	e7eb      	b.n	8005244 <_printf_i+0x204>
 800526c:	2500      	movs	r5, #0
 800526e:	f104 0619 	add.w	r6, r4, #25
 8005272:	e7f5      	b.n	8005260 <_printf_i+0x220>
 8005274:	080053f9 	.word	0x080053f9
 8005278:	0800540a 	.word	0x0800540a

0800527c <memmove>:
 800527c:	4288      	cmp	r0, r1
 800527e:	b510      	push	{r4, lr}
 8005280:	eb01 0402 	add.w	r4, r1, r2
 8005284:	d902      	bls.n	800528c <memmove+0x10>
 8005286:	4284      	cmp	r4, r0
 8005288:	4623      	mov	r3, r4
 800528a:	d807      	bhi.n	800529c <memmove+0x20>
 800528c:	1e43      	subs	r3, r0, #1
 800528e:	42a1      	cmp	r1, r4
 8005290:	d008      	beq.n	80052a4 <memmove+0x28>
 8005292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800529a:	e7f8      	b.n	800528e <memmove+0x12>
 800529c:	4402      	add	r2, r0
 800529e:	4601      	mov	r1, r0
 80052a0:	428a      	cmp	r2, r1
 80052a2:	d100      	bne.n	80052a6 <memmove+0x2a>
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052ae:	e7f7      	b.n	80052a0 <memmove+0x24>

080052b0 <_sbrk_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4d06      	ldr	r5, [pc, #24]	@ (80052cc <_sbrk_r+0x1c>)
 80052b4:	2300      	movs	r3, #0
 80052b6:	4604      	mov	r4, r0
 80052b8:	4608      	mov	r0, r1
 80052ba:	602b      	str	r3, [r5, #0]
 80052bc:	f7fb ffd8 	bl	8001270 <_sbrk>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d102      	bne.n	80052ca <_sbrk_r+0x1a>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	b103      	cbz	r3, 80052ca <_sbrk_r+0x1a>
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	200002f0 	.word	0x200002f0

080052d0 <memcpy>:
 80052d0:	440a      	add	r2, r1
 80052d2:	4291      	cmp	r1, r2
 80052d4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80052d8:	d100      	bne.n	80052dc <memcpy+0xc>
 80052da:	4770      	bx	lr
 80052dc:	b510      	push	{r4, lr}
 80052de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052e6:	4291      	cmp	r1, r2
 80052e8:	d1f9      	bne.n	80052de <memcpy+0xe>
 80052ea:	bd10      	pop	{r4, pc}

080052ec <_realloc_r>:
 80052ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f0:	4607      	mov	r7, r0
 80052f2:	4614      	mov	r4, r2
 80052f4:	460d      	mov	r5, r1
 80052f6:	b921      	cbnz	r1, 8005302 <_realloc_r+0x16>
 80052f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052fc:	4611      	mov	r1, r2
 80052fe:	f7ff bc4d 	b.w	8004b9c <_malloc_r>
 8005302:	b92a      	cbnz	r2, 8005310 <_realloc_r+0x24>
 8005304:	f7ff fbde 	bl	8004ac4 <_free_r>
 8005308:	4625      	mov	r5, r4
 800530a:	4628      	mov	r0, r5
 800530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005310:	f000 f81a 	bl	8005348 <_malloc_usable_size_r>
 8005314:	4284      	cmp	r4, r0
 8005316:	4606      	mov	r6, r0
 8005318:	d802      	bhi.n	8005320 <_realloc_r+0x34>
 800531a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800531e:	d8f4      	bhi.n	800530a <_realloc_r+0x1e>
 8005320:	4621      	mov	r1, r4
 8005322:	4638      	mov	r0, r7
 8005324:	f7ff fc3a 	bl	8004b9c <_malloc_r>
 8005328:	4680      	mov	r8, r0
 800532a:	b908      	cbnz	r0, 8005330 <_realloc_r+0x44>
 800532c:	4645      	mov	r5, r8
 800532e:	e7ec      	b.n	800530a <_realloc_r+0x1e>
 8005330:	42b4      	cmp	r4, r6
 8005332:	4622      	mov	r2, r4
 8005334:	4629      	mov	r1, r5
 8005336:	bf28      	it	cs
 8005338:	4632      	movcs	r2, r6
 800533a:	f7ff ffc9 	bl	80052d0 <memcpy>
 800533e:	4629      	mov	r1, r5
 8005340:	4638      	mov	r0, r7
 8005342:	f7ff fbbf 	bl	8004ac4 <_free_r>
 8005346:	e7f1      	b.n	800532c <_realloc_r+0x40>

08005348 <_malloc_usable_size_r>:
 8005348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800534c:	1f18      	subs	r0, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	bfbc      	itt	lt
 8005352:	580b      	ldrlt	r3, [r1, r0]
 8005354:	18c0      	addlt	r0, r0, r3
 8005356:	4770      	bx	lr

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
